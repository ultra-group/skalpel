From 21f74a356a036a8b856bf00055f394d2684601d2 Mon Sep 17 00:00:00 2001
From: John Pirie <jpirie23@gmail.com>
Date: Mon, 25 Nov 2013 12:29:23 +0000
Subject: [PATCH 1/2] Addition of support for Standard ML language

---
 src/configimpl.l |  113 ++--
 src/docsets.cpp  |    1 +
 src/doxygen.cpp  |    4 +-
 src/smlcode.h    |   45 ++
 src/smlcode.l    | 1462 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/smlscanner.h |   67 +++
 src/smlscanner.l | 1513 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/types.h      |   33 +-
 src/util.cpp     |  741 +++++++++++++-------------
 9 files changed, 3536 insertions(+), 443 deletions(-)
 create mode 100644 src/smlcode.h
 create mode 100644 src/smlcode.l
 create mode 100644 src/smlscanner.h
 create mode 100644 src/smlscanner.l

diff --git a/src/configimpl.l b/src/configimpl.l
index df032a6c..85daabbe 100644
--- a/src/configimpl.l
+++ b/src/configimpl.l
@@ -3,8 +3,8 @@
  * Copyright (C) 1997-2015 by Dimitri van Heesch.
  *
  * Permission to use, copy, modify, and distribute this software and its
- * documentation under the terms of the GNU General Public License is hereby 
- * granted. No representations are made about the suitability of this software 
+ * documentation under the terms of the GNU General Public License is hereby
+ * granted. No representations are made about the suitability of this software
  * for any purpose. It is provided "as is" without express or implied warranty.
  * See the GNU General Public License for more details.
  *
@@ -30,7 +30,7 @@
 #include <qregexp.h>
 #include <qstack.h>
 #include <qglobal.h>
-  
+
 #include "configimpl.h"
 #include "version.h"
 #include "portable.h"
@@ -51,7 +51,7 @@ void config_err(const char *fmt, ...)
   va_list args;
   va_start(args, fmt);
   vfprintf(stderr, (QCString(error_str) + fmt).data(), args);
-  va_end(args); 
+  va_end(args);
 }
 void config_warn(const char *fmt, ...)
 {
@@ -124,10 +124,10 @@ void ConfigOption::writeStringValue(FTextStream &t,QCString &s)
   if (p)
   {
     t << " ";
-    while ((c=*p++)!=0 && !needsEscaping) 
+    while ((c=*p++)!=0 && !needsEscaping)
       needsEscaping = (c==' ' || c=='\n' || c=='\t' || c=='"' || c=='#');
     if (needsEscaping)
-    { 
+    {
       t << "\"";
       p=se.data();
       while (*p)
@@ -166,7 +166,7 @@ void ConfigOption::writeStringList(FTextStream &t,QStrList &l)
 
 ConfigImpl *ConfigImpl::m_instance = 0;
 
-void ConfigInt::convertStrToVal() 
+void ConfigInt::convertStrToVal()
 {
   if (!m_valueString.isEmpty())
   {
@@ -189,7 +189,7 @@ void ConfigBool::convertStrToVal()
   QCString val = m_valueString.stripWhiteSpace().lower();
   if (!val.isEmpty())
   {
-    if (val=="yes" || val=="true" || val=="1" || val=="all") 
+    if (val=="yes" || val=="true" || val=="1" || val=="all")
     {
       m_value=TRUE;
     }
@@ -208,7 +208,7 @@ void ConfigBool::convertStrToVal()
 QCString &ConfigImpl::getString(const char *fileName,int num,const char *name) const
 {
   ConfigOption *opt = m_dict->find(name);
-  if (opt==0) 
+  if (opt==0)
   {
     config_err("%s<%d>: Internal error: Requested unknown option %s!\n",fileName,num,name);
     exit(1);
@@ -224,7 +224,7 @@ QCString &ConfigImpl::getString(const char *fileName,int num,const char *name) c
 QStrList &ConfigImpl::getList(const char *fileName,int num,const char *name) const
 {
   ConfigOption *opt = m_dict->find(name);
-  if (opt==0) 
+  if (opt==0)
   {
     config_err("%s<%d>: Internal error: Requested unknown option %s!\n",fileName,num,name);
     exit(1);
@@ -240,7 +240,7 @@ QStrList &ConfigImpl::getList(const char *fileName,int num,const char *name) con
 QCString &ConfigImpl::getEnum(const char *fileName,int num,const char *name) const
 {
   ConfigOption *opt = m_dict->find(name);
-  if (opt==0) 
+  if (opt==0)
   {
     config_err("%s<%d>: Internal error: Requested unknown option %s!\n",fileName,num,name);
     exit(1);
@@ -256,7 +256,7 @@ QCString &ConfigImpl::getEnum(const char *fileName,int num,const char *name) con
 int &ConfigImpl::getInt(const char *fileName,int num,const char *name) const
 {
   ConfigOption *opt = m_dict->find(name);
-  if (opt==0) 
+  if (opt==0)
   {
     config_err("%s<%d>: Internal error: Requested unknown option %s!\n",fileName,num,name);
     exit(1);
@@ -272,7 +272,7 @@ int &ConfigImpl::getInt(const char *fileName,int num,const char *name) const
 bool &ConfigImpl::getBool(const char *fileName,int num,const char *name) const
 {
   ConfigOption *opt = m_dict->find(name);
-  if (opt==0) 
+  if (opt==0)
   {
     config_err("%s<%d>: Internal error: Requested unknown option %s!\n",fileName,num,name);
     exit(1);
@@ -412,7 +412,7 @@ struct ConfigFileState
   YY_BUFFER_STATE oldState;
   YY_BUFFER_STATE newState;
   QCString fileName;
-};  
+};
 
 static const char       *inputString;
 static int	         inputPosition;
@@ -425,7 +425,7 @@ static QStrList         *l=0;
 static int               lastState;
 static QCString          elemStr;
 static QStrList          includePathList;
-static QStack<ConfigFileState> includeStack;  
+static QStack<ConfigFileState> includeStack;
 static int               includeDepth;
 static bool              config_upd = FALSE;
 static QCString          encoding;
@@ -439,7 +439,7 @@ static ConfigImpl       *config;
 static int yyread(char *buf,int max_size)
 {
     // no file included
-    if (includeStack.isEmpty()) 
+    if (includeStack.isEmpty())
     {
         int c=0;
 	if (inputString==0) return c;
@@ -449,8 +449,8 @@ static int yyread(char *buf,int max_size)
 	      c++; buf++;
   	}
 	return c;
-    } 
-    else 
+    }
+    else
     {
         //assert(includeStack.current()->newState==YY_CURRENT_BUFFER);
 	return (int)fread(buf,1,max_size,includeStack.current()->filePtr);
@@ -470,7 +470,7 @@ static QCString configStringRecode(
   int outputSize=inputSize*4+1;
   QCString output(outputSize);
   void *cd = portable_iconv_open(outputEncoding,inputEncoding);
-  if (cd==(void *)(-1)) 
+  if (cd==(void *)(-1))
   {
     fprintf(stderr,"Error: unsupported character conversion: '%s'->'%s'\n",
         inputEncoding.data(),outputEncoding.data());
@@ -536,7 +536,7 @@ static FILE *findFile(const char *fileName)
     FILE *f = tryPath(s,fileName);
     if (f) return f;
     s=includePathList.next();
-  } 
+  }
   // try cwd if includePathList fails
   return tryPath(".",fileName);
 }
@@ -547,7 +547,7 @@ static void readIncludeFile(const char *incName)
     config_err("maximum include depth (%d) reached, %s is not included. Aborting...\n",
 	MAX_INCLUDE_DEPTH,incName);
     exit(1);
-  } 
+  }
 
   QCString inc = incName;
   substEnvVarsInString(inc);
@@ -568,7 +568,7 @@ static void readIncludeFile(const char *incName)
     msg("@INCLUDE = %s: parsing...\n",inc.data());
 #endif
 
-    // store the state of the old file 
+    // store the state of the old file
     ConfigFileState *fs=new ConfigFileState;
     fs->oldState=YY_CURRENT_BUFFER;
     fs->lineNr=yyLineNr;
@@ -581,7 +581,7 @@ static void readIncludeFile(const char *incName)
     fs->newState=YY_CURRENT_BUFFER;
     yyFileName=inc;
     includeDepth++;
-  } 
+  }
   else
   {
     config_err("@INCLUDE = %s: not found!\n",inc.data());
@@ -616,12 +616,12 @@ static void readIncludeFile(const char *incName)
 <Start,GetString,GetStrList,GetBool,SkipInvalid>"##".*"\n" { config->appendUserComment(yytext);}
 <Start,GetString,GetStrList,GetBool,SkipInvalid>"#"	   { BEGIN(SkipComment); }
 <Start>[a-z_A-Z][a-z_A-Z0-9]*[ \t]*"="	 { QCString cmd=yytext;
-                                           cmd=cmd.left(cmd.length()-1).stripWhiteSpace(); 
+                                           cmd=cmd.left(cmd.length()-1).stripWhiteSpace();
 					   ConfigOption *option = config->get(cmd);
 					   if (option==0) // oops not known
 					   {
 					     config_warn("ignoring unsupported tag `%s' at line %d, file %s\n",
-						 yytext,yyLineNr,yyFileName.data()); 
+						 yytext,yyLineNr,yyFileName.data());
 					     BEGIN(SkipInvalid);
 					   }
 					   else // known tag
@@ -670,7 +670,7 @@ static void readIncludeFile(const char *incName)
                                                  {
 					           config_warn("Tag `%s' at line %d of file `%s' has become obsolete.\n"
 						              "         To avoid this warning please remove this line from your configuration "
-							      "file or upgrade it using \"doxygen -u\"\n", cmd.data(),yyLineNr,yyFileName.data()); 
+							      "file or upgrade it using \"doxygen -u\"\n", cmd.data(),yyLineNr,yyFileName.data());
                                                  }
 					         BEGIN(SkipInvalid);
 						 break;
@@ -684,7 +684,7 @@ static void readIncludeFile(const char *incName)
                                                  {
 					           config_warn("Tag `%s' at line %d of file `%s' belongs to an option that was not enabled at compile time.\n"
 						              "         To avoid this warning please remove this line from your configuration "
-							    "file or upgrade it using \"doxygen -u\", or recompile doxygen with this feature enabled.\n", cmd.data(),yyLineNr,yyFileName.data()); 
+							    "file or upgrade it using \"doxygen -u\", or recompile doxygen with this feature enabled.\n", cmd.data(),yyLineNr,yyFileName.data());
                                                  }
 					         BEGIN(SkipInvalid);
 						 break;
@@ -692,12 +692,12 @@ static void readIncludeFile(const char *incName)
 					   }
 					}
 <Start>[a-z_A-Z][a-z_A-Z0-9]*[ \t]*"+="	{ QCString cmd=yytext;
-                                          cmd=cmd.left(cmd.length()-2).stripWhiteSpace(); 
+                                          cmd=cmd.left(cmd.length()-2).stripWhiteSpace();
 					  ConfigOption *option = config->get(cmd);
 					  if (option==0) // oops not known
 					  {
 					    config_warn("ignoring unsupported tag `%s' at line %d, file %s\n",
-						yytext,yyLineNr,yyFileName.data()); 
+						yytext,yyLineNr,yyFileName.data());
 					    BEGIN(SkipInvalid);
 					  }
 					  else // known tag
@@ -719,19 +719,19 @@ static void readIncludeFile(const char *incName)
 					      case ConfigOption::O_Int:
 					      case ConfigOption::O_Bool:
 					        config_warn("operator += not supported for `%s'. Ignoring line at line %d, file %s\n",
-						    yytext,yyLineNr,yyFileName.data()); 
+						    yytext,yyLineNr,yyFileName.data());
 					        BEGIN(SkipInvalid);
 						break;
 					       case ConfigOption::O_Obsolete:
 					         config_warn("Tag `%s' at line %d of file %s has become obsolete.\n"
 						            "To avoid this warning please update your configuration "
-							    "file using \"doxygen -u\"\n", cmd.data(),yyLineNr,yyFileName.data()); 
+							    "file using \"doxygen -u\"\n", cmd.data(),yyLineNr,yyFileName.data());
 					         BEGIN(SkipInvalid);
 						 break;
 					       case ConfigOption::O_Disabled:
 					         config_warn("Tag `%s' at line %d of file %s belongs to an option that was not enabled at compile time.\n"
 						            "To avoid this warning please remove this line from your configuration "
-							    "file, upgrade it using \"doxygen -u\", or recompile doxygen with this feature enabled.\n", cmd.data(),yyLineNr,yyFileName.data()); 
+							    "file, upgrade it using \"doxygen -u\", or recompile doxygen with this feature enabled.\n", cmd.data(),yyLineNr,yyFileName.data());
 					         BEGIN(SkipInvalid);
 						 break;
 					     }
@@ -740,8 +740,8 @@ static void readIncludeFile(const char *incName)
 <Start>"@INCLUDE_PATH"[ \t]*"=" 	{ BEGIN(GetStrList); l=&includePathList; l->clear(); elemStr=""; }
   /* include a config file */
 <Start>"@INCLUDE"[ \t]*"="     		{ BEGIN(Include);}
-<Include>([^ \"\t\r\n]+)|("\""[^\n\"]+"\"") { 
-  					  readIncludeFile(configStringRecode(yytext,encoding,"UTF-8")); 
+<Include>([^ \"\t\r\n]+)|("\""[^\n\"]+"\"") {
+  					  readIncludeFile(configStringRecode(yytext,encoding,"UTF-8"));
   					  BEGIN(Start);
 					}
 <<EOF>>					{
@@ -768,14 +768,14 @@ static void readIncludeFile(const char *incName)
 
 <Start>[a-z_A-Z0-9]+			{ config_warn("ignoring unknown tag `%s' at line %d, file %s\n",yytext,yyLineNr,yyFileName.data()); }
 <GetString,GetBool,SkipInvalid>\n	{ yyLineNr++; BEGIN(Start); }
-<GetStrList>\n				{ 
-  					  yyLineNr++; 
+<GetStrList>\n				{
+  					  yyLineNr++;
 					  if (!elemStr.isEmpty())
 					  {
 					    //printf("elemStr1=`%s'\n",elemStr.data());
 					    l->append(elemStr);
 					  }
-					  BEGIN(Start); 
+					  BEGIN(Start);
 					}
 <GetStrList>[ \t]+			{
   				          if (!elemStr.isEmpty())
@@ -785,14 +785,14 @@ static void readIncludeFile(const char *incName)
 					  }
 					  elemStr.resize(0);
   					}
-<GetString>[^ \"\t\r\n]+		{ (*s)+=configStringRecode(yytext,encoding,"UTF-8"); 
+<GetString>[^ \"\t\r\n]+		{ (*s)+=configStringRecode(yytext,encoding,"UTF-8");
                                           checkEncoding();
                                         }
 <GetString,GetStrList,SkipInvalid>"\""	{ lastState=YY_START;
-  					  BEGIN(GetQuotedString); 
-                                          tmpString.resize(0); 
+  					  BEGIN(GetQuotedString);
+                                          tmpString.resize(0);
 					}
-<GetQuotedString>"\""|"\n" 		{ 
+<GetQuotedString>"\""|"\n" 		{
                                           // we add a bogus space to signal that the string was quoted. This space will be stripped later on.
                                           tmpString+=" ";
   					  //printf("Quoted String = `%s'\n",tmpString.data());
@@ -816,16 +816,16 @@ static void readIncludeFile(const char *incName)
   					  tmpString+='"';
   					}
 <GetQuotedString>.			{ tmpString+=*yytext; }
-<GetBool>[a-zA-Z]+			{ 
-  					  QCString bs=yytext; 
+<GetBool>[a-zA-Z]+			{
+  					  QCString bs=yytext;
   					  bs=bs.upper();
   					  if (bs=="YES" || bs=="1")
 					    *b=TRUE;
 					  else if (bs=="NO" || bs=="0")
 					    *b=FALSE;
-					  else 
+					  else
 					  {
-					    *b=FALSE; 
+					    *b=FALSE;
 					    config_warn("Invalid value `%s' for "
 						 "boolean tag in line %d, file %s; use YES or NO\n",
 						 bs.data(),yyLineNr,yyFileName.data());
@@ -837,7 +837,7 @@ static void readIncludeFile(const char *incName)
 <SkipComment>\n				{ yyLineNr++; BEGIN(Start); }
 <SkipComment>\\[ \r\t]*\n		{ yyLineNr++; BEGIN(Start); }
 <*>\\[ \r\t]*\n				{ yyLineNr++; }
-<*>.					
+<*>.
 <*>\n					{ yyLineNr++ ; }
 
 %%
@@ -850,7 +850,7 @@ void ConfigImpl::writeTemplate(FTextStream &t,bool sl,bool upd)
   /* print first lines of user comment that were at the beginning of the file, might have special meaning for editors */
   if (m_startComment)
   {
-    t << takeStartComment() << endl; 
+    t << takeStartComment() << endl;
   }
   t << "# Doxyfile " << versionString << endl << endl;
   if (!sl)
@@ -917,8 +917,8 @@ static void substEnvVarsInStrList(QStrList &sl)
 
     if (!wasQuoted) /* as a result of the expansion, a single string
 		       may have expanded into a list, which we'll
-		       add to sl. If the original string already 
-		       contained multiple elements no further 
+		       add to sl. If the original string already
+		       contained multiple elements no further
 		       splitting is done to allow quoted items with spaces! */
     {
       int l=result.length();
@@ -929,7 +929,7 @@ static void substEnvVarsInStrList(QStrList &sl)
       {
 	char c=0;
 	// skip until start of new word
-	while (i<l && ((c=result.at(i))==' ' || c=='\t')) i++; 
+	while (i<l && ((c=result.at(i))==' ' || c=='\t')) i++;
 	p=i; // p marks the start index of the word
 	// skip until end of a word
 	while (i<l && ((c=result.at(i))!=' ' && c!='\t' && c!='"')) i++;
@@ -947,7 +947,7 @@ static void substEnvVarsInStrList(QStrList &sl)
 		sl.insert(sl.at(),result.mid(p,i-p)); // insert new item before current item.
 		sl.next();                 // current item is now the old item
 		p=i+1;
-		break; 
+		break;
 	      }
 	      else if (c=='\\') // skip escaped stuff
 	      {
@@ -1051,7 +1051,7 @@ void ConfigImpl::init()
 
 void ConfigImpl::create()
 {
-  if (m_initialized) return; 
+  if (m_initialized) return;
   m_initialized = TRUE;
   addConfigOptions(this);
 }
@@ -1074,7 +1074,7 @@ static QCString configFileToString(const char *name)
       while ((size=f.readBlock(contents.rawData()+totalSize,bSize))==bSize)
       {
         totalSize+=bSize;
-        contents.resize(totalSize+bSize); 
+        contents.resize(totalSize+bSize);
       }
       totalSize+=size+2;
       contents.resize(totalSize);
@@ -1099,7 +1099,7 @@ static QCString configFileToString(const char *name)
       QCString contents(fsize+2);
       f.readBlock(contents.rawData(),fsize);
       f.close();
-      if (fsize==0 || contents[fsize-1]=='\n') 
+      if (fsize==0 || contents[fsize-1]=='\n')
 	contents[fsize]='\0';
       else
 	contents[fsize]='\n'; // to help the scanner
@@ -1107,7 +1107,7 @@ static QCString configFileToString(const char *name)
       return contents;
     }
   }
-  if (!fileOpened)  
+  if (!fileOpened)
   {
     config_err("cannot open file `%s' for reading\n",name);
     exit(1);
@@ -1139,7 +1139,7 @@ bool ConfigImpl::parse(const char *fn,bool update)
   int retval;
   encoding = "UTF-8";
   printlex(yy_flex_debug, TRUE, __FILE__, fn);
-  retval =  parseString(fn,configFileToString(fn), update); 
+  retval =  parseString(fn,configFileToString(fn), update);
   printlex(yy_flex_debug, FALSE, __FILE__, fn);
   return retval;
 }
@@ -1774,4 +1774,3 @@ void Config::deinit()
 {
   ConfigImpl::instance()->deleteInstance();
 }
-
diff --git a/src/docsets.cpp b/src/docsets.cpp
index 29b7616f..78a9eb57 100644
--- a/src/docsets.cpp
+++ b/src/docsets.cpp
@@ -328,6 +328,7 @@ void DocSets::addIndexItem(Definition *context,MemberDef *md,
     case SrcLangExt_Java:    lang="java"; break;       // Java
     case SrcLangExt_JS:      lang="javascript"; break; // Javascript
     case SrcLangExt_Python:  lang="python"; break;     // Python
+    case SrcLangExt_Sml:     lang="sml"; break;        // Standard ML
     case SrcLangExt_Fortran: lang="fortran"; break;    // Fortran
     case SrcLangExt_VHDL:    lang="vhdl"; break;       // VHDL
     case SrcLangExt_XML:     lang="xml"; break;        // DBUS XML
diff --git a/src/doxygen.cpp b/src/doxygen.cpp
index d3554cff..b8f25843 100644
--- a/src/doxygen.cpp
+++ b/src/doxygen.cpp
@@ -70,6 +70,7 @@
 #include "parserintf.h"
 #include "htags.h"
 #include "pyscanner.h"
+#include "smlscanner.h"
 #include "fortranscanner.h"
 #include "xmlscanner.h"
 #include "sqlscanner.h"
@@ -9998,6 +9999,7 @@ void initDoxygen()
   Doxygen::parserManager->registerDefaultParser(         new FileParser);
   Doxygen::parserManager->registerParser("c",            new CLanguageScanner);
   Doxygen::parserManager->registerParser("python",       new PythonLanguageScanner);
+  Doxygen::parserManager->registerParser("sml",          new SmlLanguageScanner);
   Doxygen::parserManager->registerParser("fortran",      new FortranLanguageScanner);
   Doxygen::parserManager->registerParser("fortranfree",  new FortranLanguageScannerFree);
   Doxygen::parserManager->registerParser("fortranfixed", new FortranLanguageScannerFixed);
@@ -11108,6 +11110,7 @@ void parseInput()
   preFreeScanner();
   scanFreeScanner();
   pyscanFreeScanner();
+  smlscanFreeScanner();
 
   if (!g_storage->open(IO_ReadOnly))
   {
@@ -11760,4 +11763,3 @@ void generateOutput()
   delete Doxygen::symbolStorage;
   g_successfulRun=TRUE;
 }
-
diff --git a/src/smlcode.h b/src/smlcode.h
new file mode 100644
index 00000000..5d242d41
--- /dev/null
+++ b/src/smlcode.h
@@ -0,0 +1,45 @@
+/******************************************************************************
+ *
+ * 
+ *
+ * Copyright (C) 1997-2013 by Dimitri van Heesch.
+ *
+ * Permission to use, copy, modify, and distribute this software and its
+ * documentation under the terms of the GNU General Public License is hereby 
+ * granted. No representations are made about the suitability of this software 
+ * for any purpose. It is provided "as is" without express or implied warranty.
+ * See the GNU General Public License for more details.
+ *
+ * Documents produced by Doxygen are derivative works derived from the
+ * input used in their production; they are not affected by this license.
+ *
+ */
+/*  This code is based on the work done by the MoxyPyDoxy team
+ *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
+ *  in Spring 2005 as part of CS 179E: Compiler Design Project
+ *  at the University of California, Riverside; the course was
+ *  taught by Peter H. Froehlich <phf@acm.org>.
+ */
+
+
+#ifndef SMLCODE_H
+#define SMLCODE_H
+
+#include "types.h"
+
+class CodeOutputInterface;
+class FileDef;
+class MemberDef;
+class QCString;
+class Definition;
+
+extern void parseSmlCode(CodeOutputInterface &,const char *,const QCString &,
+             bool ,const char *,FileDef *fd,
+	     int startLine,int endLine,bool inlineFragment,
+             MemberDef *memberDef,bool showLineNumbers,Definition *searchCtx,
+             bool collectXRefs);
+
+
+extern void resetSmlCodeParserState();
+
+#endif
diff --git a/src/smlcode.l b/src/smlcode.l
new file mode 100644
index 00000000..4ad3375e
--- /dev/null
+++ b/src/smlcode.l
@@ -0,0 +1,1462 @@
+/******************************************************************************
+ *
+ *
+ *
+ * Copyright (C) 1997-2013 by Dimitri van Heesch.
+ *
+ * Permission to use, copy, modify, and distribute this software and its
+ * documentation under the terms of the GNU General Public License is hereby
+ * granted. No representations are made about the suitability of this software
+ * for any purpose. It is provided "as is" without express or implied warranty.
+ * See the GNU General Public License for more details.
+ *
+ * Documents produced by Doxygen are derivative works derived from the
+ * input used in their production; they are not affected by this license.
+ *
+ */
+/*  This code is based on the work done by the MoxyPyDoxy team
+ *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
+ *  in Spring 2005 as part of CS 179E: Compiler Design Project
+ *  at the University of California, Riverside; the course was
+ *  taught by Peter H. Froehlich <phf@acm.org>.
+ */
+
+
+%{
+
+#include <stdio.h>
+#include <qvaluestack.h>
+
+#include "smlcode.h"
+#include "message.h"
+
+#include "scanner.h"
+#include "entry.h"
+#include "doxygen.h"
+#include "outputlist.h"
+#include "util.h"
+#include "membername.h"
+#include "searchindex.h"
+#include "config.h"
+#include "groupdef.h"
+#include "classlist.h"
+#include "filedef.h"
+#include "namespacedef.h"
+#include "tooltip.h"
+
+// Toggle for some debugging info
+//#define DBG_CTX(x) fprintf x
+#define DBG_CTX(x) do { } while(0)
+
+#define YY_NEVER_INTERACTIVE 1
+#define YY_NO_INPUT 1
+
+static ClassSDict    g_codeClassSDict(17);
+static QCString      g_curClassName;
+static QStrList      g_curClassBases;
+
+
+static CodeOutputInterface * g_code;
+static const char *  g_inputString;     //!< the code fragment as text
+static int	     g_inputPosition;   //!< read offset during parsing
+static const char *  g_currentFontClass;
+static bool          g_needsTermination;
+static Definition   *g_searchCtx;
+static bool          g_collectXRefs;
+static int           g_inputLines;      //!< number of line in the code fragment
+static int	     g_yyLineNr;        //!< current line number
+static FileDef *     g_sourceFileDef;
+static Definition *  g_currentDefinition;
+static MemberDef *   g_currentMemberDef;
+static bool          g_includeCodeFragment;
+static QCString      g_realScope;
+//static bool          g_insideBody;
+static int           g_bodyCurlyCount;
+static bool          g_searchingForBody;
+static QCString      g_classScope;
+static int           g_paramParens;
+//static int           g_anchorCount;
+
+static bool          g_exampleBlock;
+static QCString      g_exampleName;
+static QCString      g_exampleFile;
+
+static QCString      g_type;
+static QCString      g_name;
+
+static bool          g_doubleStringIsDoc;
+static bool          g_doubleQuote;
+static bool          g_noSuiteFound;
+static int           g_stringContext;
+
+static void endFontClass();
+
+
+/*! Represents a stack of variable to class mappings as found in the
+ *  code. Each scope is enclosed in pushScope() and popScope() calls.
+ *  Variables are added by calling addVariables() and one can search
+ *  for variable using findVariable().
+ */
+class SmlVariableContext
+{
+  public:
+    static const ClassDef *dummyContext;
+    class Scope : public SDict<ClassDef>
+    {
+      public:
+	Scope() : SDict<ClassDef>(17) {}
+    };
+
+    SmlVariableContext()
+    {
+      m_scopes.setAutoDelete(TRUE);
+    }
+
+    virtual ~SmlVariableContext()
+    {
+    }
+
+    void pushScope()
+    {
+      m_scopes.append(new Scope);
+    }
+
+    void popScope()
+    {
+      if (m_scopes.count()>0)
+      {
+	m_scopes.remove(m_scopes.count()-1);
+      }
+    }
+
+    void clear()
+    {
+      m_scopes.clear();
+      m_globalScope.clear();
+    }
+
+    void clearExceptGlobal()
+    {
+      m_scopes.clear();
+    }
+
+    void addVariable(const QCString &type,const QCString &name);
+    ClassDef *findVariable(const QCString &name);
+
+  private:
+    Scope        m_globalScope;
+    QList<Scope> m_scopes;
+};
+
+void SmlVariableContext::addVariable(const QCString &type,const QCString &name)
+{
+  //printf("SmlVariableContext::addVariable(%s,%s)\n",type.data(),name.data());
+  QCString ltype = type.simplifyWhiteSpace();
+  QCString lname = name.simplifyWhiteSpace();
+
+  Scope *scope = m_scopes.count()==0 ? &m_globalScope : m_scopes.getLast();
+  ClassDef *varType;
+  if (
+      (varType=g_codeClassSDict[ltype]) ||  // look for class definitions inside the code block
+      (varType=getResolvedClass(g_currentDefinition,g_sourceFileDef,ltype)) // look for global class definitions
+     )
+  {
+    scope->append(lname,varType); // add it to a list
+  }
+  else
+  {
+    if (m_scopes.count()>0) // for local variables add a dummy entry so the name
+			    // is hidden to avoid FALSE links to global variables with the same name
+			    // TODO: make this work for namespaces as well!
+    {
+      scope->append(lname,dummyContext);
+    }
+  }
+}
+
+ClassDef *SmlVariableContext::findVariable(const QCString &name)
+{
+  if (name.isEmpty()) return 0;
+  ClassDef *result = 0;
+  QListIterator<Scope> sli(m_scopes);
+  Scope *scope;
+  // search from inner to outer scope
+  for (sli.toLast();(scope=sli.current());--sli)
+  {
+    result = scope->find(name);
+    if (result)
+    {
+      return result;
+    }
+  }
+  // nothing found -> also try the global scope
+  result=m_globalScope.find(name);
+  return result;
+}
+
+static SmlVariableContext g_theVarContext;
+const ClassDef *SmlVariableContext::dummyContext = (ClassDef*)0x8;
+
+class SmlCallContext
+{
+  public:
+    struct Ctx
+    {
+      Ctx() : name(g_name), type(g_type), cd(0) {}
+      QCString name;
+      QCString type;
+      ClassDef *cd;
+    };
+
+    SmlCallContext()
+    {
+      m_classList.append(new Ctx);
+      m_classList.setAutoDelete(TRUE);
+    }
+
+    virtual ~SmlCallContext() {}
+
+    void setClass(ClassDef *cd)
+    {
+      Ctx *ctx = m_classList.getLast();
+      if (ctx)
+      {
+	ctx->cd=cd;
+      }
+    }
+    void pushScope()
+    {
+      m_classList.append(new Ctx);
+    }
+
+    void popScope()
+    {
+      if (m_classList.count()>1)
+      {
+	Ctx *ctx = m_classList.getLast();
+	if (ctx)
+	{
+	  g_name = ctx->name;
+	  g_type = ctx->type;
+	}
+	m_classList.removeLast();
+      }
+      else
+      {
+      }
+    }
+
+    void clear()
+    {
+      m_classList.clear();
+      m_classList.append(new Ctx);
+    }
+
+    ClassDef *getClass() const
+    {
+      Ctx *ctx = m_classList.getLast();
+
+      if (ctx)
+	return ctx->cd;
+      else
+	return 0;
+    }
+
+  private:
+    QList<Ctx> m_classList;
+};
+
+static SmlCallContext g_theCallContext;
+
+
+/*! counts the number of lines in the input */
+static int countLines()
+{
+  const char *p=g_inputString;
+  char c;
+  int count=1;
+  while ((c=*p))
+  {
+    p++ ;
+    if (c=='\n') count++;
+  }
+  if (p>g_inputString && *(p-1)!='\n')
+  { // last line does not end with a \n, so we add an extra
+    // line and explicitly terminate the line after parsing.
+    count++,
+    g_needsTermination=TRUE;
+  }
+  return count;
+}
+
+static void setCurrentDoc(const QCString &anchor)
+{
+  if (Doxygen::searchIndex)
+  {
+    if (g_searchCtx)
+    {
+      Doxygen::searchIndex->setCurrentDoc(g_searchCtx,g_searchCtx->anchor(),FALSE);
+    }
+    else
+    {
+      Doxygen::searchIndex->setCurrentDoc(g_sourceFileDef,anchor,TRUE);
+    }
+  }
+}
+
+static void addToSearchIndex(const char *text)
+{
+  if (Doxygen::searchIndex)
+  {
+    Doxygen::searchIndex->addWord(text,FALSE);
+  }
+}
+
+
+static ClassDef *stripClassName(const char *s,Definition *d=g_currentDefinition)
+{
+  int pos=0;
+  QCString type = s;
+  QCString className;
+  QCString templSpec;
+  while (extractClassNameFromType(type,pos,className,templSpec)!=-1)
+  {
+    QCString clName=className+templSpec;
+
+    ClassDef *cd=0;
+    if (!g_classScope.isEmpty())
+    {
+      cd=getResolvedClass(d,g_sourceFileDef,g_classScope+"::"+clName);
+    }
+    if (cd==0)
+    {
+      cd=getResolvedClass(d,g_sourceFileDef,clName);
+    }
+    if (cd)
+    {
+      return cd;
+    }
+  }
+
+  return 0;
+}
+
+
+/*! start a new line of code, inserting a line number if g_sourceFileDef
+ * is TRUE. If a definition starts at the current line, then the line
+ * number is linked to the documentation of that definition.
+ */
+static void startCodeLine()
+{
+  //if (g_currentFontClass) { g_code->endFontClass(); }
+  if (g_sourceFileDef)
+  {
+    //QCString lineNumber,lineAnchor;
+    //lineNumber.sprintf("%05d",g_yyLineNr);
+    //lineAnchor.sprintf("l%05d",g_yyLineNr);
+   
+    Definition *d   = g_sourceFileDef->getSourceDefinition(g_yyLineNr);
+    //printf("startCodeLine %d d=%p\n",g_yyLineNr,d);
+    //g_code->startLineNumber();
+    if (!g_includeCodeFragment && d && d->isLinkableInProject())
+    {
+      g_currentDefinition = d;
+      g_currentMemberDef = g_sourceFileDef->getSourceMember(g_yyLineNr);
+      //g_insideBody = FALSE;
+      g_searchingForBody = TRUE;
+      g_realScope = d->name().copy();
+      g_classScope = d->name().copy();
+      //printf("Real scope: `%s'\n",g_realScope.data());
+      g_bodyCurlyCount = 0;
+      QCString lineAnchor;
+      lineAnchor.sprintf("l%05d",g_yyLineNr);
+      if (g_currentMemberDef)
+      {
+        g_code->writeLineNumber(g_currentMemberDef->getReference(),
+	                        g_currentMemberDef->getOutputFileBase(),
+	                        g_currentMemberDef->anchor(),g_yyLineNr);
+        setCurrentDoc(lineAnchor);
+      }
+      else
+      {
+        g_code->writeLineNumber(d->getReference(),
+	                        d->getOutputFileBase(),
+	                        0,g_yyLineNr);
+        setCurrentDoc(lineAnchor);
+      }
+    }
+    else
+    {
+      //g_code->codify(lineNumber);
+      g_code->writeLineNumber(0,0,0,g_yyLineNr);
+    }
+    //g_code->endLineNumber();
+  }
+  g_code->startCodeLine(g_sourceFileDef); 
+  if (g_currentFontClass)
+  {
+    g_code->startFontClass(g_currentFontClass);
+  }
+}
+
+
+static void codify(const char* text)
+{
+  g_code->codify(text);
+}
+
+static void endCodeLine()
+{
+  endFontClass();
+  g_code->endCodeLine();
+}
+
+static void nextCodeLine()
+{
+  const char *fc = g_currentFontClass;
+  endCodeLine();
+  if (g_yyLineNr<g_inputLines)
+  {
+    g_currentFontClass = fc;
+    startCodeLine();
+  }
+}
+
+
+/*! writes a link to a fragment \a text that may span multiple lines, inserting
+ * line numbers for each line. If \a text contains newlines, the link will be
+ * split into multiple links with the same destination, one for each line.
+ */
+static void writeMultiLineCodeLink(CodeOutputInterface &ol,
+		  Definition *d,
+		  const char *text)
+{
+  static bool sourceTooltips = Config_getBool("SOURCE_TOOLTIPS");
+  TooltipManager::instance()->addTooltip(d);
+  QCString ref  = d->getReference();
+  QCString file = d->getOutputFileBase();
+  QCString anchor = d->anchor();
+  QCString tooltip;
+  if (!sourceTooltips) // fall back to simple "title" tooltips
+  {
+    tooltip = d->briefDescriptionAsTooltip();
+  }
+  bool done=FALSE;
+  char *p=(char *)text;
+  while (!done)
+  {
+    char *sp=p;
+    char c;
+    while ((c=*p++) && c!='\n') { }
+    if (c=='\n')
+    {
+      g_yyLineNr++;
+      *(p-1)='\0';
+      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
+      ol.writeCodeLink(ref,file,anchor,sp,tooltip);
+      nextCodeLine();
+    }
+    else
+    {
+      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
+      ol.writeCodeLink(ref,file,anchor,sp,tooltip);
+      done=TRUE;
+    }
+  }
+}
+
+
+static void codifyLines(char *text)
+{
+  //printf("codifyLines(%d,\"%s\")\n",g_yyLineNr,text);
+  char *p=text,*sp=p;
+  char c;
+  bool done=FALSE;
+  while (!done)
+  {
+    sp=p;
+    while ((c=*p++) && c!='\n') { }
+    if (c=='\n')
+    {
+      g_yyLineNr++;
+      *(p-1)='\0';
+      g_code->codify(sp);
+      nextCodeLine();
+    }
+    else
+    {
+      g_code->codify(sp);
+      done=TRUE;
+    }
+  }
+}
+
+#if 0
+static QCString fileLocation()
+{
+  QCString result = g_sourceFileDef?g_sourceFileDef->absFilePath():QCString("[unknown]");
+  result+=":"+QCString().setNum(g_yyLineNr);
+  result+=":"+QCString().setNum(1);
+  return result;
+}
+
+static void addDocCrossReference(MemberDef *src,MemberDef *dst)
+{
+  static bool referencedByRelation = Config_getBool("REFERENCED_BY_RELATION");
+  static bool callerGraph =  Config_getBool("CALLER_GRAPH");
+  static bool referencesRelation = Config_getBool("REFERENCES_RELATION");
+  static bool callGraph = Config_getBool("CALL_GRAPH");
+  if (dst->isTypedef() || dst->isEnumerate()) return; // don't add types
+  //printf("addDocCrossReference src=%s,dst=%s\n",src->name().data(),dst->name().data());
+  if ((referencedByRelation || callerGraph) && (src->isFunction() || src->isSlot()))
+  {
+    dst->addSourceReferencedBy(src,fileLocation());
+  }
+  if ((referencesRelation || callGraph) && (src->isFunction() || src->isSlot()))
+  {
+    src->addSourceReferences(dst,fileLocation());
+  }
+}
+#endif
+
+
+
+static bool getLinkInScope(const QCString &c,  // scope
+			   const QCString &m,  // member
+			   const char *memberText, // exact text
+			   CodeOutputInterface &ol,
+			   const char *text
+			  )
+{
+  MemberDef    *md;
+  ClassDef     *cd;
+  FileDef      *fd;
+  NamespaceDef *nd;
+  GroupDef     *gd;
+  //printf("Trying `%s'::`%s'\n",c.data(),m.data());
+  if (getDefs(c,m,"()",md,cd,fd,nd,gd,FALSE,g_sourceFileDef) &&
+      md->isLinkable())
+  {
+    //Definition *d=0;
+    //if (cd) d=cd; else if (nd) d=nd; else if (fd) d=fd; else d=gd;
+
+    Definition *d = md->getOuterScope()==Doxygen::globalScope ?
+		    md->getBodyDef() : md->getOuterScope();
+    //printf("Found! d=%s\n",d?d->name().data():"<none>");
+    if (md->getGroupDef()) d = md->getGroupDef();
+    if (d && d->isLinkable())
+    {
+      g_theCallContext.setClass(stripClassName(md->typeString(),md->getOuterScope()));
+      //printf("g_currentDefinition=%p g_currentMemberDef=%p\n",
+      //        g_currentDefinition,g_currentMemberDef);
+
+      if (g_currentDefinition && g_currentMemberDef &&
+	  md!=g_currentMemberDef && g_collectXRefs)
+      {
+	addDocCrossReference(g_currentMemberDef,md);
+      }
+      //printf("d->getReference()=`%s' d->getOutputBase()=`%s' name=`%s' member name=`%s'\n",d->getReference().data(),d->getOutputFileBase().data(),d->name().data(),md->name().data());
+
+      writeMultiLineCodeLink(ol,md, text ? text : memberText);
+      addToSearchIndex(text ? text : memberText);
+      return TRUE;
+    }
+  }
+  return FALSE;
+}
+
+static bool getLink(const char *className,
+		    const char *memberName,
+		    CodeOutputInterface &ol,
+		    const char *text=0)
+{
+  QCString m=removeRedundantWhiteSpace(memberName);
+  QCString c=className;
+  if (!getLinkInScope(c,m,memberName,ol,text))
+  {
+    if (!g_curClassName.isEmpty())
+    {
+      if (!c.isEmpty()) c.prepend("::");
+      c.prepend(g_curClassName);
+      return getLinkInScope(c,m,memberName,ol,text);
+    }
+    return FALSE;
+  }
+  return TRUE;
+}
+
+/*
+  For a given string in the source code,
+  finds its class or global id and links to it.
+*/
+static void generateClassOrGlobalLink(CodeOutputInterface &ol,char *clName,
+                                      bool typeOnly=FALSE)
+{
+  QCString className=clName;
+
+  // Don't do anything for empty text
+  if (className.isEmpty()) return;
+
+  DBG_CTX((stderr,"generateClassOrGlobalLink(className=%s)\n",className.data()));
+
+  ClassDef *cd=0,*lcd=0;  /** Class def that we may find */
+  MemberDef *md=0;        /** Member def that we may find */
+  //bool isLocal=FALSE;
+
+  if ((lcd=g_theVarContext.findVariable(className))==0) // not a local variable
+  {
+    Definition *d = g_currentDefinition;
+    QCString scope = substitute(className,".","::");
+
+    cd = getResolvedClass(d,g_sourceFileDef,substitute(className,".","::"),&md);
+
+    DBG_CTX((stderr,"d=%s g_sourceFileDef=%s\n",
+        d?d->displayName().data():"<null>",
+        g_currentDefinition?g_currentDefinition->displayName().data():"<null>"));
+    DBG_CTX((stderr,"is found as a type %s\n",cd?cd->name().data():"<null>"));
+
+    if (cd==0 && md==0) // also see if it is variable or enum or enum value
+    {
+      NamespaceDef *nd = getResolvedNamespace(scope);
+      if (nd)
+      {
+        writeMultiLineCodeLink(ol,nd,clName);
+        addToSearchIndex(className);
+        return;
+      }
+      else if (getLink(g_classScope,clName,ol,clName))
+      {
+	return;
+      }
+    }
+  }
+  else
+  {
+    if (lcd!=SmlVariableContext::dummyContext) 
+    {
+      g_theCallContext.setClass(lcd);
+    }
+    //isLocal=TRUE;
+    DBG_CTX((stderr,"is a local variable cd=%p!\n",cd));
+  }
+
+  if (cd && cd->isLinkable()) // is it a linkable class
+  {
+    writeMultiLineCodeLink(ol,cd,clName);
+    addToSearchIndex(className);
+    if (md)
+    {
+      Definition *d = md->getOuterScope()==Doxygen::globalScope ?
+                      md->getBodyDef() : md->getOuterScope();
+      if (md->getGroupDef()) d = md->getGroupDef();
+      if (d && d->isLinkable() && md->isLinkable() && 
+          g_currentMemberDef && g_collectXRefs)
+      {
+        addDocCrossReference(g_currentMemberDef,md);
+      }
+    }
+  }
+  else // not a class, maybe a global member
+  {
+    int scopeEnd = className.findRev(".");
+    if (scopeEnd!=-1 && !typeOnly) // name with explicit scope
+    {
+      QCString scope = substitute(className.left(scopeEnd),".","::");
+      QCString locName = className.right(className.length()-scopeEnd-1);
+      ClassDef *mcd = getClass(scope);
+      DBG_CTX((stderr,"scope=%s locName=%s mcd=%p\n",scope.data(),locName.data(),mcd));
+      if (mcd)
+      {
+	MemberDef *md = mcd->getMemberByName(locName);
+	if (md)
+	{
+          g_theCallContext.setClass(stripClassName(md->typeString(),md->getOuterScope()));
+          writeMultiLineCodeLink(ol,md,clName);
+          addToSearchIndex(className);
+	  Definition *d = md->getOuterScope()==Doxygen::globalScope ?
+	                  md->getBodyDef() : md->getOuterScope();
+	  if (md->getGroupDef()) d = md->getGroupDef();
+	  if (d && d->isLinkable() && md->isLinkable() && 
+              g_currentMemberDef && g_collectXRefs)
+	  {
+	    addDocCrossReference(g_currentMemberDef,md);
+	  }
+	  return;
+	}
+      }
+      else // check namespace as well
+      {
+        NamespaceDef *mnd = getResolvedNamespace(scope);
+        if (mnd)
+        {
+  	  MemberDef *md=mnd->getMemberByName(locName);
+	  if (md)
+          {
+	    //printf("name=%s scope=%s\n",locName.data(),scope.data());
+	    g_theCallContext.setClass(stripClassName(md->typeString(),md->getOuterScope()));
+            writeMultiLineCodeLink(ol,md,clName);
+            addToSearchIndex(className);
+	    Definition *d = md->getOuterScope()==Doxygen::globalScope ?
+	                    md->getBodyDef() : md->getOuterScope();
+	    if (md->getGroupDef()) d = md->getGroupDef();
+	    if (d && d->isLinkable() && md->isLinkable() && 
+                g_currentMemberDef && g_collectXRefs)
+	    {
+	      addDocCrossReference(g_currentMemberDef,md);
+	    }
+	    return;
+          }
+        }
+      }
+    }
+    
+    // nothing found, just write out the word
+    codifyLines(clName);
+    addToSearchIndex(clName);
+  }
+}
+
+/*
+   As of June 1, this function seems to work
+   for file members, but scopes are not
+   being correctly tracked for classes
+   so it doesn't work for classes yet.
+
+*/
+static void generateFunctionLink(CodeOutputInterface &ol,char *funcName)
+{
+  //CodeClassDef *ccd=0;
+  ClassDef *ccd=0;
+  QCString locScope=g_classScope.copy();
+  QCString locFunc=removeRedundantWhiteSpace(funcName);
+  DBG_CTX((stdout,"*** locScope=%s locFunc=%s\n",locScope.data(),locFunc.data()));
+  int i=locFunc.findRev("::");
+  if (i>0)
+  {
+    locScope=locFunc.left(i);
+    locFunc=locFunc.right(locFunc.length()-i-2).stripWhiteSpace();
+  }
+  //printf("generateFunctionLink(%s) classScope=`%s'\n",locFunc.data(),locScope.data());
+  if (!locScope.isEmpty() && (ccd=g_codeClassSDict[locScope]))
+  {
+    //printf("using classScope %s\n",g_classScope.data());
+    if (ccd->baseClasses())
+    {
+      BaseClassListIterator bcli(*ccd->baseClasses());
+      for ( ; bcli.current() ; ++bcli)
+      {
+	if (getLink(bcli.current()->classDef->name(),locFunc,ol,funcName))
+	{
+	  return;
+	}
+      }
+    }
+  }
+  if (!getLink(locScope,locFunc,ol,funcName))
+  {
+    generateClassOrGlobalLink(ol,funcName);
+  }
+  return;
+}
+
+static bool findMemberLink(CodeOutputInterface &ol,Definition *sym,const char *symName)
+{
+  //printf("sym %s outerScope=%s equal=%d\n",
+  //    sym->name().data(),sym->getOuterScope()->name().data(),
+  //    sym->getOuterScope()==g_currentDefinition);
+
+  if (sym->getOuterScope() &&
+      sym->getOuterScope()->definitionType()==Definition::TypeClass &&
+      g_currentDefinition->definitionType()==Definition::TypeClass)
+  {
+    ClassDef *cd = (ClassDef*)sym->getOuterScope();
+    ClassDef *thisCd = (ClassDef *)g_currentDefinition;
+    if (sym->definitionType()==Definition::TypeMember)
+    {
+      if (g_currentMemberDef && g_collectXRefs)
+      {
+	addDocCrossReference(g_currentMemberDef,(MemberDef*)sym);
+      }
+    }
+    DBG_CTX((stderr,"cd=%s thisCd=%s\n",cd?cd->name().data():"<none>",thisCd?thisCd->name().data():"<none>"));
+
+    // TODO: find the nearest base class in case cd is a base class of
+    // thisCd 
+    if (cd==thisCd || (thisCd && thisCd->isBaseClass(cd,TRUE)))
+    {
+      writeMultiLineCodeLink(ol,sym,symName);
+      return TRUE;
+    }
+  }
+  return FALSE;
+}
+
+static void findMemberLink(CodeOutputInterface &ol,char *symName)
+{
+  //printf("Member reference: %s scope=%s member=%s\n",
+  //    yytext,
+  //    g_currentDefinition?g_currentDefinition->name().data():"<none>",
+  //    g_currentMemberDef?g_currentMemberDef->name().data():"<none>"
+  //    );
+  if (g_currentDefinition)
+  {
+    DefinitionIntf *di = Doxygen::symbolMap->find(symName);
+    if (di)
+    {
+      if (di->definitionType()==DefinitionIntf::TypeSymbolList) // multiple symbols
+      {
+	DefinitionListIterator dli(*(DefinitionList*)di);
+	Definition *sym;
+	for (dli.toFirst();(sym=dli.current());++dli)
+	{
+	  if (findMemberLink(ol,sym,symName)) return;
+	}
+      }
+      else // single symbol
+      {
+	if (findMemberLink(ol,(Definition*)di,symName)) return;
+      }
+    }
+  }
+  //printf("sym %s not found\n",&yytext[5]);
+  codify(symName);
+}
+
+static void startFontClass(const char *s)
+{
+  endFontClass();
+  g_code->startFontClass(s);
+  g_currentFontClass=s;
+}
+
+static void endFontClass()
+{
+  if (g_currentFontClass)
+  {
+    g_code->endFontClass();
+    g_currentFontClass=0;
+  }
+}
+
+#undef YY_INPUT
+#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);
+
+static int yyread(char *buf,int max_size)
+{
+  int c=0;
+  while( c < max_size && g_inputString[g_inputPosition] )
+  {
+    *buf = g_inputString[g_inputPosition++] ;
+    c++; buf++;
+  }
+  return c;
+}
+
+%}
+
+
+BB                [ \t]+
+B                 [ \t]*
+NEWLINE           \n
+
+DIGIT             [0-9]
+LETTER            [A-Za-z]
+NONEMPTY          [A-Za-z0-9_]
+EXPCHAR           [#(){}\[\],:.%/\\=`*~|&<>!;+-]
+NONEMPTYEXP       [^ \t\n:]
+PARAMNONEMPTY     [^ \t\n():]
+
+IDENTIFIER        ({LETTER}|"'")({LETTER}|{DIGIT}|"_"|"'")*
+
+BORDER            ([^A-Za-z0-9])
+
+POUNDCOMMENT      "#".*
+
+TRISINGLEQUOTE    "'''"
+TRIDOUBLEQUOTE    "\"\"\""
+LONGSTRINGCHAR    [^\\"']
+ESCAPESEQ         ("\\")(.)
+LONGSTRINGITEM    ({LONGSTRINGCHAR}|{ESCAPESEQ})
+SMALLQUOTE        ("\"\""|"\""|"'"|"''")
+LONGSTRINGBLOCK   ({LONGSTRINGITEM}+|{SMALLQUOTE})
+
+SHORTSTRING       ("'"{SHORTSTRINGITEM}*"'"|'"'{SHORTSTRINGITEM}*'"')
+SHORTSTRINGITEM   ({SHORTSTRINGCHAR}|{ESCAPESEQ})
+SHORTSTRINGCHAR   [^\\\n"]
+STRINGLITERAL     {STRINGPREFIX}?( {SHORTSTRING} | {LONGSTRING})
+STRINGPREFIX      ("r"|"u"|"ur"|"R"|"U"|"UR"|"Ur"|"uR")
+KEYWORD ("lambda"|"import"|"class"|"assert"|"as"|"from"|"global"|"def"|"True"|"False")
+FLOWKW  ("or"|"and"|"is"|"not"|"print"|"for"|"in"|"if"|"try"|"except"|"yield"|"raise"|"break"|"continue"|"pass"|"if"|"return"|"while"|"elif"|"else"|"finally")
+QUOTES            ("\""[^"]*"\"")
+SINGLEQUOTES      ("'"[^']*"'")
+
+LONGINTEGER       {INTEGER}("l"|"L")
+INTEGER           ({DECIMALINTEGER}|{OCTINTEGER}|{HEXINTEGER})
+DECIMALINTEGER    ({NONZERODIGIT}{DIGIT}*|"0")
+OCTINTEGER        "0"{OCTDIGIT}+
+HEXINTEGER        "0"("x"|"X"){HEXDIGIT}+
+NONZERODIGIT      [1-9]
+OCTDIGIT          [0-7]
+HEXDIGIT          ({DIGIT}|[a-f]|[A-F])
+FLOATNUMBER       ({POINTFLOAT}|{EXPONENTFLOAT})
+POINTFLOAT        ({INTPART}?{FRACTION}|{INTPART}".")
+EXPONENTFLOAT     ({INTPART}|{POINTFLOAT}){EXPONENT}
+INTPART             {DIGIT}+
+FRACTION             "."{DIGIT}+
+EXPONENT             ("e"|"E")("+"|"-")?{DIGIT}+
+IMAGNUMBER ({FLOATNUMBER}|{INTPART})("j"|"J")
+ATOM              ({IDENTIFIER}|{LITERAL}|{ENCLOSURE})
+ENCLOSURE             ({PARENTH_FORM}|{LIST_DISPLAY}|{DICT_DISPLAY}|{STRING_CONVERSION})
+LITERAL             ({STRINGLITERAL}|{INTEGER}|{LONGINTEGER}|{FLOATNUMBER}|{IMAGNUMBER})
+PARENTH_FORM       "("{EXPRESSION_LIST}?")"
+TEST             ({AND_TEST}("or"{AND_TEST})*|{LAMBDA_FORM})
+TESTLIST             {TEST}( ","{TEST})*","?
+LIST_DISPLAY        "["{LISTMAKER}?"]"
+LISTMAKER             {EXPRESSION}({LIST_FOR}|(","{EXPRESSION})*","?)
+LIST_ITER             ({LIST_FOR}|{LIST_IF})
+LIST_FOR             "for"{EXPRESSION_LIST}"in"{TESTLIST}{LIST_ITER}?
+LIST_IF             "if"{TEST}{LIST_ITER}?
+DICT_DISPLAY             "\{"{KEY_DATUM_LIST}?"\}"
+KEY_DATUM_LIST       {KEY_DATUM}(","{KEY_DATUM})*","?
+KEY_DATUM              {EXPRESSION}":"{EXPRESSION}
+STRING_CONVERSION        "`"{EXPRESSION_LIST}"`"
+PRIMARY             ({ATOM}|{ATTRIBUTEREF}|{SUBSCRIPTION}|{SLICING}|{CALL})
+ATTRIBUTEREF             {PRIMARY}"."{IDENTIFIER}
+SUBSCRIPTION             {PRIMARY}"["{EXPRESSION_LIST}"]"
+SLICING            ({SIMPLE_SLICING}|{EXTENDED_SLICING})
+SIMPLE_SLICING             {PRIMARY}"["{SHORT_SLICE}"]"
+EXTENDED_SLICING           {PRIMARY}"["{SLICE_LIST}"]"
+SLICE_LIST          {SLICE_ITEM}(","{SLICE_ITEM})*","?
+SLICE_ITEM           ({EXPRESSION}|{PROPER_SLICE}|{ELLIPSIS})
+PROPER_SLICE           ({SHORT_SLICE}|{LONG_SLICE})
+SHORT_SLICE              {LOWER_BOUND}?":"{UPPER_BOUND}?
+LONG_SLICE             {SHORT_SLICE}":"{STRIDE}?
+LOWER_BOUND             {EXPRESSION}
+UPPER_BOUND             {EXPRESSION}
+STRIDE             {EXPRESSION}
+ELLIPSIS             "..."
+CALL             {PRIMARY}"("({ARGUMENT_LIST}","?)?")"
+ARGUMENT_LIST       ({POSITIONAL_ARGUMENTS}(","{KEYWORD_ARGUMENTS})?(",""*"{EXPRESSION})?(",""**"{EXPRESSION})?|{KEYWORD_ARGUMENTS}(",""*"{EXPRESSION})?(",""**"{EXPRESSION})?|"*"{EXPRESSION}(",""**"{EXPRESSION})?|"**"{EXPRESSION})
+POSITIONAL_ARGUMENTS             {EXPRESSION}(","{EXPRESSION})*
+KEYWORD_ARGUMENTS              {KEYWORD_ITEM}(","{KEYWORD_ITEM})*
+KEYWORD_ITEM           {IDENTIFIER}"="{EXPRESSION}
+POWER             {PRIMARY}("**"{U_EXPR})?
+U_EXPR            ({POWER}|"-"{U_EXPR}|"+"{U_EXPR}|"\~"{U_EXPR})
+M_EXPR            ({U_EXPR}|{M_EXPR}"*"{U_EXPR}|{M_EXPR}"//"{U_EXPR}|{M_EXPR}"/"{U_EXPR}|{M_EXPR}"\%"{U_EXPR})
+A_EXPR         ({M_EXPR}|{A_EXPR}"+"{M_EXPR}|{A_EXPR}"-"{M_EXPR}
+SHIFT_EXPR            ({A_EXPR}|{SHIFT_EXPR}("<<"|">>"){A_EXPR})
+AND_EXPR            ({SHIFT_EXPR}|{AND_EXPR}"\;SPMamp;"{SHIFT_EXPR}
+XOR_EXPR            ({AND_EXPR}|{XOR_EXPR}"\textasciicircum"{AND_EXPR})
+OR_EXPR            ({XOR_EXPR}|{OR_EXPR}"|"{ XOR_EXPR})
+
+COMPARISON             {OR_EXPR}({COMP_OPERATOR}{OR_EXPR})*
+COMP_OPERATOR         ("<"|">"|"=="|">="|"<="|"<>"|"!="|"is""not"?|"not"?"in")
+EXPRESSION            ({OR_TEST}|{LAMBDA_FORM})
+OR_TEST             ({AND_TEST}|{OR_TEST}"or"{AND_TEST})
+AND_TEST          ({NOT_TEST}|{AND_TEST}"and"{NOT_TEST})
+NOT_TEST           ({COMPARISON}|"not"{NOT_TEST})
+LAMBDA_FORM       "lambda"{PARAMETER_LIST}?":"{EXPRESSION}
+EXPRESSION_LIST      {EXPRESSION}(","{EXPRESSION})*","?
+SIMPLE_STMT       ({EXPRESSION_STMT}|{ASSERT_STMT}|{ASSIGNMENT_STMT}|{AUGMENTED_ASSIGNMENT_STMT}|{PASS_STMT}|{DEL_STMT}|{PRINT_STMT}|{RETURN_STMT}|{YIELD_STMT}|{RAISE_STMT}|{BREAK_STMT}|{CONTINUE_STMT}|{IMPORT_STMT}|{GLOBAL_STMT}|{EXEC_STMT})
+EXPRESSION_STMT     {EXPRESSION_LIST}
+ASSERT_STMT             "assert"{EXPRESSION}(","{EXPRESSION})?
+ASSIGNMENT_STMT     ({TARGET_LIST}"=")+{EXPRESSION_LIST}
+TARGET_LIST             {TARGET}(","{TARGET})*","?
+TARGET           ({IDENTIFIER}|"("{TARGET_LIST}")"|"["{TARGET_LIST}"]"|{ATTRIBUTEREF}|{SUBSCRIPTION}|{SLICING})
+
+
+%option noyywrap
+%option nounput
+
+%x Body
+
+%x FunctionDec
+%x FunctionParams
+
+%x ClassDec
+%x ClassInheritance
+
+%x Suite
+%x SuiteStart
+%x SuiteMaintain
+%x SuiteContinuing
+
+%x LongString
+
+%x SingleQuoteString
+%x DoubleQuoteString
+%x TripleString
+
+%%
+
+<Body,Suite>{
+      "fun"{BB}                     {
+					startFontClass("keyword");
+					codify(yytext);
+					endFontClass();
+					BEGIN( FunctionDec );
+				    }
+
+      "class"{BB}                   {
+					startFontClass("keyword");
+					codify(yytext);
+					endFontClass();
+					BEGIN( ClassDec );
+				    }
+      "None"                        {
+					startFontClass("keywordtype");
+					codify(yytext);
+					endFontClass();
+				    }
+      "self."{IDENTIFIER}/"("       {
+					codify("self.");
+					findMemberLink(*g_code,&yytext[5]);
+				    }
+      "self."{IDENTIFIER}           {
+					codify("self.");
+					findMemberLink(*g_code,&yytext[5]);
+				    }
+}
+
+<ClassDec>{IDENTIFIER}              {
+
+					generateClassOrGlobalLink(*g_code,yytext);
+					// codify(yytext);
+					g_curClassName = yytext;
+					g_curClassBases.clear();
+					BEGIN( ClassInheritance );
+				    }
+
+<ClassInheritance>{
+   ({BB}|[(,)])                     {
+					codify(yytext);
+				    }
+
+   ({IDENTIFIER}".")*{IDENTIFIER}   {
+					// The parser
+					// is assuming
+					// that ALL identifiers
+					// in this state
+					// are base classes;
+					// it doesn't check to see
+					// that the first parenthesis
+					// has been seen.
+
+					// This is bad - it should
+					// probably be more strict
+					// about what to accept.
+
+					g_curClassBases.inSort(yytext);
+					generateClassOrGlobalLink(*g_code,yytext);
+					// codify(yytext);
+				    }
+
+    ":"                             {
+				      codify(yytext);
+
+				      // Assume this will
+				      // be a one-line suite;
+				      // found counter-example
+				      // in SuiteStart.
+
+				      // Push a class scope
+
+				      ClassDef *classDefToAdd = new ClassDef("<code>",1,1,g_curClassName,ClassDef::Class,0,0,FALSE);
+				      g_codeClassSDict.append(g_curClassName,classDefToAdd);
+				      char *s=g_curClassBases.first();
+				      while (s)
+				      {
+					ClassDef *baseDefToAdd;
+					baseDefToAdd=g_codeClassSDict[s];
+
+					// Try to find class in global
+					// scope
+					if (baseDefToAdd==0)
+					{
+					  baseDefToAdd=getResolvedClass(g_currentDefinition,g_sourceFileDef,s);
+					}
+
+					if (baseDefToAdd && baseDefToAdd!=classDefToAdd)
+					{
+					  classDefToAdd->insertBaseClass(baseDefToAdd,s,Public,Normal);
+					}
+
+					s=g_curClassBases.next();
+				      }
+
+				      // Reset class-parsing variables.
+				      g_curClassName.resize(0);
+				      g_curClassBases.clear();
+
+				      g_noSuiteFound = TRUE;
+				      BEGIN( SuiteStart );
+				    }
+}
+
+
+<FunctionDec>{
+    {IDENTIFIER}                    {
+					generateFunctionLink(*g_code,yytext);
+					BEGIN( FunctionParams );
+				    }
+}
+
+<FunctionParams>{
+    ({BB}|",")                      {
+					 // Parses delimiters
+					 codify(yytext);
+				    }
+
+    ({IDENTIFIER}|{PARAMNONEMPTY}+) {
+					 codify(yytext);
+				    }
+
+    "="                             {
+				      codify(yytext);
+
+				      // Assume this will
+				      // be a one-line suite;
+				      // found counter-example
+				      // in SuiteStart.
+				      g_noSuiteFound = TRUE;
+				      BEGIN( SuiteStart );
+				    }
+}
+
+<Body,Suite>{
+
+    {KEYWORD}                  {
+				 // Position-sensitive rules!
+				 // Must come AFTER keyword-triggered rules
+				 // Must come BEFORE identifier NONEMPTY-like rules
+				 //   to syntax highlight.
+
+				 startFontClass("keyword");
+				 codify(yytext);
+				 endFontClass();
+			       }
+
+    {FLOWKW}                   {
+				 startFontClass("keywordflow");
+				 codify(yytext);
+				 endFontClass();
+			       }
+    ({IDENTIFIER}".")*{IDENTIFIER}/"("  {
+				 generateClassOrGlobalLink(*g_code,yytext);
+			       }
+    ({IDENTIFIER}".")+{IDENTIFIER} {
+				 generateClassOrGlobalLink(*g_code,yytext,TRUE);
+			       }
+    {IDENTIFIER}               { codify(yytext); }
+
+}
+
+
+
+<SuiteStart>{
+
+    {BB}                               {
+					 codify(yytext);
+				       }
+    "pass"			       {
+					  startFontClass("keyword");
+					  codifyLines(yytext);
+					  endFontClass();
+					  BEGIN(Body);
+				       }
+    {KEYWORD}                          {
+					  startFontClass("keyword");
+					  codifyLines(yytext);
+					  endFontClass();
+
+					  g_noSuiteFound = FALSE;
+				       }
+
+    {FLOWKW}                           {
+					  startFontClass("keywordflow");
+					  codifyLines(yytext);
+					  endFontClass();
+
+					  g_noSuiteFound = FALSE;
+				       }
+    {IDENTIFIER}                       {
+					 codify(yytext);
+				       }
+
+
+    {POUNDCOMMENT}                     {
+					  // This eats EVERYTHING
+					  // except the newline
+					  startFontClass("comment");
+					  codifyLines(yytext);
+					  endFontClass();
+				       }
+
+    {NEWLINE}                          {
+					  codifyLines(yytext);
+				       }
+}
+
+<SuiteMaintain>{
+
+    {BB}/({NONEMPTY}|{EXPCHAR}) {
+				 // This implements poor
+				 // indendation-tracking;
+				 // should be improved.
+				 // (translate tabs to space, etc)
+				 codifyLines(yytext);
+			       }
+
+    "\n"|({BB}"\n")            {
+				 // If this ever succeeds,
+				 // it means that this is
+				 // a blank line, and
+				 // can be ignored.
+				 codifyLines(yytext);
+			       }
+
+    ""/({NONEMPTY}|{EXPCHAR})  {
+				 // Default rule; matches
+				 // the empty string, assuming
+				 // real text starts here.
+				 // Just go straight to Body.
+			       }
+}
+
+
+<Suite>{NEWLINE}               {
+				 codifyLines(yytext);
+				 BEGIN( SuiteMaintain );
+			       }
+<Body>{IDENTIFIER}	       {
+				 codify(yytext);
+			       }
+<Body>{NEWLINE}                {
+				 codifyLines(yytext);
+			       }
+
+<SingleQuoteString>{ // Single quoted string like 'That\'s a """nice""" string!'
+    \\{B}\n                    { // line continuation
+				 codifyLines(yytext);
+			       }
+    \\.			       { // espaced char
+				 codify(yytext);
+			       }
+    {STRINGPREFIX}?{TRIDOUBLEQUOTE} { // tripple double quotes
+				 codify(yytext);
+			       }
+    "'"			       { // end of the string
+				 codify(yytext);
+				 endFontClass();
+				 BEGIN(g_stringContext);
+			       }
+    [^"'\n\\]+		       { // normal chars
+				 codify(yytext);
+			       }
+    .			       { // normal char
+				 codify(yytext);
+			       }
+}
+
+<DoubleQuoteString>{ // Double quoted string like "That's \"a '''nice'''\" string!"
+    \\{B}\n                    { // line continuation
+				 codifyLines(yytext);
+			       }
+    \\.			       { // espaced char
+				 codify(yytext);
+			       }
+    {STRINGPREFIX}?{TRISINGLEQUOTE} { // tripple single quotes
+				 codify(yytext);
+			       }
+    "\""		       { // end of the string
+				 codify(yytext);
+				 endFontClass();
+				 BEGIN(g_stringContext);
+			       }
+    [^"'\n\\]+		       { // normal chars
+				 codify(yytext);
+			       }
+    .			       { // normal char
+				 codify(yytext);
+			       }
+}
+
+<TripleString>{
+    {TRIDOUBLEQUOTE}   |
+    {TRISINGLEQUOTE}   {
+			  codify(yytext);
+			  if (g_doubleQuote==(yytext[0]=='"'))
+			  {
+			    endFontClass();
+			    BEGIN(g_stringContext);
+			  }
+		       }
+    {LONGSTRINGBLOCK}  {
+			 codifyLines(yytext);
+		       }
+    \n		       {
+			 codifyLines(yytext);
+		       }
+    .		       {
+			 codify(yytext);
+		       }
+}
+
+  /*
+<*>({NONEMPTY}|{EXPCHAR}|{BB})           { // This should go one character at a time.
+				 codify(yytext);
+				 // printf("[smlcode] '%s' [ state %d ]  [line %d] no match\n",
+				 //       yytext, YY_START, g_yyLineNr);
+
+				 //endFontClass();
+				 BEGIN(Body);
+			       }
+   */
+
+<*>{STRINGPREFIX}?{TRISINGLEQUOTE} |
+<*>{STRINGPREFIX}?{TRIDOUBLEQUOTE} {
+				 startFontClass("stringliteral");
+				 g_stringContext=YY_START;
+				 g_doubleQuote=yytext[yyleng-1]=='"';
+				 codify(yytext);
+				 BEGIN(TripleString);
+			       }
+<*>{STRINGPREFIX}?"'"	       { // single quoted string
+				 startFontClass("stringliteral");
+				 g_stringContext=YY_START;
+				 codify(yytext);
+				 BEGIN(SingleQuoteString);
+			       }
+<*>{STRINGPREFIX}?"\""         { // double quoted string
+				 startFontClass("stringliteral");
+				 g_stringContext=YY_START;
+				 codify(yytext);
+				 BEGIN(DoubleQuoteString);
+			       }
+<*>{POUNDCOMMENT}              {
+				 if (YY_START==SingleQuoteString ||
+				     YY_START==DoubleQuoteString ||
+				     YY_START==TripleString
+				    )
+				 {
+				   REJECT;
+				 }
+				 // This eats EVERYTHING
+				 // except the newline
+				 startFontClass("comment");
+				 codifyLines(yytext);
+				 endFontClass();
+			       }
+<*>{NEWLINE}                   {
+				 codifyLines(yytext);
+				 //printf("[smlcode] %d NEWLINE [line %d] no match\n",
+				 //       YY_START, g_yyLineNr);
+
+				 //endFontClass();
+				 BEGIN(Body);
+			       }
+
+<*>[ \t]+                      {
+				 codify(yytext);
+				 BEGIN(Body);
+			       }
+<*>.                           {
+				 codify(yytext);
+				 // printf("[smlcode] '%s' [ state %d ]  [line %d] no match\n",
+				 //        yytext, YY_START, g_yyLineNr);
+
+				 //endFontClass();
+				 BEGIN(Body);
+			       }
+
+%%
+
+/*@ ----------------------------------------------------------------------------
+ */
+
+void resetSmlCodeParserState()
+{
+  g_currentDefinition = 0;
+  g_currentMemberDef = 0;
+  g_doubleStringIsDoc = FALSE;
+  g_paramParens = 0;
+  BEGIN( Body );
+}
+
+void parseSmlCode(CodeOutputInterface &od,const char * /*className*/,
+		 const QCString &s,bool exBlock, const char *exName,
+		 FileDef *fd,int startLine,int endLine,bool /*inlineFragment*/,
+		 MemberDef *,bool,Definition *searchCtx,bool collectXRefs)
+{
+
+  //printf("***parseCode()\n");
+
+  //--------------------------------------
+  if (s.isEmpty()) return;
+  TooltipManager::instance()->clearTooltips();
+  g_code = &od;
+  g_inputString   = s;
+  g_inputPosition = 0;
+  g_currentFontClass = 0;
+  g_needsTermination = FALSE;
+  g_searchCtx=searchCtx;
+  g_collectXRefs=collectXRefs;
+  if (endLine!=-1)
+    g_inputLines  = endLine+1;
+  else
+    g_inputLines  = countLines();
+
+  if (startLine!=-1)
+    g_yyLineNr    = startLine;
+  else
+    g_yyLineNr    = 1;
+
+  g_exampleBlock  = exBlock;
+  g_exampleName   = exName;
+  g_sourceFileDef = fd;
+
+  bool cleanupSourceDef = FALSE;
+  if (fd==0)
+  {
+    // create a dummy filedef for the example
+    g_sourceFileDef = new FileDef("",(exName?exName:"generated"));
+    cleanupSourceDef = TRUE;
+  }
+  if (g_sourceFileDef)
+  {
+    setCurrentDoc("l00001");
+  }
+
+  // Starts line 1 on the output
+  startCodeLine();
+
+  smlcodeYYrestart( smlcodeYYin );
+
+  smlcodeYYlex();
+
+
+  if (g_needsTermination)
+  {
+    endCodeLine();
+  }
+  if (fd)
+  {
+    TooltipManager::instance()->writeTooltips(*g_code);
+  }
+  if (cleanupSourceDef)
+  {
+    // delete the temporary file definition used for this example
+    delete g_sourceFileDef;
+    g_sourceFileDef=0;
+  }
+  return;
+}
+
+
+#if !defined(YY_FLEX_SUBMINOR_VERSION)
+extern "C" { // some bogus code to keep the compiler happy
+  void smlcodeYYdummy() { yy_flex_realloc(0,0); }
+}
+#elif YY_FLEX_SUBMINOR_VERSION<33
+#error "You seem to be using a version of flex newer than 2.5.4. These are currently incompatible with 2.5.4, and do NOT work with doxygen! Please use version 2.5.4 or expect things to be parsed wrongly! A bug report has been submitted (#732132)."
+#endif
diff --git a/src/smlscanner.h b/src/smlscanner.h
new file mode 100644
index 00000000..729af8f0
--- /dev/null
+++ b/src/smlscanner.h
@@ -0,0 +1,67 @@
+/******************************************************************************
+ *
+ * 
+ *
+ * Copyright (C) 1997-2013 by Dimitri van Heesch.
+ *
+ * Permission to use, copy, modify, and distribute this software and its
+ * documentation under the terms of the GNU General Public License is hereby 
+ * granted. No representations are made about the suitability of this software 
+ * for any purpose. It is provided "as is" without express or implied warranty.
+ * See the GNU General Public License for more details.
+ *
+ * Documents produced by Doxygen are derivative works derived from the
+ * input used in their production; they are not affected by this license.
+ *
+ */
+/*  This code is based on the work done by the MoxyPyDoxy team
+ *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
+ *  in Spring 2005 as part of CS 179E: Compiler Design Project
+ *  at the University of California, Riverside; the course was
+ *  taught by Peter H. Froehlich <phf@acm.org>.
+ */
+
+
+#ifndef SMLSCANNER_H
+#define SMLSCANNER_H
+
+#include "parserintf.h"
+
+/** \brief Sml Language parser using state-based lexical scanning.
+ *
+ * This is the Sml language parser for doxygen.
+ */
+class SmlLanguageScanner : public ParserInterface
+{
+  public:
+    virtual ~SmlLanguageScanner() {}
+    void startTranslationUnit(const char *) {}
+    void finishTranslationUnit() {}
+    void parseInput(const char * fileName,
+                    const char *fileBuf,
+                    Entry *root,
+                    bool sameTranslationUnit,
+                    QStrList &filesInSameTranslationUnit);
+    bool needsPreprocessing(const QCString &extension);
+    void parseCode(CodeOutputInterface &codeOutIntf,
+                   const char *scopeName,
+                   const QCString &input,
+                   SrcLangExt lang,
+                   bool isExampleBlock,
+                   const char *exampleName=0,
+                   FileDef *fileDef=0,
+                   int startLine=-1,
+                   int endLine=-1,
+                   bool inlineFragment=FALSE,
+                   MemberDef *memberDef=0,
+                   bool showLineNumbers=TRUE,
+                   Definition *searchCtx=0,
+                   bool collectXrefs=TRUE
+                  );
+    void resetCodeParserState();
+    void parsePrototype(const char *text);
+};
+
+void smlscanFreeScanner();
+
+#endif
diff --git a/src/smlscanner.l b/src/smlscanner.l
new file mode 100644
index 00000000..87f1ec41
--- /dev/null
+++ b/src/smlscanner.l
@@ -0,0 +1,1513 @@
+%{
+
+/* includes */
+#include <stdio.h>
+#include <stdlib.h>
+#include <assert.h>
+#include <ctype.h>
+
+#include <qarray.h>
+#include <qregexp.h>
+#include <unistd.h>
+#include <qfile.h>
+#include <qfileinfo.h>
+
+#include "smlscanner.h"
+#include "entry.h"
+#include "message.h"
+#include "config.h"
+#include "doxygen.h"
+#include "util.h"
+#include "defargs.h"
+#include "language.h"
+#include "commentscan.h"
+#include "smlcode.h"
+#include "arguments.h"
+
+// Toggle for some debugging info
+//#define DBG_CTX(x) fprintf x
+#define DBG_CTX(x) do { } while(0)
+
+#define YY_NEVER_INTERACTIVE 1
+#define YY_NO_INPUT 1
+
+static ParserInterface *g_thisParser;
+static const char *     inputString;
+static int		inputPosition;
+static QFile            inputFile;
+
+static Protection	protection;
+
+static Entry*		current_root = 0 ;
+static Entry*		current      = 0 ;
+static Entry*		previous     = 0 ;
+static Entry*		bodyEntry    = 0 ;
+static int		yyLineNr     = 1 ;
+static QCString		yyFileName;
+static MethodTypes      mtype;
+static bool             gstat;
+static Specifier        virt;
+
+static int              docBlockContext;
+static QCString         docBlock;
+static QCString         docBlockName;
+static bool             docBlockInBody;
+static bool             docBlockJavaStyle;
+static bool             docBrief;
+static bool             docBlockSpecial;
+
+/* used to handle tuples */
+static char             g_atomStart;
+static char             g_atomEnd;
+static int              g_atomCount;
+
+static bool             g_doubleQuote;
+static bool             g_inComment;
+static bool             g_specialBlock;
+static int              g_stringContext;
+static QGString *       g_copyString;
+
+static QDict<QCString>  g_packageNameCache(257);
+static QCString         g_packageScope;
+
+static QCString         g_moduleScope;
+static QCString         g_packageName;
+
+static bool             g_inSignature;
+static QCString         g_valDoc;
+static QCString         g_andKeyword;
+static QCString         g_documentingStructure;
+static QCString         g_defVal;
+static int              g_braceCount;
+
+static bool             g_lexInit = FALSE;
+static bool             g_packageCommentAllowed;
+
+/* used for detecting what the 'and' keyword is declaring. */
+typedef QCString stackElement;
+
+/* a stack for the 'and' keyword. */
+typedef struct {stackElement contents[1000]; int maxSize; int top; } stackType ;
+
+/* pushes a declaritive keyword onto the stack. */
+stackType stack_push(stackType stack, stackElement element)
+{
+  stack.contents[++stack.top] = element;
+  return stack;
+}
+
+/* tests whether a stack is empty. */
+int stack_isEmpty(stackType stack)
+{
+  return stack.top < 0;
+}
+
+/* pops an element from the stack. */
+stackType stack_pop(stackType stack)
+{
+  if (stack_isEmpty(stack)) {
+    fprintf(stderr, "Error: attempted to pop element from empty stack!.\n");
+    exit(1);
+  }
+  stack.top--;
+  return stack;
+}
+
+/* gets the top element of the stack. */
+stackElement stack_top(stackType stack) {
+  if (stack_isEmpty(stack)) {
+    fprintf(stderr, "Error: attempted to get top element of an empty stack!.\n");
+    exit(1);
+  }
+  return stack.contents[stack.top];
+}
+
+/* declare a new stack, myStack. Used for handling the 'and' keyword */
+static stackType myStack;
+
+static void initParser()
+{
+  protection = Public;
+  mtype = Method;
+  gstat = FALSE;
+  virt = Normal;
+  previous = 0;
+  g_packageCommentAllowed = TRUE;
+  g_packageNameCache.setAutoDelete(TRUE);
+}
+
+static void initEntry()
+{
+  current->protection = protection ;
+  current->mtype      = mtype;
+  current->virt       = virt;
+  current->stat       = gstat;
+  current->lang       = SrcLangExt_Sml;
+  current->setParent(current_root);
+  initGroupInfo(current);
+  gstat = FALSE;
+}
+
+static void newEntry()
+{
+  previous = current;
+  current_root->addSubEntry(current);
+  current = new Entry ;
+  initEntry();
+}
+
+static void newVariable()
+{
+  if (!current->name.isEmpty() && current->name.at(0)=='_') // mark as private
+  {
+    current->protection=Private;
+  }
+  if (current_root->section&Entry::COMPOUND_MASK) // mark as class variable
+  {
+    current->stat = TRUE;
+  }
+  newEntry();
+}
+
+static QCString findPackageScopeFromPath(const QCString &path)
+{
+  QCString *pScope = g_packageNameCache.find(path);
+  if (pScope)
+  {
+    return *pScope;
+  }
+  QFileInfo pf(path+"/__init__.py"); // found package initialization file
+  if (pf.exists())
+  {
+    int i=path.findRev('/');
+    if (i!=-1)
+    {
+      QCString scope = findPackageScopeFromPath(path.left(i));
+      if (!scope.isEmpty())
+      {
+        scope+="::";
+      }
+      scope+=path.mid(i+1);
+      g_packageNameCache.insert(path,new QCString(scope));
+      return scope;
+    }
+  }
+  return "";
+}
+
+static QCString findPackageScope(const char *fileName)
+{
+  if (fileName==0) return "";
+  QFileInfo fi(fileName);
+  return findPackageScopeFromPath(fi.dirPath(TRUE).data());
+}
+
+//-----------------------------------------------------------------------------
+
+static void lineCount()
+{
+  DBG_CTX((stderr,"yyLineNr=%d\n",yyLineNr));
+  for (const char *p = yytext; *p; ++p)
+  {
+    yyLineNr += (*p == '\n') ;
+  }
+}
+
+static void incLineNr()
+{
+  DBG_CTX((stderr,"yyLineNr=%d\n",yyLineNr));
+  yyLineNr++;
+}
+
+#if 0
+// Appends the current-name to current-type;
+// Destroys current-name.
+// Destroys current->args and current->argList
+static void addType( Entry* current )
+{
+    uint tl=current->type.length();
+    if ( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.')
+    {
+      current->type += ' ' ;
+    }
+    current->type += current->name ;
+    current->name.resize(0) ;
+    tl=current->type.length();
+    if ( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.')
+    {
+      current->type += ' ' ;
+    }
+    current->type += current->args ;
+    current->args.resize(0) ;
+    current->argList->clear();
+}
+
+static QCString stripQuotes(const char *s)
+{
+  QCString name;
+  if (s==0 || *s==0) return name;
+  name=s;
+  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
+  {
+    name=name.mid(1,name.length()-2);
+  }
+  return name;
+}
+#endif
+//-----------------------------------------------------------------
+
+//-----------------------------------------------------------------
+static void startCommentBlock(bool brief)
+{
+  if (brief)
+  {
+    current->briefFile = yyFileName;
+    current->briefLine = yyLineNr;
+  }
+  else
+  {
+    current->docFile = yyFileName;
+    current->docLine = yyLineNr;
+  }
+}
+
+static void handleCommentBlock(const QCString &doc,bool brief)
+{
+  //printf("handleCommentBlock(doc=[%s] brief=%d docBlockInBody=%d docBlockJavaStyle=%d\n",
+  //    doc.data(),brief,docBlockInBody,docBlockJavaStyle);
+
+  // TODO: Fix me
+  docBlockInBody=FALSE;
+
+  if (docBlockInBody && previous && !previous->doc.isEmpty())
+  {
+    previous->doc=previous->doc.stripWhiteSpace()+"\n\n";
+  }
+
+  int position = 0;
+  bool needsEntry;
+  int lineNr = brief ? current->briefLine : current->docLine;
+  while (parseCommentBlock(
+        g_thisParser,
+        (docBlockInBody && previous) ? previous : current,
+        doc,     // text
+        yyFileName, // file
+        lineNr,
+        docBlockInBody ? FALSE : brief,
+    docBlockJavaStyle, // javadoc style // or FALSE,
+        docBlockInBody,
+        protection,
+        position,
+        needsEntry)
+     ) // need to start a new entry
+  {
+    if (needsEntry)
+    {
+      newEntry();
+    }
+  }
+  if (needsEntry)
+  {
+    newEntry();
+  }
+
+}
+
+static void endOfDef(int correction=0)
+{
+  if (bodyEntry)
+  {
+    bodyEntry->endBodyLine  = yyLineNr-correction;
+    bodyEntry = 0;
+  }
+  newEntry();
+}
+
+static inline void addToString(const char *s)
+{
+  if (g_copyString) (*g_copyString)+=s;
+}
+
+static void initTriDoubleQuoteBlock()
+{
+  docBlockContext   = YY_START;
+  docBlockInBody    = FALSE;
+  docBlockJavaStyle = TRUE;
+  docBlockSpecial   = yytext[3]=='!';
+  docBlock.resize(0);
+  g_doubleQuote = TRUE;
+  startCommentBlock(FALSE);
+}
+
+static void initTriSingleQuoteBlock()
+{
+  docBlockContext   = YY_START;
+  docBlockInBody    = FALSE;
+  docBlockJavaStyle = TRUE;
+  docBlockSpecial   = yytext[3]=='!';
+  docBlock.resize(0);
+  g_doubleQuote = FALSE;
+  startCommentBlock(FALSE);
+}
+
+static void initSpecialBlock()
+{
+  docBlockContext   = YY_START;
+  docBlockInBody    = FALSE;
+  docBlockJavaStyle = TRUE;
+  docBrief = TRUE;
+  docBlock.resize(0);
+  startCommentBlock(TRUE);
+}
+
+static void searchFoundDef()
+{
+  current->fileName  = yyFileName;
+  current->startLine = yyLineNr;
+  current->bodyLine  = yyLineNr;
+  current->section = Entry::FUNCTION_SEC;
+  current->protection = protection = Public;
+  current->lang = SrcLangExt_Sml;
+  current->virt = Normal;
+  current->stat = gstat;
+  current->mtype = mtype = Method;
+  current->type.resize(0);
+  current->name.resize(0);
+  current->args.resize(0);
+  current->argList->clear();
+  g_packageCommentAllowed = FALSE;
+  gstat=FALSE;
+}
+
+static void searchFoundClass()
+{
+  current->section = Entry::CLASS_SEC;
+  current->argList->clear();
+  current->type += "structure" ;
+  current->fileName  = yyFileName;
+  current->startLine  = yyLineNr;
+  current->bodyLine  = yyLineNr;
+  g_packageCommentAllowed = FALSE;
+}
+
+#undef	YY_INPUT
+#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);
+
+static int yyread(char *buf,int max_size)
+{
+  int c=0;
+  while ( c < max_size && inputString[inputPosition] )
+  {
+    *buf = inputString[inputPosition++] ;
+    //printf("%d (%c)\n",*buf,*buf);
+    c++; buf++;
+  }
+  return c;
+}
+
+%}
+
+       /* start command character */
+
+
+
+BB                [ \t]+
+B                 [ \t]*
+NEWLINE           \n
+BN                [ \t\n]
+
+DIGIT             [0-9]
+
+HEXNUMBER         "0"[xX][0-9a-fA-F]+[lL]?
+OCTNUMBER         "0"[0-7]+[lL]?
+NUMBER            {DIGIT}+[lLjJ]?
+INTNUMBER         {HEXNUMBER}|{OCTNUMBER}|{NUMBER}
+FLOATNUMBER       {DIGIT}+"."{DIGIT}+([eE][+\-]?{DIGIT}+)?[jJ]?
+LETTER            [A-Za-z]
+NONEMPTY          [A-Za-z0-9_]
+EXPCHAR           [#(){}\[\],:.%/\\=`*~|&<>!;+-]
+NONEMPTYEXP       [^ \t\n:]
+PARAMNONEMPTY     [^ \t\n():]
+
+IDENTIFIER        ({LETTER}|"'")({LETTER}|{DIGIT}|"_"|"'")*
+
+SCOPE             {IDENTIFIER}("."{IDENTIFIER})*
+BORDER            ([^A-Za-z0-9])
+
+TRISINGLEQUOTE    "'''"(!)?
+TRIDOUBLEQUOTE    "\"\"\""(!)?
+LONGSTRINGCHAR    [^\\"']
+ESCAPESEQ         ("\\")(.)
+LONGSTRINGITEM    ({LONGSTRINGCHAR}|{ESCAPESEQ})
+SMALLQUOTE        ("\"\""|"\""|"'"|"''")
+LONGSTRINGBLOCK   ({LONGSTRINGITEM}+|{SMALLQUOTE})
+
+SHORTSTRING       ("'"{SHORTSTRINGITEM}*"'"|'"'{SHORTSTRINGITEM}*'"')
+SHORTSTRINGITEM   ({SHORTSTRINGCHAR}|{ESCAPESEQ})
+SHORTSTRINGCHAR   [^\\\n"]
+STRINGLITERAL     {STRINGPREFIX}?( {SHORTSTRING} | {LONGSTRING})
+STRINGPREFIX      ("r"|"u"|"ur"|"R"|"U"|"UR"|"Ur"|"uR")
+DECKW             ("(** "|"val"|"type"|"datatype"|"abstype"|"exception"|"local"|"open"|"infix"|"infixr"|"nofix"|"eqtype"|"include"|"end")
+
+STARTDOCSYMS      "(** "
+
+%option noyywrap
+
+  /* Main start state */
+
+%x Search
+%x SearchMemVars
+
+  /* Mid-comment states */
+
+  /* %x FuncDoubleComment */
+  /* %x ClassDoubleComment */
+%x TryClassDocString
+%x TripleComment
+%x StandardComment
+%x LinkToStructure
+%x SpecialComment
+%x Test
+
+
+  /* Function states */
+
+%x FunctionDec
+%x FunctionParams
+%x SmlPattern
+%x SmlVal
+%x SmlType
+%x SmlEqtype
+%x SmlAbstype
+%x SmlDatatype
+%x SmlException
+%x SmlInclude
+%x SmlQuoteString
+%x FunctionParamDefVal
+%x StructureWrapper
+
+  /* Class states */
+
+%x ClassDec
+%x ClassInheritance
+%x ClassBody
+
+/* Variable states */
+%x VariableAtom
+
+
+/* String states */
+
+%x SingleQuoteString
+%x DoubleQuoteString
+%x TripleString
+
+%%
+
+  /* ------------ Function recognition rules -------------- */
+
+<Search>{
+
+     "fun"{BB} {
+                 g_andKeyword = "fun";
+                 searchFoundDef();
+                 BEGIN( FunctionDec );
+               }
+     "structure"{BB}{IDENTIFIER}{B}"="{B}"struct" {yyless(0); BEGIN( StructureWrapper); }
+     "structure"{BB}{IDENTIFIER}{B}"="{B}{IDENTIFIER}   	{}
+     "structure"{BB}{IDENTIFIER}{B}":"{B}{IDENTIFIER}{B}^"="	{}
+     "structure"{BB}{IDENTIFIER}{B}":"{B}{IDENTIFIER}{B}\n	{}
+     "structure"{BB}	{
+                          g_andKeyword = "structure";
+                          g_inSignature = false;
+                          DBG_CTX((stderr,"Found class at %d\n",yyLineNr));
+                          searchFoundClass();
+                          BEGIN( ClassDec ) ;
+                        }
+     "functor"{BB}      {
+                          g_inSignature = false;
+                          searchFoundClass();
+                          BEGIN( ClassDec ) ;
+                       }
+     "signature"{BB}   {
+                          g_andKeyword = "signature";
+                          g_inSignature = true;
+                          DBG_CTX((stderr,"Found class at %d\n",yyLineNr));
+                          searchFoundClass();
+                          BEGIN( ClassDec ) ;
+                       }
+    "let"             { if (!g_inComment) {myStack = stack_push(myStack,g_andKeyword);} }
+    "local"           { if (!g_inComment) {myStack = stack_push(myStack,g_andKeyword);} }
+    "abstype"         { if (!g_inComment) {myStack = stack_push(myStack,g_andKeyword);} }
+    "end"             {
+                        if (!g_inComment) {
+                          // ending a structure, signature, or functor
+                          if (stack_isEmpty(myStack)) {
+			    endOfDef();
+			  }
+			  else {
+                            g_andKeyword = stack_top(myStack);
+                            myStack = stack_pop(myStack);
+			  }
+
+			}
+                      }
+
+     "and"{BB}    	{   // continuation of some definition, unput a space and then the keyword
+                            unput(' ');
+                            int i;
+                            for ( i = g_andKeyword.length() - 1; i >= 0; --i )
+                                unput( g_andKeyword[i] );
+                        }
+     "val"{BB}"_"{B}"="      {}
+     "val"{BB}      { g_andKeyword = "val"; BEGIN( SmlVal ); }
+     "exception"{B} { g_andKeyword = "exception"; BEGIN( SmlException ); }
+     "include"{B}   { BEGIN( SmlInclude );   }
+     "type"{BB}     { g_andKeyword = "type"; BEGIN( SmlType );      }
+     "eqtype"{B}    { BEGIN( SmlEqtype );    }
+     "datatype"{B}  {
+                      g_andKeyword = "datatype";
+                      g_defVal.resize(0);
+                      BEGIN( SmlDatatype );
+                    }
+     "abstype"{B}   { BEGIN( SmlAbstype ); }
+
+
+     "'"              { // start of a single quoted string
+                        g_stringContext=YY_START;
+                        g_copyString=0;
+                        g_packageCommentAllowed = FALSE;
+                        BEGIN( SingleQuoteString );
+                      }
+     "\""             { // start of a double quoted string
+                        if (g_inComment == 0) {
+                          g_stringContext=YY_START;
+                          g_copyString=0;
+                          g_packageCommentAllowed = FALSE;
+                          BEGIN( DoubleQuoteString );
+                        }
+                      }
+    "@staticmethod"  {
+                        gstat=TRUE;
+                      }
+    {IDENTIFIER}      { // some other identifier
+                        g_packageCommentAllowed = FALSE;
+                      }
+    ^{BB}             {}
+
+    {NEWLINE}+        { lineCount(); }
+
+    {TRIDOUBLEQUOTE}  { // start of a comment block
+                        initTriDoubleQuoteBlock();
+                        BEGIN(TripleComment);
+                      }
+
+    {TRISINGLEQUOTE}  { // start of a comment block
+                        initTriSingleQuoteBlock();
+                        BEGIN(TripleComment);
+                      }
+    {STARTDOCSYMS}/[^*]    {  // start of a special comment
+                        g_inComment = TRUE;
+                        g_packageCommentAllowed = FALSE;
+                        initSpecialBlock();
+                        BEGIN(SpecialComment);
+                      }
+    "(*"              { g_inComment = 1; BEGIN(StandardComment); }
+    [^\n]             { // any other character...
+                        // This is the major default
+                        // that should catch everything
+                        // else in Body.
+                      }
+}
+
+<StructureWrapper>{
+     "structure"{BB}	{ // start of structure declaration
+                          g_andKeyword = "structure";
+                          g_inSignature = false;
+                          DBG_CTX((stderr,"Found class at %d\n",yyLineNr));
+                          searchFoundClass();
+                          BEGIN( ClassDec ) ;
+                        }
+}
+
+<SmlVal>{
+
+"("          {
+                if (current->mtype!=Property) {
+		  current->type = "tuple";
+		}
+                g_atomStart='(';
+		g_atomEnd=')';
+		g_atomCount=1;
+		BEGIN( VariableAtom );
+             }
+
+{IDENTIFIER} {
+               if (g_inSignature) {
+                 g_valDoc = "View documentation in ";
+                 g_valDoc += g_documentingStructure;
+                 g_valDoc += ".";
+                 g_valDoc += yytext;
+                 g_valDoc += ".";
+                 handleCommentBlock(g_valDoc, true);
+               }
+
+               current->section   = Entry::VARIABLE_SEC;
+               current->name      = QCString(yytext).stripWhiteSpace();
+	       current->type      = "val";
+               current->fileName  = yyFileName;
+               current->startLine = yyLineNr;
+               current->bodyLine  = yyLineNr;
+               g_packageCommentAllowed = FALSE;
+               newVariable();
+               BEGIN(Search);
+             }
+
+}
+
+<VariableAtom>{
+    [\(\[\{]	      {
+                        if (g_atomStart==*yytext)
+			  g_atomCount++;
+                      }
+    [\)\]\}]	      {
+                        if (g_atomEnd==*yytext)
+			  g_atomCount--;
+			if (g_atomCount==0)
+			{
+
+                        current->section   = Entry::VARIABLE_SEC;
+                        current->name      = current->initializer;
+	                current->type      = "val";
+                        current->fileName  = yyFileName;
+                        current->startLine = yyLineNr;
+                        current->bodyLine  = yyLineNr;
+                        g_packageCommentAllowed = FALSE;
+
+			  newVariable();
+                          BEGIN(Search);
+			}
+                      }
+   ,                  {
+                        current->section   = Entry::VARIABLE_SEC;
+                        current->name      = current->initializer;
+                        current->type      = "val";
+                        current->fileName  = yyFileName;
+                        current->startLine = yyLineNr;
+                        current->bodyLine  = yyLineNr;
+                        g_packageCommentAllowed = FALSE;
+			newVariable();
+		      }
+   .		      { current->initializer+=*yytext; }
+   \n		      {
+      		        current->initializer+=*yytext;
+     			incLineNr();
+     		      }
+
+}
+
+<SmlType>{
+{IDENTIFIER}/{B} {
+               if (g_inSignature) {
+                 g_valDoc = "View documentation in ";
+                 g_valDoc += g_documentingStructure;
+                 g_valDoc += ".";
+                 g_valDoc += yytext;
+                 g_valDoc += ".";
+                 handleCommentBlock(g_valDoc, true);
+               }
+                          current->section   = Entry::VARIABLE_SEC;
+                          current->name      = QCString(yytext).stripWhiteSpace();
+			  current->type      = "type";
+                          current->protection = Protected;
+                          current->fileName  = yyFileName;
+                          current->startLine = yyLineNr;
+                          current->bodyLine  = yyLineNr;
+                          g_packageCommentAllowed = FALSE;
+                          newVariable();
+                          BEGIN(Search);
+                        }
+}
+
+<SmlDatatype>{
+"'"{IDENTIFIER}{B}{IDENTIFIER} {
+               current->section   = Entry::VARIABLE_SEC;
+               current->name      = QCString(yytext).stripWhiteSpace();
+	       current->type      = "datatype";
+               current->protection = Protected;
+               current->fileName  = yyFileName;
+               current->startLine = yyLineNr;
+               current->bodyLine  = yyLineNr;
+               g_packageCommentAllowed = FALSE;
+               newVariable();
+               yyless(0);
+               BEGIN(Search);
+             }
+"(".*")"{B}{IDENTIFIER} {
+               current->section   = Entry::VARIABLE_SEC;
+               current->name      = QCString(yytext).stripWhiteSpace();
+	       current->type      = "datatype";
+               current->protection = Protected;
+               current->fileName  = yyFileName;
+               current->startLine = yyLineNr;
+               current->bodyLine  = yyLineNr;
+               g_packageCommentAllowed = FALSE;
+               newVariable();
+               yyless(0);
+               BEGIN(Search);
+             }
+{IDENTIFIER} {
+               current->section   = Entry::VARIABLE_SEC;
+               current->name      = QCString(yytext).stripWhiteSpace();
+	       current->type      = "datatype";
+               current->protection = Protected;
+               current->fileName  = yyFileName;
+               current->startLine = yyLineNr;
+               current->bodyLine  = yyLineNr;
+               g_packageCommentAllowed = FALSE;
+               newVariable();
+               yyless(0);
+               BEGIN(Search);
+             }
+}
+
+<SmlEqtype>{
+{IDENTIFIER}/{B} {
+                          current->section   = Entry::VARIABLE_SEC;
+                          current->name      = QCString(yytext).stripWhiteSpace();
+			  current->type      = "eqtype";
+                          current->protection = Protected;
+                          current->fileName  = yyFileName;
+                          current->startLine = yyLineNr;
+                          current->bodyLine  = yyLineNr;
+                          g_packageCommentAllowed = FALSE;
+                          newVariable();
+                          BEGIN(Search);
+                        }
+}
+
+<SmlAbstype>{
+{IDENTIFIER}/{B} {
+                          current->section   = Entry::VARIABLE_SEC;
+                          current->name      = QCString(yytext).stripWhiteSpace();
+			  current->type      = "abstype";
+                          current->protection = Protected;
+                          current->fileName  = yyFileName;
+                          current->startLine = yyLineNr;
+                          current->bodyLine  = yyLineNr;
+                          g_packageCommentAllowed = FALSE;
+                          newVariable();
+                          BEGIN(Search);
+                        }
+}
+
+<SmlException>{
+{IDENTIFIER}/{B} {
+               if (g_inSignature) {
+                 g_valDoc = "View documentation in ";
+                 g_valDoc += g_documentingStructure;
+                 g_valDoc += ".";
+                 g_valDoc += yytext;
+                 g_valDoc += ".";
+                 handleCommentBlock(g_valDoc, true);
+               }
+
+                   current->section   = Entry::VARIABLE_SEC;
+                   current->name      = QCString(yytext).stripWhiteSpace();
+		   current->type      = "exn";
+                   current->fileName  = yyFileName;
+                   current->startLine = yyLineNr;
+                   current->bodyLine  = yyLineNr;
+                   g_packageCommentAllowed = FALSE;
+                   newVariable();
+                   BEGIN(Search);
+                 }
+}
+
+<SmlInclude>{
+{IDENTIFIER}/{B} {
+                   current->section   = Entry::VARIABLE_SEC;
+                   current->name      = QCString(yytext).stripWhiteSpace();
+		   current->type      = "include";
+                   current->fileName  = yyFileName;
+                   current->startLine = yyLineNr;
+                   current->bodyLine  = yyLineNr;
+                   g_packageCommentAllowed = FALSE;
+                   newVariable();
+                   BEGIN(Search);
+                 }
+}
+
+<SearchMemVars>{
+    "self."{IDENTIFIER}/{B}"=" {
+                        DBG_CTX((stderr,"Found member variable %s in %s at %d\n",&yytext[5],current_root->name.data(),yyLineNr));
+                        current->name=&yytext[5];
+                        current->section=Entry::VARIABLE_SEC;
+                        current->fileName  = yyFileName;
+                        current->startLine = yyLineNr;
+                        current->bodyLine  = yyLineNr;
+                        current->type.resize(0);
+                        if (current->name.at(0)=='_') // mark as private
+                        {
+                          current->protection=Private;
+                        }
+                        else
+                        {
+                          current->protection=Public;
+                        }
+                        newEntry();
+                      }
+    {TRIDOUBLEQUOTE}  { // start of a comment block
+                        initTriDoubleQuoteBlock();
+                        BEGIN(TripleComment);
+                      }
+
+    {TRISINGLEQUOTE}  { // start of a comment block
+                        initTriSingleQuoteBlock();
+                        BEGIN(TripleComment);
+                      }
+
+    {STARTDOCSYMS}/[^*]    {  // start of a special comment
+                        initSpecialBlock();
+                        BEGIN(SpecialComment);
+                      }
+    "'"               { // start of a single quoted string
+                        g_stringContext=YY_START;
+                        g_copyString=0;
+                        BEGIN( SingleQuoteString );
+                      }
+    "\""              { // start of a double quoted string
+                        g_stringContext=YY_START;
+                        g_copyString=0;
+                        BEGIN( DoubleQuoteString );
+                      }
+    \n                { incLineNr(); }
+    {IDENTIFIER}      // identifiers
+    [^'"\.#a-z_A-Z\n]+  // other uninteresting stuff
+    .                 // anything else
+}
+
+<FunctionDec>{
+
+    {IDENTIFIER}            {
+                              //found function name
+                              if (current->type.isEmpty())
+                              {
+                                  current->type = "fun";
+                              }
+                              current->name = yytext;
+                              current->name = current->name.stripWhiteSpace();
+                              BEGIN( FunctionParams );
+                            }
+}
+
+<FunctionParams>{
+    {IDENTIFIER}        { // Name of parameter
+                          lineCount();
+                          Argument *a = new Argument;
+                          current->argList->append(a);
+                          current->argList->getLast()->name = QCString(yytext).stripWhiteSpace();
+                          current->argList->getLast()->type = "";
+                        }
+   "_"                  { // Name of parameter
+                          lineCount();
+                          Argument *a = new Argument;
+                          current->argList->append(a);
+                          current->argList->getLast()->name = QCString(yytext).stripWhiteSpace();
+                          current->argList->getLast()->type = "";
+                        }
+    "("                 { // Name of parameter
+                          unput('(');
+                          g_defVal.resize(0);
+                          g_braceCount=0;
+                          BEGIN( SmlPattern );
+                        }
+    "["                 { // Name of parameter
+                          unput('[');
+                          g_defVal.resize(0);
+                          g_braceCount=0;
+                          BEGIN( SmlPattern );
+                        }
+    "{"                 { // Name of parameter
+                          unput('(');
+                          g_defVal.resize(0);
+                          g_braceCount=0;
+                          BEGIN( SmlPattern );
+                        }
+    "="                 {
+                          g_specialBlock = TRUE; // expecting a docstring
+                          bodyEntry = current;
+                          current->bodyLine  = yyLineNr;
+			  endOfDef();
+                          BEGIN( Search );
+                        }
+}
+
+<SmlPattern>{
+     [\(\[\{]           {
+                          g_braceCount++;
+                          g_defVal+=*yytext;
+                        }
+     [\)\]\}]           {
+                          g_braceCount--;
+                          if (g_braceCount==0) {
+                            g_defVal+=*yytext;
+                            lineCount();
+                            Argument *a = new Argument;
+                            current->argList->append(a);
+                            current->argList->getLast()->name = QCString(g_defVal).stripWhiteSpace();
+                            current->argList->getLast()->type = "";
+                            BEGIN( FunctionParams );
+                          }
+                          else { g_defVal+=*yytext; }
+                        }
+    "\""                {
+                          g_defVal+=*yytext;
+                          BEGIN( SmlQuoteString );
+                        }
+    .                   { g_defVal+=*yytext; }
+
+}
+
+
+<ClassBody>{
+    ^{BB}/\n          { // skip empty line
+                        current->program+=yytext;
+                      }
+    <<EOF>>           {
+                        endOfDef();
+                        yyterminate();
+                      }
+    [^ \t\n#'"]+      { // non-special stuff
+                        current->program+=yytext;
+                      }
+    {NEWLINE}         {
+                        current->program+=*yytext;
+                        incLineNr();
+                      }
+    .                 { // any character
+                        current->program+=*yytext;
+                      }
+}
+
+<ClassDec>{
+    {IDENTIFIER}{B}"(".*")" {
+                   if (current->type.isEmpty())
+                   {
+                     current->type = "structure";
+                   }
+
+                   current->section = Entry::CLASS_SEC;
+                   current->name = yytext;
+
+                   // prepend scope in case of nested classes
+                   if (current_root->section&Entry::SCOPE_MASK)
+                     current->name.prepend(current_root->name+"::");
+
+                   current->name = current->name.stripWhiteSpace();
+                   current->fileName = yyFileName;
+                   docBlockContext   = YY_START;
+                   docBlockInBody    = FALSE;
+                   docBlockJavaStyle = FALSE;
+                   docBlock.resize(0);
+
+                   BEGIN(ClassInheritance);
+                }
+
+    {IDENTIFIER} {
+                   if (current->type.isEmpty())
+                   {
+                     current->type = "structure";
+                   }
+
+                   current->section = Entry::CLASS_SEC;
+                   current->name = yytext;
+
+                   // prepend scope in case of nested classes
+                   if (current_root->section&Entry::SCOPE_MASK)
+                     current->name.prepend(current_root->name+"::");
+
+                   current->name = current->name.stripWhiteSpace();
+                   current->fileName = yyFileName;
+                   docBlockContext   = YY_START;
+                   docBlockInBody    = TRUE;
+                   docBlockJavaStyle = FALSE;
+                   docBlock.resize(0);
+
+                   BEGIN(ClassInheritance);
+                }
+}
+
+<ClassInheritance>{
+   ({BB}|[\(,\)])      {}
+
+    "="                { // begin of the class definition
+                         g_specialBlock = TRUE; // expecting a docstring
+                         current->bodyLine  = yyLineNr;
+                         current->program.resize(0);
+                         BEGIN(ClassBody);
+                       }
+
+    (":>")*{SCOPE}            {
+                         current->extends->append(
+                                              new BaseInfo(substitute(yytext,".","::"),Public,Normal)
+                                            );
+                         //Has base class-do stuff
+                       }
+}
+
+<TripleComment>{
+    {TRIDOUBLEQUOTE}   |
+    {TRISINGLEQUOTE}   {
+                          // printf("Expected module block %d special=%d\n",g_expectModuleDocs,g_specialBlock);
+                          if (g_doubleQuote==(yytext[0]=='"'))
+                          {
+                            if (g_specialBlock) // expecting a docstring
+                            {
+                              QCString actualDoc=docBlock;
+                              if (!docBlockSpecial) // legacy unformatted docstring
+                              {
+                                actualDoc.prepend("\\verbatim ");
+                                actualDoc.append("\\endverbatim ");
+                              }
+                              //printf("-------> current=%p bodyEntry=%p\n",current,bodyEntry);
+                              handleCommentBlock(actualDoc, FALSE);
+                            }
+                            else if (g_packageCommentAllowed) // expecting module docs
+                            {
+                              QCString actualDoc=docBlock;
+                              if (!docBlockSpecial) // legacy unformatted docstring
+                              {
+                                actualDoc.prepend("\\verbatim ");
+                                actualDoc.append("\\endverbatim ");
+                              }
+                              actualDoc.prepend("\\namespace "+g_moduleScope+"\\_linebr ");
+                              handleCommentBlock(actualDoc, FALSE);
+                            }
+                            if ((docBlockContext==ClassBody /*&& !g_hideClassDocs*/))
+                            {
+                              current->program+=docBlock;
+                              current->program+=yytext;
+                            }
+                            //if (g_hideClassDocs)
+                            //{
+                            //  current->startLine = yyLineNr;
+                            //}
+                            //g_hideClassDocs=FALSE;
+                            BEGIN(docBlockContext);
+                          }
+                          else
+                          {
+                            docBlock += yytext;
+                          }
+                          g_packageCommentAllowed = FALSE;
+                        }
+
+
+    ^{BB}		{ // leading whitespace
+                            docBlock += yytext;
+                        }
+    [^"'\n \t]+          {
+                          docBlock += yytext;
+                        }
+    \n			{
+                          incLineNr();
+                          docBlock += yytext;
+                        }
+    .			{
+                          docBlock += yytext;
+                        }
+}
+
+<StandardComment>{
+    "*)"		{ g_inComment = 0; BEGIN(Search); }
+    \n/{B}"*)"		{ g_inComment = 0; BEGIN(Search); }
+    \n/{B}"*"		{ incLineNr(); }
+    [^*\n*)]+           { current->program+=yytext; }
+    \n			{ incLineNr(); }
+    .			{ current->program+=yytext; }
+
+}
+
+<SpecialComment>{
+    "refstruct{"        { BEGIN(LinkToStructure); }
+    "*)"		{
+                          handleCommentBlock(docBlock, docBrief);
+                          g_inComment = FALSE;
+                          BEGIN(docBlockContext);
+                        }
+    "*"                 {}
+    ^{B}"*"("*")*	{ // skip leading stars
+                        }
+    \n/{B}"*)"		{
+                          handleCommentBlock(docBlock, docBrief);
+                        g_inComment = FALSE;
+                          BEGIN(docBlockContext);
+                        }
+    \n/{B}"*"		{ // continuation of the comment on the next line
+                          docBlock+='\n';
+                          docBrief = FALSE;
+                          startCommentBlock(FALSE);
+                          incLineNr();
+                        }
+    \n			{ // new line that ends the comment
+                          //handleCommentBlock(docBlock, docBrief);
+                          incLineNr();
+                        }
+    .			{ // anything we missed
+                          docBlock+=*yytext;
+                        }
+}
+
+<LinkToStructure>{
+    {IDENTIFIER}        {
+                          docBlock += yytext;
+                          g_documentingStructure = yytext;
+                        }
+    "}"                 { BEGIN(SpecialComment); }
+}
+
+<SingleQuoteString>{
+    \\{B}\n                    { // line continuation
+                                 addToString(yytext);
+                                 incLineNr();
+                               }
+    \\.                        { // espaced char
+                                 addToString(yytext);
+                               }
+    "\"\"\""                   { // tripple double quotes
+                                 addToString(yytext);
+                               }
+    "'"                        { // end of the string
+                                 addToString(yytext);
+                                 BEGIN(g_stringContext);
+                               }
+    [^"'\n\\]+                 { // normal chars
+                                 addToString(yytext);
+                               }
+    .                          { // normal char
+                                 addToString(yytext);
+                               }
+}
+
+<DoubleQuoteString>{
+    \\{B}\n                    { // line continuation
+                                 addToString(yytext);
+                                 incLineNr();
+                               }
+    \\.                        { // espaced char
+                                 addToString(yytext);
+                               }
+    "'''"                      { // tripple single quotes
+                                 addToString(yytext);
+                               }
+    "\""                       { // end of the string
+                                 addToString(yytext);
+                                 BEGIN(g_stringContext);
+                               }
+    [^"'\n\\]+                 { // normal chars
+                                 addToString(yytext);
+                               }
+    .                          { // normal char
+                                 addToString(yytext);
+                               }
+}
+
+<SmlQuoteString>{
+    \\{B}\n                    { // line continuation
+                                 g_defVal+=*yytext;
+                                 incLineNr();
+                               }
+    \\.                        { // espaced char
+                                 g_defVal+=*yytext;
+                               }
+    "'''"                      { // tripple single quotes
+                                 g_defVal+=*yytext;
+                               }
+    "\""                       { // end of the string
+                                 g_defVal+=*yytext;
+                                 BEGIN(SmlPattern);
+                               }
+    .                          { // normal char
+                                 g_defVal+=*yytext;
+                               }
+}
+
+<TripleString>{
+    {TRIDOUBLEQUOTE}    |
+    {TRISINGLEQUOTE}    {
+                          *g_copyString += yytext;
+                          if (g_doubleQuote==(yytext[0]=='"'))
+                          {
+                            BEGIN(g_stringContext);
+                          }
+                        }
+
+
+    ({LONGSTRINGBLOCK}) {
+                          lineCount();
+                          *g_copyString += yytext;
+                        }
+    \n			{
+                          incLineNr();
+                          *g_copyString += yytext;
+                        }
+    .			{
+                          *g_copyString += *yytext;
+                        }
+}
+
+  /* ------------ End rules -------------- */
+
+  /*
+<*>({NONEMPTY}|{EXPCHAR}|{BB}) {}
+  */
+
+<*>{NEWLINE}                   { lineCount(); }
+<*>.                           {}
+%%
+
+//----------------------------------------------------------------------------
+
+static void parseCompounds(Entry *rt)
+{
+  //printf("parseCompounds(%s)\n",rt->name.data());
+  EntryListIterator eli(*rt->children());
+  Entry *ce;
+  for (;(ce=eli.current());++eli)
+  {
+    if (!ce->program.isEmpty())
+    {
+      //printf("-- %s ---------\n%s\n---------------\n",
+      //  ce->name.data(),ce->program.data());
+      // init scanner state
+      inputString = ce->program;
+      inputPosition = 0;
+      smlscannerYYrestart( smlscannerYYin ) ;
+      if (ce->section&Entry::COMPOUND_MASK)
+      {
+        current_root = ce ;
+        BEGIN( Search );
+      }
+      else if (ce->parent())
+      {
+        current_root = ce->parent();
+        //printf("Searching for member variables in %s parent=%s\n",
+        //    ce->name.data(),ce->parent->name.data());
+        BEGIN( SearchMemVars );
+      }
+      yyFileName = ce->fileName;
+      yyLineNr   = ce->bodyLine ;
+      if (current) delete current;
+      current = new Entry;
+      initEntry();
+
+      groupEnterCompound(yyFileName,yyLineNr,ce->name);
+
+      smlscannerYYlex() ;
+      g_lexInit=TRUE;
+      delete current; current=0;
+      ce->program.resize(0);
+
+      groupLeaveCompound(yyFileName,yyLineNr,ce->name);
+
+    }
+    parseCompounds(ce);
+  }
+}
+
+//----------------------------------------------------------------------------
+
+
+static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
+{
+  initParser();
+  myStack.top = -1;
+
+  inputString = fileBuf;
+  inputPosition = 0;
+
+  protection    = Public;
+  mtype         = Method;
+  gstat         = FALSE;
+  virt          = Normal;
+  current_root  = rt;
+  g_specialBlock = FALSE;
+
+
+  inputFile.setName(fileName);
+  if (inputFile.open(IO_ReadOnly))
+  {
+    yyLineNr= 1 ;
+    yyFileName = fileName;
+    //setContext();
+    msg("Parsing file %s...\n",yyFileName.data());
+
+    QFileInfo fi(fileName);
+    g_moduleScope = findPackageScope(fileName);
+    QCString baseName=fi.baseName().utf8();
+    if (baseName!="__init__") // package initializer file is not a package itself
+    {
+      if (!g_moduleScope.isEmpty())
+      {
+        g_moduleScope+="::";
+      }
+      g_moduleScope+=baseName;
+    }
+
+    current            = new Entry;
+    initEntry();
+    current->name      = g_moduleScope;
+    current->section   = Entry::NAMESPACE_SEC;
+    current->type      = "namespace";
+    current->fileName  = yyFileName;
+    current->startLine = yyLineNr;
+    current->bodyLine  = yyLineNr;
+
+    rt->addSubEntry(current);
+
+    current_root  = current ;
+    initParser();
+    current       = new Entry;
+
+    groupEnterFile(yyFileName,yyLineNr);
+
+    current->reset();
+    initEntry();
+    smlscannerYYrestart( smlscannerYYin );
+    BEGIN( Search );
+    smlscannerYYlex();
+    g_lexInit=TRUE;
+
+    groupLeaveFile(yyFileName,yyLineNr);
+
+    current_root->program.resize(0);
+    delete current; current=0;
+
+    parseCompounds(current_root);
+
+    inputFile.close();
+  }
+
+}
+
+//----------------------------------------------------------------------------
+
+static void parsePrototype(const QCString &text)
+{
+  //printf("**** parsePrototype(%s) begin\n",text.data());
+  if (text.isEmpty())
+  {
+    warn(yyFileName,yyLineNr,"Empty prototype found!");
+    return;
+  }
+
+  g_specialBlock = FALSE;
+  g_packageCommentAllowed = FALSE;
+
+  const char *orgInputString;
+  int orgInputPosition;
+  YY_BUFFER_STATE orgState;
+
+  // save scanner state
+  orgState = YY_CURRENT_BUFFER;
+  yy_switch_to_buffer(yy_create_buffer(smlscannerYYin, YY_BUF_SIZE));
+  orgInputString = inputString;
+  orgInputPosition = inputPosition;
+
+  // set new string
+  inputString = text;
+  inputPosition = 0;
+  smlscannerYYrestart( smlscannerYYin );
+
+  BEGIN( FunctionDec );
+
+  smlscannerYYlex();
+  g_lexInit=TRUE;
+
+  current->name = current->name.stripWhiteSpace();
+  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
+    current->section = Entry::VARIABLEDOC_SEC;
+
+  // restore original scanner state
+
+  YY_BUFFER_STATE tmpBuf = YY_CURRENT_BUFFER;
+  yy_switch_to_buffer(orgState);
+  yy_delete_buffer(tmpBuf);
+
+  inputString = orgInputString;
+  inputPosition = orgInputPosition;
+
+  //printf("**** parsePrototype end\n");
+}
+
+void smlscanFreeScanner()
+{
+#if defined(YY_FLEX_SUBMINOR_VERSION)
+  if (g_lexInit)
+  {
+    smlscannerYYlex_destroy();
+  }
+#endif
+}
+
+//----------------------------------------------------------------------------
+
+void SmlLanguageScanner::parseInput(const char *fileName,
+                                       const char *fileBuf,
+                                       Entry *root,
+                                       bool /*sameTranslationUnit*/,
+                                       QStrList & /*filesInSameTranslationUnit*/)
+{
+  g_thisParser = this;
+  ::parseMain(fileName,fileBuf,root);
+
+  // May print the AST for debugging purposes
+  // printAST(global_root);
+}
+
+bool SmlLanguageScanner::needsPreprocessing(const QCString &)
+{
+  return FALSE;
+}
+
+void SmlLanguageScanner::parseCode(CodeOutputInterface &codeOutIntf,
+    const char *scopeName,
+    const QCString &input,
+    SrcLangExt /*lang*/,
+    bool isExampleBlock,
+    const char *exampleName,
+    FileDef *fileDef,
+    int startLine,
+    int endLine,
+    bool inlineFragment,
+    MemberDef *memberDef,
+    bool showLineNumbers,
+    Definition *searchCtx,
+    bool collectXRefs
+    )
+{
+  ::parseSmlCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
+                    fileDef,startLine,endLine,inlineFragment,memberDef,
+                    showLineNumbers,searchCtx,collectXRefs);
+}
+
+void SmlLanguageScanner::parsePrototype(const char *text)
+{
+  ::parsePrototype(text);
+
+}
+
+void SmlLanguageScanner::resetCodeParserState()
+{
+  ::resetSmlCodeParserState();
+}
+
+//----------------------------------------------------------------------------
+
+#if !defined(YY_FLEX_SUBMINOR_VERSION)
+//----------------------------------------------------------------------------
+extern "C" { // some bogus code to keep the compiler happy
+  void smlscannerYYdummy() { yy_flex_realloc(0,0); }
+}
+#endif
diff --git a/src/types.h b/src/types.h
index 806e6fca..90bbbfcc 100644
--- a/src/types.h
+++ b/src/types.h
@@ -3,8 +3,8 @@
  * Copyright (C) 1997-2015 by Dimitri van Heesch.
  *
  * Permission to use, copy, modify, and distribute this software and its
- * documentation under the terms of the GNU General Public License is hereby 
- * granted. No representations are made about the suitability of this software 
+ * documentation under the terms of the GNU General Public License is hereby
+ * granted. No representations are made about the suitability of this software
  * for any purpose. It is provided "as is" without express or implied warranty.
  * See the GNU General Public License for more details.
  *
@@ -19,7 +19,7 @@
 #include <qcstring.h>
 
 /** @file
- *  @brief This file contains a number of basic enums and types. 
+ *  @brief This file contains a number of basic enums and types.
  */
 
 /** Protection level of members */
@@ -55,18 +55,19 @@ enum SrcLangExt
   SrcLangExt_XML      = 0x04000,
   SrcLangExt_Tcl      = 0x08000,
   SrcLangExt_Markdown = 0x10000,
-  SrcLangExt_SQL = 0x20000
+  SrcLangExt_SQL      = 0x20000
+  SrcLangExt_Sml      = 0x40000
 };
 
 /** Grouping info */
-struct Grouping 
+struct Grouping
 {
   /** Grouping priority */
-  enum GroupPri_t 
+  enum GroupPri_t
   {
     GROUPING_LOWEST,
-    GROUPING_AUTO_WEAK = GROUPING_LOWEST,     //!< membership in group was defined via \@weakgroup 
-    GROUPING_AUTO_ADD,     //!< membership in group was defined via \@add[to]group 
+    GROUPING_AUTO_WEAK = GROUPING_LOWEST,     //!< membership in group was defined via \@weakgroup
+    GROUPING_AUTO_ADD,     //!< membership in group was defined via \@add[to]group
     GROUPING_AUTO_DEF,     //!< membership in group was defined via \@defgroup
     GROUPING_AUTO_HIGHEST = GROUPING_AUTO_DEF,
     GROUPING_INGROUP,      //!< membership in group was defined by \@ingroup
@@ -85,7 +86,7 @@ struct Grouping
         return "@defgroup";
       case GROUPING_INGROUP:
         return "@ingroup";
-    }	    
+    }
     return "???";
   }
 
@@ -152,7 +153,7 @@ enum MemberListType
   MemberListType_allMembersList          = 38,
 
   MemberListType_decDefineMembers        = 39 + MemberListType_declarationLists,
-  MemberListType_decProtoMembers         = 40 + MemberListType_declarationLists, 
+  MemberListType_decProtoMembers         = 40 + MemberListType_declarationLists,
   MemberListType_decTypedefMembers       = 41 + MemberListType_declarationLists,
   MemberListType_decEnumMembers          = 42 + MemberListType_declarationLists,
   MemberListType_decFuncMembers          = 43 + MemberListType_declarationLists,
@@ -193,13 +194,13 @@ enum MemberListType
   MemberListType_serviceMembers          = 73 + MemberListType_detailedLists,
 };
 
-enum MemberType 
-{ 
+enum MemberType
+{
   MemberType_Define,
-  MemberType_Function, 
-  MemberType_Variable, 
-  MemberType_Typedef, 
-  MemberType_Enumeration, 
+  MemberType_Function,
+  MemberType_Variable,
+  MemberType_Typedef,
+  MemberType_Enumeration,
   MemberType_EnumValue,
   MemberType_Signal,
   MemberType_Slot,
diff --git a/src/util.cpp b/src/util.cpp
index d3d7dfef..d26a7fdc 100644
--- a/src/util.cpp
+++ b/src/util.cpp
@@ -1,11 +1,11 @@
 /*****************************************************************************
- * 
+ *
  *
  * Copyright (C) 1997-2015 by Dimitri van Heesch.
  *
  * Permission to use, copy, modify, and distribute this software and its
- * documentation under the terms of the GNU General Public License is hereby 
- * granted. No representations are made about the suitability of this software 
+ * documentation under the terms of the GNU General Public License is hereby
+ * granted. No representations are made about the suitability of this software
  * for any purpose. It is provided "as is" without express or implied warranty.
  * See the GNU General Public License for more details.
  *
@@ -83,7 +83,7 @@
 #define ALGO_COUNT 1
 #define ALGO_CRC16 2
 #define ALGO_MD5   3
-    
+
 //#define MAP_ALGO ALGO_COUNT
 //#define MAP_ALGO ALGO_CRC16
 #define MAP_ALGO ALGO_MD5
@@ -94,12 +94,12 @@
 // TextGeneratorOLImpl implementation
 //------------------------------------------------------------------------
 
-TextGeneratorOLImpl::TextGeneratorOLImpl(OutputDocInterface &od) : m_od(od) 
+TextGeneratorOLImpl::TextGeneratorOLImpl(OutputDocInterface &od) : m_od(od)
 {
 }
 
 void TextGeneratorOLImpl::writeString(const char *s,bool keepSpaces) const
-{ 
+{
   if (s==0) return;
   //printf("TextGeneratorOlImpl::writeString('%s',%d)\n",s,keepSpaces);
   if (keepSpaces)
@@ -112,19 +112,19 @@ void TextGeneratorOLImpl::writeString(const char *s,bool keepSpaces) const
       cs[1]='\0';
       while ((c=*p++))
       {
-        if (c==' ') m_od.writeNonBreakableSpace(1); 
+        if (c==' ') m_od.writeNonBreakableSpace(1);
         else cs[0]=c,m_od.docify(cs);
       }
     }
   }
   else
   {
-    m_od.docify(s); 
+    m_od.docify(s);
   }
 }
 
 void TextGeneratorOLImpl::writeBreak(int indent) const
-{ 
+{
   m_od.lineBreak("typebreak");
   int i;
   for (i=0;i<indent;i++)
@@ -145,9 +145,9 @@ void TextGeneratorOLImpl::writeLink(const char *extRef,const char *file,
 //------------------------------------------------------------------------
 
 // an inheritance tree of depth of 100000 should be enough for everyone :-)
-const int maxInheritanceDepth = 100000; 
+const int maxInheritanceDepth = 100000;
 
-/*! 
+/*!
   Removes all anonymous scopes from string s
   Possible examples:
 \verbatim
@@ -176,9 +176,9 @@ QCString removeAnonymousScopes(const QCString &s)
     while (c<i+l && s.at(c)!='@') if (s.at(c++)==':') b1=TRUE;
     c=i+l-1;
     while (c>=i && s.at(c)!='@') if (s.at(c--)==':') b2=TRUE;
-    if (b1 && b2) 
-    { 
-      result+="::"; 
+    if (b1 && b2)
+    {
+      result+="::";
     }
     p=i+l;
   }
@@ -247,7 +247,7 @@ done:
 void writePageRef(OutputDocInterface &od,const char *cn,const char *mn)
 {
   od.pushGeneratorState();
-  
+
   od.disable(OutputGenerator::Html);
   od.disable(OutputGenerator::Man);
   if (Config_getBool(PDF_HYPERLINKS)) od.disable(OutputGenerator::Latex);
@@ -273,7 +273,7 @@ QCString generateMarker(int id)
 
 static QCString stripFromPath(const QCString &path,QStrList &l)
 {
-  // look at all the strings in the list and strip the longest match  
+  // look at all the strings in the list and strip the longest match
   const char *s=l.first();
   QCString potential;
   unsigned int length = 0;
@@ -309,7 +309,7 @@ QCString stripFromIncludePath(const QCString &path)
 }
 
 /*! try to determine if \a name is a source or a header file name by looking
- * at the extension. A number of variations is allowed in both upper and 
+ * at the extension. A number of variations is allowed in both upper and
  * lower case) If anyone knows or uses another extension please let me know :-)
  */
 int guessSection(const char *name)
@@ -330,7 +330,7 @@ int guessSection(const char *name)
       n.right(4)==".i++"  ||
       n.right(4)==".inl"  ||
       n.right(4)==".xml"  ||
-      n.right(4)==".sql" 
+      n.right(4)==".sql"
      ) return Entry::SOURCE_SEC;
   if (n.right(2)==".h"   || // header
       n.right(3)==".hh"  ||
@@ -350,7 +350,7 @@ QCString resolveTypeDef(Definition *context,const QCString &qualifiedName,
   //printf("<<resolveTypeDef(%s,%s)\n",
   //          context ? context->name().data() : "<none>",qualifiedName.data());
   QCString result;
-  if (qualifiedName.isEmpty()) 
+  if (qualifiedName.isEmpty())
   {
     //printf("  qualified name empty!\n");
     return result;
@@ -377,7 +377,7 @@ QCString resolveTypeDef(Definition *context,const QCString &qualifiedName,
   {
     // step 1: get the right scope
     Definition *resScope=mContext;
-    if (scopeIndex!=-1) 
+    if (scopeIndex!=-1)
     {
       // split-off scope part
       QCString resScopeName = qualifiedName.left(scopeIndex);
@@ -398,9 +398,9 @@ QCString resolveTypeDef(Definition *context,const QCString &qualifiedName,
       }
     }
     //printf("resScope=%s\n",resScope?resScope->name().data():"<none>");
-    
+
     // step 2: get the member
-    if (resScope) // no scope or scope found in the current context 
+    if (resScope) // no scope or scope found in the current context
     {
       //printf("scope found: %s, look for typedef %s\n",
       //     resScope->qualifiedName().data(),resName.data());
@@ -422,7 +422,7 @@ QCString resolveTypeDef(Definition *context,const QCString &qualifiedName,
         for (;(tmd=mni.current());++mni)
         {
           //printf("Found member %s resScope=%s outerScope=%s mContext=%p\n",
-          //    tmd->name().data(), resScope->name().data(), 
+          //    tmd->name().data(), resScope->name().data(),
           //    tmd->getOuterScope()->name().data(), mContext);
           if (tmd->isTypedef() /*&& tmd->getOuterScope()==resScope*/)
           {
@@ -463,11 +463,11 @@ QCString resolveTypeDef(Definition *context,const QCString &qualifiedName,
     //    qualifiedName.data(),context ? context->name().data() : "<global>");
   }
   return result;
-  
+
 }
 
 
-/*! Get a class definition given its name. 
+/*! Get a class definition given its name.
  *  Returns 0 if the class is not found.
  */
 ClassDef *getClass(const char *n)
@@ -530,7 +530,7 @@ int isAccessibleFromWithExpScope(const Definition *scope,const FileDef *fileScop
  *  within file \a fileScope.
  *
  *  Example: typedef A T; will return the class representing A if it is a class.
- * 
+ *
  *  Example: typedef int T; will return 0, since "int" is not a class.
  */
 ClassDef *newResolveTypedef(const FileDef *fileScope,MemberDef *md,
@@ -556,10 +556,10 @@ ClassDef *newResolveTypedef(const FileDef *fileScope,MemberDef *md,
   if (g_resolvedTypedefs.find(qname)) return 0; // typedef already done
 
   g_resolvedTypedefs.insert(qname,md); // put on the trace list
-  
+
   ClassDef *typeClass = md->getClassDef();
   QCString type = md->typeString(); // get the "value" of the typedef
-  if (typeClass && typeClass->isTemplate() && 
+  if (typeClass && typeClass->isTemplate() &&
       actTemplParams && actTemplParams->count()>0)
   {
     type = substituteTemplateArgumentsInString(type,
@@ -568,7 +568,7 @@ ClassDef *newResolveTypedef(const FileDef *fileScope,MemberDef *md,
   QCString typedefValue = type;
   int tl=type.length();
   int ip=tl-1; // remove * and & at the end
-  while (ip>=0 && (type.at(ip)=='*' || type.at(ip)=='&' || type.at(ip)==' ')) 
+  while (ip>=0 && (type.at(ip)=='*' || type.at(ip)=='&' || type.at(ip)==' '))
   {
     ip--;
   }
@@ -583,7 +583,7 @@ ClassDef *newResolveTypedef(const FileDef *fileScope,MemberDef *md,
   ClassDef  *result = getResolvedClassRec(md->getOuterScope(),
                                   fileScope,type,&memTypeDef,0,pResolvedType);
   // if type is a typedef then return what it resolves to.
-  if (memTypeDef && memTypeDef->isTypedef()) 
+  if (memTypeDef && memTypeDef->isTypedef())
   {
     result=newResolveTypedef(fileScope,memTypeDef,pMemType,pTemplSpec);
     goto done;
@@ -643,8 +643,8 @@ done:
   }
 
   // remember computed value for next time
-  if (result && result->getDefFileName()!="<code>") 
-    // this check is needed to prevent that temporary classes that are 
+  if (result && result->getDefFileName()!="<code>")
+    // this check is needed to prevent that temporary classes that are
     // introduced while parsing code fragments are being cached here.
   {
     //printf("setting cached typedef %p in result %p\n",md,result);
@@ -655,9 +655,9 @@ done:
         pResolvedType ? *pResolvedType : QCString()
        );
   }
-  
+
   g_resolvedTypedefs.remove(qname); // remove from the trace list
-  
+
   return result;
 }
 
@@ -692,11 +692,11 @@ static QCString substTypedef(const Definition *scope,const FileDef *fileScope,co
         {
           // test accessibility of typedef within scope.
           int distance = isAccessibleFromWithExpScope(scope,fileScope,d,"");
-          if (distance!=-1 && distance<minDistance) 
+          if (distance!=-1 && distance<minDistance)
             // definition is accessible and a better match
           {
             minDistance=distance;
-            bestMatch = md; 
+            bestMatch = md;
           }
         }
       }
@@ -711,18 +711,18 @@ static QCString substTypedef(const Definition *scope,const FileDef *fileScope,co
     {
       // test accessibility of typedef within scope.
       int distance = isAccessibleFromWithExpScope(scope,fileScope,d,"");
-      if (distance!=-1) // definition is accessible 
+      if (distance!=-1) // definition is accessible
       {
-        bestMatch = md; 
+        bestMatch = md;
       }
     }
   }
-  if (bestMatch) 
+  if (bestMatch)
   {
     result = bestMatch->typeString();
     if (pTypeDef) *pTypeDef=bestMatch;
   }
-  
+
   //printf("substTypedef(%s,%s)=%s\n",scope?scope->name().data():"<global>",
   //                                  name.data(),result.data());
   return result;
@@ -746,8 +746,8 @@ static Definition *endOfPathIsUsedClass(SDict<Definition> *cl,const QCString &lo
 }
 
 /*! Starting with scope \a start, the string \a path is interpreted as
- *  a part of a qualified scope name (e.g. A::B::C), and the scope is 
- *  searched. If found the scope definition is returned, otherwise 0 
+ *  a part of a qualified scope name (e.g. A::B::C), and the scope is
+ *  searched. If found the scope definition is returned, otherwise 0
  *  is returned.
  */
 static const Definition *followPath(const Definition *start,const FileDef *fileScope,const QCString &path)
@@ -778,7 +778,7 @@ static const Definition *followPath(const Definition *start,const FileDef *fileS
     //     qualScopePart.data(),
     //     current->name().data(),
     //     next?next->name().data():"<null>");
-    if (next==0) // failed to follow the path 
+    if (next==0) // failed to follow the path
     {
       //printf("==> next==0!\n");
       if (current->definitionType()==Definition::TypeNamespace)
@@ -813,7 +813,7 @@ bool accessibleViaUsingClass(const SDict<Definition> *cl,
                             )
 {
   //printf("accessibleViaUsingClass(%p)\n",cl);
-  if (cl) // see if the class was imported via a using statement 
+  if (cl) // see if the class was imported via a using statement
   {
     SDict<Definition>::Iterator cli(*cl);
     Definition *ucd;
@@ -822,7 +822,7 @@ bool accessibleViaUsingClass(const SDict<Definition> *cl,
     {
       //printf("Trying via used class %s\n",ucd->name().data());
       const Definition *sc = explicitScopePartEmpty ? ucd : followPath(ucd,fileScope,explicitScopePart);
-      if (sc && sc==item) return TRUE; 
+      if (sc && sc==item) return TRUE;
       //printf("Try via used class done\n");
     }
   }
@@ -845,10 +845,10 @@ bool accessibleViaUsingNamespace(const NamespaceSDict *nl,
       //printf("[Trying via used namespace %s: count=%d/%d\n",und->name().data(),
       //    count,nl->count());
       const Definition *sc = explicitScopePart.isEmpty() ? und : followPath(und,fileScope,explicitScopePart);
-      if (sc && item->getOuterScope()==sc) 
+      if (sc && item->getOuterScope()==sc)
       {
         //printf("] found it\n");
-        return TRUE; 
+        return TRUE;
       }
       QCString key=und->name();
       if (und->getUsedNamespaces() && visitedDict.find(key)==0)
@@ -909,7 +909,7 @@ class AccessStack
       for (i=0;i<m_index;i++)
       {
         AccessElem *e = &m_elements[i];
-        if (e->scope==scope && e->fileScope==fileScope && e->item==item) 
+        if (e->scope==scope && e->fileScope==fileScope && e->item==item)
         {
           return TRUE;
         }
@@ -922,7 +922,7 @@ class AccessStack
       for (i=0;i<m_index;i++)
       {
         AccessElem *e = &m_elements[i];
-        if (e->scope==scope && e->fileScope==fileScope && e->item==item && e->expScope==expScope) 
+        if (e->scope==scope && e->fileScope==fileScope && e->item==item && e->expScope==expScope)
         {
           return TRUE;
         }
@@ -944,7 +944,7 @@ class AccessStack
 };
 
 /* Returns the "distance" (=number of levels up) from item to scope, or -1
- * if item in not inside scope. 
+ * if item in not inside scope.
  */
 int isAccessibleFrom(const Definition *scope,const FileDef *fileScope,const Definition *item)
 {
@@ -962,20 +962,20 @@ int isAccessibleFrom(const Definition *scope,const FileDef *fileScope,const Defi
   int i;
 
   Definition *itemScope=item->getOuterScope();
-  bool memberAccessibleFromScope = 
+  bool memberAccessibleFromScope =
       (item->definitionType()==Definition::TypeMember &&                   // a member
        itemScope && itemScope->definitionType()==Definition::TypeClass  && // of a class
        scope->definitionType()==Definition::TypeClass &&                   // accessible
        ((ClassDef*)scope)->isAccessibleMember((MemberDef *)item)           // from scope
       );
-  bool nestedClassInsideBaseClass = 
+  bool nestedClassInsideBaseClass =
       (item->definitionType()==Definition::TypeClass &&                    // a nested class
-       itemScope && itemScope->definitionType()==Definition::TypeClass &&  // inside a base 
+       itemScope && itemScope->definitionType()==Definition::TypeClass &&  // inside a base
        scope->definitionType()==Definition::TypeClass &&                   // class of scope
-       ((ClassDef*)scope)->isBaseClass((ClassDef*)itemScope,TRUE)          
+       ((ClassDef*)scope)->isBaseClass((ClassDef*)itemScope,TRUE)
       );
 
-  if (itemScope==scope || memberAccessibleFromScope || nestedClassInsideBaseClass) 
+  if (itemScope==scope || memberAccessibleFromScope || nestedClassInsideBaseClass)
   {
     //printf("> found it\n");
     if (nestedClassInsideBaseClass) result++; // penalty for base class to prevent
@@ -987,13 +987,13 @@ int isAccessibleFrom(const Definition *scope,const FileDef *fileScope,const Defi
     if (fileScope)
     {
       SDict<Definition> *cl = fileScope->getUsedClasses();
-      if (accessibleViaUsingClass(cl,fileScope,item)) 
+      if (accessibleViaUsingClass(cl,fileScope,item))
       {
         //printf("> found via used class\n");
         goto done;
       }
       NamespaceSDict *nl = fileScope->getUsedNamespaces();
-      if (accessibleViaUsingNamespace(nl,fileScope,item)) 
+      if (accessibleViaUsingNamespace(nl,fileScope,item))
       {
         //printf("> found via used namespace\n");
         goto done;
@@ -1010,13 +1010,13 @@ int isAccessibleFrom(const Definition *scope,const FileDef *fileScope,const Defi
       NamespaceDef *nscope = (NamespaceDef*)scope;
       //printf("  %s is namespace with %d used classes\n",nscope->name().data(),nscope->getUsedClasses());
       SDict<Definition> *cl = nscope->getUsedClasses();
-      if (accessibleViaUsingClass(cl,fileScope,item)) 
+      if (accessibleViaUsingClass(cl,fileScope,item))
       {
         //printf("> found via used class\n");
         goto done;
       }
       NamespaceSDict *nl = nscope->getUsedNamespaces();
-      if (accessibleViaUsingNamespace(nl,fileScope,item)) 
+      if (accessibleViaUsingNamespace(nl,fileScope,item))
       {
         //printf("> found via used namespace\n");
         goto done;
@@ -1043,10 +1043,10 @@ done:
  * class B { public: class J {}; };
  *
  * - Looking for item=='J' inside scope=='B' will return 0.
- * - Looking for item=='I' inside scope=='B' will return -1 
+ * - Looking for item=='I' inside scope=='B' will return -1
  *   (as it is not found in B nor in the global scope).
- * - Looking for item=='A::I' inside scope=='B', first the match B::A::I is tried but 
- *   not found and then A::I is searched in the global scope, which matches and 
+ * - Looking for item=='A::I' inside scope=='B', first the match B::A::I is tried but
+ *   not found and then A::I is searched in the global scope, which matches and
  *   thus the result is 1.
  */
 int isAccessibleFromWithExpScope(const Definition *scope,const FileDef *fileScope,
@@ -1090,7 +1090,7 @@ int isAccessibleFromWithExpScope(const Definition *scope,const FileDef *fileScop
              ((ClassDef*)newScope)->isBaseClass((ClassDef*)itemScope,TRUE,0)
             )
     {
-      // inheritance is also ok. Example: looking for B::I, where 
+      // inheritance is also ok. Example: looking for B::I, where
       // class A { public: class I {} };
       // class B : public A {}
       // but looking for B::I, where
@@ -1165,7 +1165,7 @@ int isAccessibleFromWithExpScope(const Definition *scope,const FileDef *fileScop
     {
       NamespaceDef *nscope = (NamespaceDef*)scope;
       NamespaceSDict *nl = nscope->getUsedNamespaces();
-      if (accessibleViaUsingNamespace(nl,fileScope,item,explicitScopePart)) 
+      if (accessibleViaUsingNamespace(nl,fileScope,item,explicitScopePart))
       {
         //printf("> found in used namespace\n");
         goto done;
@@ -1176,7 +1176,7 @@ int isAccessibleFromWithExpScope(const Definition *scope,const FileDef *fileScop
       if (fileScope)
       {
         NamespaceSDict *nl = fileScope->getUsedNamespaces();
-        if (accessibleViaUsingNamespace(nl,fileScope,item,explicitScopePart)) 
+        if (accessibleViaUsingNamespace(nl,fileScope,item,explicitScopePart))
         {
           //printf("> found in used namespace\n");
           goto done;
@@ -1209,7 +1209,7 @@ int computeQualifiedIndex(const QCString &name)
 
 static void getResolvedSymbol(const Definition *scope,
                        const FileDef *fileScope,
-                       Definition *d, 
+                       Definition *d,
                        const QCString &explicitScopePart,
                        ArgumentList *actTemplParams,
                        int &minDistance,
@@ -1224,8 +1224,8 @@ static void getResolvedSymbol(const Definition *scope,
 
   // only look at classes and members that are enums or typedefs
   if (d->definitionType()==Definition::TypeClass ||
-      (d->definitionType()==Definition::TypeMember && 
-       (((MemberDef*)d)->isTypedef() || ((MemberDef*)d)->isEnumerate()) 
+      (d->definitionType()==Definition::TypeMember &&
+       (((MemberDef*)d)->isTypedef() || ((MemberDef*)d)->isEnumerate())
       )
      )
   {
@@ -1241,23 +1241,23 @@ static void getResolvedSymbol(const Definition *scope,
         ClassDef *cd = (ClassDef *)d;
         //printf("cd=%s\n",cd->name().data());
         if (!cd->isTemplateArgument()) // skip classes that
-          // are only there to 
-          // represent a template 
+          // are only there to
+          // represent a template
           // argument
         {
           //printf("is not a templ arg\n");
           if (distance<minDistance) // found a definition that is "closer"
           {
             minDistance=distance;
-            bestMatch = cd; 
+            bestMatch = cd;
             bestTypedef = 0;
             bestTemplSpec.resize(0);
             bestResolvedType = cd->qualifiedName();
           }
           else if (distance==minDistance &&
               fileScope && bestMatch &&
-              fileScope->getUsedNamespaces() && 
-              d->getOuterScope()->definitionType()==Definition::TypeNamespace && 
+              fileScope->getUsedNamespaces() &&
+              d->getOuterScope()->definitionType()==Definition::TypeNamespace &&
               bestMatch->getOuterScope()==Doxygen::globalScope
               )
           {
@@ -1270,7 +1270,7 @@ static void getResolvedSymbol(const Definition *scope,
             // Just a non-perfect heuristic but it could help in some situations
             // (kdecore code is an example).
             minDistance=distance;
-            bestMatch = cd; 
+            bestMatch = cd;
             bestTypedef = 0;
             bestTemplSpec.resize(0);
             bestResolvedType = cd->qualifiedName();
@@ -1369,7 +1369,7 @@ static void getResolvedSymbol(const Definition *scope,
 /* Find the fully qualified class name referred to by the input class
  * or typedef name against the input scope.
  * Loops through scope and each of its parent scopes looking for a
- * match against the input name. Can recursively call itself when 
+ * match against the input name. Can recursively call itself when
  * resolving typedefs.
  */
 static ClassDef *getResolvedClassRec(const Definition *scope,
@@ -1404,7 +1404,7 @@ static ClassDef *getResolvedClassRec(const Definition *scope,
     name=name.mid(qualifierIndex+2);
   }
 
-  if (name.isEmpty()) 
+  if (name.isEmpty())
   {
     //printf("] empty name\n");
     return 0; // empty name
@@ -1412,9 +1412,9 @@ static ClassDef *getResolvedClassRec(const Definition *scope,
 
   //printf("Looking for symbol %s\n",name.data());
   DefinitionIntf *di = Doxygen::symbolMap->find(name);
-  // the -g (for C# generics) and -p (for ObjC protocols) are now already 
+  // the -g (for C# generics) and -p (for ObjC protocols) are now already
   // stripped from the key used in the symbolMap, so that is not needed here.
-  if (di==0) 
+  if (di==0)
   {
     //di = Doxygen::symbolMap->find(name+"-g");
     //if (di==0)
@@ -1429,11 +1429,11 @@ static ClassDef *getResolvedClassRec(const Definition *scope,
   }
   //printf("found symbol!\n");
 
-  bool hasUsingStatements = 
-    (fileScope && ((fileScope->getUsedNamespaces() && 
+  bool hasUsingStatements =
+    (fileScope && ((fileScope->getUsedNamespaces() &&
                     fileScope->getUsedNamespaces()->count()>0) ||
-                   (fileScope->getUsedClasses() && 
-                    fileScope->getUsedClasses()->count()>0)) 
+                   (fileScope->getUsedClasses() &&
+                    fileScope->getUsedClasses()->count()>0))
     );
   //printf("hasUsingStatements=%d\n",hasUsingStatements);
   // Since it is often the case that the same name is searched in the same
@@ -1460,7 +1460,7 @@ static ClassDef *getResolvedClassRec(const Definition *scope,
 
   // if a file scope is given and it contains using statements we should
   // also use the file part in the key (as a class name can be in
-  // two different namespaces and a using statement in a file can select 
+  // two different namespaces and a using statement in a file can select
   // one of them).
   if (hasUsingStatements)
   {
@@ -1476,19 +1476,19 @@ static ClassDef *getResolvedClassRec(const Definition *scope,
   //printf("Searching for %s result=%p\n",key.data(),pval);
   if (pval)
   {
-    //printf("LookupInfo %p %p '%s' %p\n", 
-    //    pval->classDef, pval->typeDef, pval->templSpec.data(), 
-    //    pval->resolvedType.data()); 
+    //printf("LookupInfo %p %p '%s' %p\n",
+    //    pval->classDef, pval->typeDef, pval->templSpec.data(),
+    //    pval->resolvedType.data());
     if (pTemplSpec)    *pTemplSpec=pval->templSpec;
     if (pTypeDef)      *pTypeDef=pval->typeDef;
     if (pResolvedType) *pResolvedType=pval->resolvedType;
     //printf("] cachedMatch=%s\n",
     //    pval->classDef?pval->classDef->name().data():"<none>");
-    //if (pTemplSpec) 
+    //if (pTemplSpec)
     //  printf("templSpec=%s\n",pTemplSpec->data());
-    return pval->classDef; 
+    return pval->classDef;
   }
-  else // not found yet; we already add a 0 to avoid the possibility of 
+  else // not found yet; we already add a 0 to avoid the possibility of
     // endless recursion.
   {
     Doxygen::lookupCache->insert(key,new LookupInfo);
@@ -1522,7 +1522,7 @@ static ClassDef *getResolvedClassRec(const Definition *scope,
                       bestResolvedType);
   }
 
-  if (pTypeDef) 
+  if (pTypeDef)
   {
     *pTypeDef = bestTypedef;
   }
@@ -1551,7 +1551,7 @@ static ClassDef *getResolvedClassRec(const Definition *scope,
   }
   //printf("] bestMatch=%s distance=%d\n",
   //    bestMatch?bestMatch->name().data():"<none>",minDistance);
-  //if (pTemplSpec) 
+  //if (pTemplSpec)
   //  printf("templSpec=%s\n",pTemplSpec->data());
   return bestMatch;
 }
@@ -1559,7 +1559,7 @@ static ClassDef *getResolvedClassRec(const Definition *scope,
 /* Find the fully qualified class name referred to by the input class
  * or typedef name against the input scope.
  * Loops through scope and each of its parent scopes looking for a
- * match against the input name. 
+ * match against the input name.
  */
 ClassDef *getResolvedClass(const Definition *scope,
     const FileDef *fileScope,
@@ -1574,7 +1574,7 @@ ClassDef *getResolvedClass(const Definition *scope,
   static bool optimizeOutputVhdl = Config_getBool(OPTIMIZE_OUTPUT_VHDL);
   g_resolvedTypedefs.clear();
   if (scope==0 ||
-      (scope->definitionType()!=Definition::TypeClass && 
+      (scope->definitionType()!=Definition::TypeClass &&
        scope->definitionType()!=Definition::TypeNamespace
       ) ||
       (scope->getLanguage()==SrcLangExt_Java && QCString(n).find("::")!=-1)
@@ -1603,7 +1603,7 @@ ClassDef *getResolvedClass(const Definition *scope,
   {
     result = getClass(n);
   }
-  if (!mayBeUnlinkable && result && !result->isLinkable()) 
+  if (!mayBeUnlinkable && result && !result->isLinkable())
   {
     if (!mayBeHidden || !result->isHidden())
     {
@@ -1626,7 +1626,7 @@ static bool findOperator(const QCString &s,int i)
   int b = s.findRev("operator",i);
   if (b==-1) return FALSE; // not found
   b+=8;
-  while (b<i) // check if there are only spaces in between 
+  while (b<i) // check if there are only spaces in between
     // the operator and the >
   {
     if (!isspace((uchar)s.at(b))) return FALSE;
@@ -1974,10 +1974,10 @@ bool rightScopeMatch(const QCString &scope, const QCString &name)
 {
   int sl=scope.length();
   int nl=name.length();
-  return (name==scope || // equal 
-          (scope.right(nl)==name && // substring 
+  return (name==scope || // equal
+          (scope.right(nl)==name && // substring
            sl-nl>1 && scope.at(sl-nl-1)==':' && scope.at(sl-nl-2)==':' // scope
-          ) 
+          )
          );
 }
 
@@ -1985,10 +1985,10 @@ bool leftScopeMatch(const QCString &scope, const QCString &name)
 {
   int sl=scope.length();
   int nl=name.length();
-  return (name==scope || // equal 
-          (scope.left(nl)==name && // substring 
+  return (name==scope || // equal
+          (scope.left(nl)==name && // substring
            sl>nl+1 && scope.at(nl)==':' && scope.at(nl+1)==':' // scope
-          ) 
+          )
          );
 }
 
@@ -2014,17 +2014,17 @@ void linkifyText(const TextGeneratorIntf &out, const Definition *scope,
   int floatingIndex=0;
   if (strLen==0) return;
   // read a word from the text string
-  while ((newIndex=regExp.match(txtStr,index,&matchLen))!=-1 && 
+  while ((newIndex=regExp.match(txtStr,index,&matchLen))!=-1 &&
       (newIndex==0 || !(txtStr.at(newIndex-1)>='0' && txtStr.at(newIndex-1)<='9')) // avoid matching part of hex numbers
       )
   {
     // add non-word part to the result
     floatingIndex+=newIndex-skipIndex+matchLen;
-    bool insideString=FALSE; 
+    bool insideString=FALSE;
     int i;
-    for (i=index;i<newIndex;i++) 
-    { 
-      if (txtStr.at(i)=='"') insideString=!insideString; 
+    for (i=index;i<newIndex;i++)
+    {
+      if (txtStr.at(i)=='"') insideString=!insideString;
     }
 
     //printf("floatingIndex=%d strlen=%d autoBreak=%d\n",floatingIndex,strLen,autoBreak);
@@ -2044,16 +2044,16 @@ void linkifyText(const TextGeneratorIntf &out, const Definition *scope,
         out.writeBreak(indentLevel==0 ? 0 : indentLevel+1);
         out.writeString(splitText.right(splitLength-i-offset),keepSpaces);
         floatingIndex=splitLength-i-offset+matchLen;
-      } 
+      }
       else
       {
-        out.writeString(splitText,keepSpaces); 
+        out.writeString(splitText,keepSpaces);
       }
     }
     else
     {
-      //ol.docify(txtStr.mid(skipIndex,newIndex-skipIndex)); 
-      out.writeString(txtStr.mid(skipIndex,newIndex-skipIndex),keepSpaces); 
+      //ol.docify(txtStr.mid(skipIndex,newIndex-skipIndex));
+      out.writeString(txtStr.mid(skipIndex,newIndex-skipIndex),keepSpaces);
     }
     // get word from string
     QCString word=txtStr.mid(newIndex,matchLen);
@@ -2087,7 +2087,7 @@ void linkifyText(const TextGeneratorIntf &out, const Definition *scope,
           }
         }
       }
-      if (!found && (cd || (cd=getClass(matchWord)))) 
+      if (!found && (cd || (cd=getClass(matchWord))))
       {
         //printf("Found class %s\n",cd->name().data());
         // add link to the result
@@ -2131,10 +2131,10 @@ void linkifyText(const TextGeneratorIntf &out, const Definition *scope,
 
       int m = matchWord.findRev("::");
       QCString scopeName;
-      if (scope && 
-          (scope->definitionType()==Definition::TypeClass || 
+      if (scope &&
+          (scope->definitionType()==Definition::TypeClass ||
            scope->definitionType()==Definition::TypeNamespace
-          ) 
+          )
          )
       {
         scopeName=scope->name();
@@ -2146,19 +2146,19 @@ void linkifyText(const TextGeneratorIntf &out, const Definition *scope,
       }
 
       //printf("ScopeName=%s\n",scopeName.data());
-      //if (!found) printf("Trying to link %s in %s\n",word.data(),scopeName.data()); 
-      if (!found && 
-          getDefs(scopeName,matchWord,0,md,cd,fd,nd,gd) && 
-          //(md->isTypedef() || md->isEnumerate() || 
+      //if (!found) printf("Trying to link %s in %s\n",word.data(),scopeName.data());
+      if (!found &&
+          getDefs(scopeName,matchWord,0,md,cd,fd,nd,gd) &&
+          //(md->isTypedef() || md->isEnumerate() ||
           // md->isReference() || md->isVariable()
-          //) && 
-          (external ? md->isLinkable() : md->isLinkableInProject()) 
+          //) &&
+          (external ? md->isLinkable() : md->isLinkableInProject())
          )
       {
         //printf("Found ref scope=%s\n",d?d->name().data():"<global>");
         //ol.writeObjectLink(d->getReference(),d->getOutputFileBase(),
         //                       md->anchor(),word);
-        if (md!=self && (self==0 || md->name()!=self->name())) 
+        if (md!=self && (self==0 || md->name()!=self->name()))
           // name check is needed for overloaded members, where getDefs just returns one
         {
           /* in case of Fortran scop and the variable is a non Fortran variable: don't link,
@@ -2205,7 +2205,7 @@ void writeExample(OutputList &ol,ExampleSDict *ed)
     ol.parseText(exampleLine.mid(index,newIndex-index));
     uint entryIndex = exampleLine.mid(newIndex+1,matchLen-1).toUInt(&ok);
     Example *e=ed->at(entryIndex);
-    if (ok && e) 
+    if (ok && e)
     {
       ol.pushGeneratorState();
       //if (latexEnabled) ol.disable(OutputGenerator::Latex);
@@ -2228,7 +2228,7 @@ void writeExample(OutputList &ol,ExampleSDict *ed)
       ol.popGeneratorState();
     }
     index=newIndex+matchLen;
-  } 
+  }
   ol.parseText(exampleLine.right(exampleLine.length()-index));
   ol.writeString(".");
 }
@@ -2382,7 +2382,7 @@ int filterCRLF(char *buf,int len)
     {
       c = '\n';                // each CR to LF
       if (src<len && buf[src] == '\n')
-        ++src;                 // skip LF just after CR (DOS) 
+        ++src;                 // skip LF just after CR (DOS)
     }
     else if ( c == '\0' && src<len-1) // filter out internal \0 characters, as it will confuse the parser
     {
@@ -2406,8 +2406,8 @@ static QCString getFilterFromList(const char *name,const QStrList &filterList,bo
     if (i_equals!=-1)
     {
       QCString filterPattern = fs.left(i_equals);
-      QRegExp fpat(filterPattern,portable_fileSystemIsCaseSensitive(),TRUE); 
-      if (fpat.match(name)!=-1) 
+      QRegExp fpat(filterPattern,portable_fileSystemIsCaseSensitive(),TRUE);
+      if (fpat.match(name)!=-1)
       {
         // found a match!
         QCString filterName = fs.mid(i_equals+1);
@@ -2475,7 +2475,7 @@ QCString transcodeCharacterStringToUTF8(const QCString &input)
   int outputSize=inputSize*4+1;
   QCString output(outputSize);
   void *cd = portable_iconv_open(outputEncoding,inputEncoding);
-  if (cd==(void *)(-1)) 
+  if (cd==(void *)(-1))
   {
     err("unsupported character conversion: '%s'->'%s'\n",
         inputEncoding.data(),outputEncoding);
@@ -2507,7 +2507,7 @@ QCString transcodeCharacterStringToUTF8(const QCString &input)
 
 /*! reads a file with name \a name and returns it as a string. If \a filter
  *  is TRUE the file will be filtered by any user specified input filter.
- *  If \a name is "-" the string will be read from standard input. 
+ *  If \a name is "-" the string will be read from standard input.
  */
 QCString fileToString(const char *name,bool filter,bool isSourceCode)
 {
@@ -2557,7 +2557,7 @@ QCString fileToString(const char *name,bool filter,bool isSourceCode)
       return buf.data();
     }
   }
-  if (!fileOpened)  
+  if (!fileOpened)
   {
     err("cannot open file `%s' for reading\n",name);
   }
@@ -2615,24 +2615,24 @@ QCString yearToString()
 }
 
 //----------------------------------------------------------------------
-// recursive function that returns the number of branches in the 
+// recursive function that returns the number of branches in the
 // inheritance tree that the base class `bcd' is below the class `cd'
 
 int minClassDistance(const ClassDef *cd,const ClassDef *bcd,int level)
 {
-  if (bcd->categoryOf()) // use class that is being extended in case of 
+  if (bcd->categoryOf()) // use class that is being extended in case of
     // an Objective-C category
   {
     bcd=bcd->categoryOf();
   }
-  if (cd==bcd) return level; 
+  if (cd==bcd) return level;
   if (level==256)
   {
     warn_uncond("class %s seem to have a recursive "
         "inheritance relation!\n",cd->name().data());
     return -1;
   }
-  int m=maxInheritanceDepth; 
+  int m=maxInheritanceDepth;
   if (cd->baseClasses())
   {
     BaseClassListIterator bcli(*cd->baseClasses());
@@ -2649,12 +2649,12 @@ int minClassDistance(const ClassDef *cd,const ClassDef *bcd,int level)
 
 Protection classInheritedProtectionLevel(ClassDef *cd,ClassDef *bcd,Protection prot,int level)
 {
-  if (bcd->categoryOf()) // use class that is being extended in case of 
+  if (bcd->categoryOf()) // use class that is being extended in case of
     // an Objective-C category
   {
     bcd=bcd->categoryOf();
   }
-  if (cd==bcd) 
+  if (cd==bcd)
   {
     goto exit;
   }
@@ -2687,7 +2687,7 @@ exit:
 //  printf("(");
 //  for (;(a=ali.current());++ali)
 //  {
-//    printf("t=`%s' n=`%s' v=`%s' ",a->type.data(),!a->name.isEmpty()>0?a->name.data():"",!a->defval.isEmpty()>0?a->defval.data():""); 
+//    printf("t=`%s' n=`%s' v=`%s' ",a->type.data(),!a->name.isEmpty()>0?a->name.data():"",!a->defval.isEmpty()>0?a->defval.data():"");
 //  }
 //  printf(")");
 //}
@@ -2774,7 +2774,7 @@ static int findScopePattern(const QCString &pattern,const QCString &s,
 {
   int sl=s.length();
   int pl=pattern.length();
-  int sp=0; 
+  int sp=0;
   *len=0;
   while (p<sl)
   {
@@ -2790,10 +2790,10 @@ static int findScopePattern(const QCString &pattern,const QCString &s,
         while (p<sl)
         {
           if (s.at(p)=='<') bc++;
-          else if (s.at(p)=='>') 
+          else if (s.at(p)=='>')
           {
             bc--;
-            if (bc==0) 
+            if (bc==0)
             {
               p++;
               break;
@@ -2845,7 +2845,7 @@ static QCString trimScope(const QCString &name,const QCString &s)
 
     scopeOffset=name.findRev("::",scopeOffset-1);
     result = tmp;
-  } while (scopeOffset>0);   
+  } while (scopeOffset>0);
   //printf("trimScope(name=%s,scope=%s)=%s\n",name.data(),s.data(),result.data());
   return result;
 }
@@ -2869,7 +2869,7 @@ void trimBaseClassScope(BaseClassList *bcl,QCString &s,int level=0)
     }
     //printf("base class `%s'\n",cd->name().data());
     if (cd->baseClasses())
-      trimBaseClassScope(cd->baseClasses(),s,level+1); 
+      trimBaseClassScope(cd->baseClasses(),s,level+1);
   }
 }
 
@@ -2967,7 +2967,7 @@ static void stripIrrelevantString(QCString &target,const QCString &str)
       if (i1==-1 && i2==-1)
       {
         // strip str from target at index i
-        target=target.left(i)+target.right(target.length()-i-l); 
+        target=target.left(i)+target.right(target.length()-i-l);
         changed=TRUE;
         i-=l;
       }
@@ -2996,8 +2996,8 @@ static void stripIrrelevantString(QCString &target,const QCString &str)
 
   \code
   const T param     ->   T param          // not relevant
-  const T& param    ->   const T& param   // const needed               
-  T* const param    ->   T* param         // not relevant                   
+  const T& param    ->   const T& param   // const needed
+  T* const param    ->   T* param         // not relevant
   const T* param    ->   const T* param   // const needed
   \endcode
  */
@@ -3042,15 +3042,15 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
   srcAType.stripPrefix("class ");
   dstAType.stripPrefix("class ");
 
-  // allow distinguishing "const A" from "const B" even though 
-  // from a syntactic point of view they would be two names of the same 
-  // type "const". This is not fool prove of course, but should at least 
+  // allow distinguishing "const A" from "const B" even though
+  // from a syntactic point of view they would be two names of the same
+  // type "const". This is not fool prove of course, but should at least
   // catch the most common cases.
   if ((srcAType=="const" || srcAType=="volatile") && !srcAName.isEmpty())
   {
     srcAType+=" ";
     srcAType+=srcAName;
-  } 
+  }
   if ((dstAType=="const" || dstAType=="volatile") && !dstAName.isEmpty())
   {
     dstAType+=" ";
@@ -3073,11 +3073,11 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
   // strip typename keyword
   if (qstrncmp(srcAType,"typename ",9)==0)
   {
-    srcAType = srcAType.right(srcAType.length()-9); 
+    srcAType = srcAType.right(srcAType.length()-9);
   }
   if (qstrncmp(dstAType,"typename ",9)==0)
   {
-    dstAType = dstAType.right(dstAType.length()-9); 
+    dstAType = dstAType.right(dstAType.length()-9);
   }
 
   srcAType = removeRedundantWhiteSpace(srcAType);
@@ -3094,10 +3094,10 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
     NOMATCH
       return FALSE;
   }
-  if (srcAType!=dstAType) // check if the argument only differs on name 
+  if (srcAType!=dstAType) // check if the argument only differs on name
   {
 
-    // remove a namespace scope that is only in one type 
+    // remove a namespace scope that is only in one type
     // (assuming a using statement was used)
     //printf("Trimming %s<->%s: %s\n",srcAType.data(),dstAType.data(),namespaceName.data());
     //trimNamespaceScope(srcAType,dstAType,namespaceName);
@@ -3119,8 +3119,8 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
         cd=getClass(className);
       if (cd && cd->baseClasses())
       {
-        trimBaseClassScope(cd->baseClasses(),srcAType); 
-        trimBaseClassScope(cd->baseClasses(),dstAType); 
+        trimBaseClassScope(cd->baseClasses(),srcAType);
+        trimBaseClassScope(cd->baseClasses(),dstAType);
       }
       //printf("trimBaseClassScope: `%s' <=> `%s'\n",srcAType.data(),dstAType.data());
     }
@@ -3169,12 +3169,12 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
     }
 
 
-    uint srcPos=0,dstPos=0; 
+    uint srcPos=0,dstPos=0;
     bool equal=TRUE;
     while (srcPos<srcAType.length() && dstPos<dstAType.length() && equal)
     {
       equal=srcAType.at(srcPos)==dstAType.at(dstPos);
-      if (equal) srcPos++,dstPos++; 
+      if (equal) srcPos++,dstPos++;
     }
     uint srcATypeLen=srcAType.length();
     uint dstATypeLen=dstAType.length();
@@ -3182,7 +3182,7 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
     {
       // if nothing matches or the match ends in the middle or at the
       // end of a string then there is no match
-      if (srcPos==0 || dstPos==0) 
+      if (srcPos==0 || dstPos==0)
       {
         NOMATCH
         return FALSE;
@@ -3191,7 +3191,7 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
       {
         //printf("partial match srcPos=%d dstPos=%d!\n",srcPos,dstPos);
         // check if a name if already found -> if no then there is no match
-        if (!srcAName.isEmpty() || !dstAName.isEmpty()) 
+        if (!srcAName.isEmpty() || !dstAName.isEmpty())
         {
           NOMATCH
           return FALSE;
@@ -3199,10 +3199,10 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
         // types only
         while (srcPos<srcATypeLen && isId(srcAType.at(srcPos))) srcPos++;
         while (dstPos<dstATypeLen && isId(dstAType.at(dstPos))) dstPos++;
-        if (srcPos<srcATypeLen || 
+        if (srcPos<srcATypeLen ||
             dstPos<dstATypeLen ||
             (srcPos==srcATypeLen && dstPos==dstATypeLen)
-           ) 
+           )
         {
           NOMATCH
           return FALSE;
@@ -3219,10 +3219,10 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
         // seeing that int is not a name can only be done by looking at the
         // semantics.
 
-        if (srcPos!=srcATypeLen || dstPos!=dstATypeLen) 
-        { 
+        if (srcPos!=srcATypeLen || dstPos!=dstATypeLen)
+        {
           NOMATCH
-          return FALSE; 
+          return FALSE;
         }
       }
     }
@@ -3236,7 +3236,7 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
           return FALSE;
         }
         while (dstPos<dstAType.length() && isId(dstAType.at(dstPos))) dstPos++;
-        if (dstPos!=dstAType.length()) 
+        if (dstPos!=dstAType.length())
         {
           NOMATCH
           return FALSE; // more than a difference in name -> no match
@@ -3246,7 +3246,7 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
       {
         dstPos++;
         while (dstPos<dstAType.length() && isId(dstAType.at(dstPos))) dstPos++;
-        if (dstPos!=dstAType.length() || !srcAName.isEmpty()) 
+        if (dstPos!=dstAType.length() || !srcAName.isEmpty())
         {
           NOMATCH
           return FALSE; // nope not a name -> no match
@@ -3263,7 +3263,7 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
           return FALSE;
         }
         while (srcPos<srcAType.length() && isId(srcAType.at(srcPos))) srcPos++;
-        if (srcPos!=srcAType.length()) 
+        if (srcPos!=srcAType.length())
         {
           NOMATCH
           return FALSE; // more than a difference in name -> no match
@@ -3273,7 +3273,7 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
       {
         srcPos++;
         while (srcPos<srcAType.length() && isId(srcAType.at(srcPos))) srcPos++;
-        if (srcPos!=srcAType.length() || !dstAName.isEmpty()) 
+        if (srcPos!=srcAType.length() || !dstAName.isEmpty())
         {
           NOMATCH
           return FALSE; // nope not a name -> no match
@@ -3288,9 +3288,9 @@ static bool matchArgument(const Argument *srcA,const Argument *dstA,
 
 /*!
  * Matches the arguments list srcAl with the argument list dstAl
- * Returns TRUE if the argument lists are equal. Two argument list are 
- * considered equal if the number of arguments is equal and the types of all 
- * arguments are equal. Furthermore the const and volatile specifiers 
+ * Returns TRUE if the argument lists are equal. Two argument list are
+ * considered equal if the number of arguments is equal and the types of all
+ * arguments are equal. Furthermore the const and volatile specifiers
  * stored in the list should be equal.
  */
 bool matchArguments(ArgumentList *srcAl,ArgumentList *dstAl,
@@ -3303,7 +3303,7 @@ bool matchArguments(ArgumentList *srcAl,ArgumentList *dstAl,
 
   // strip template specialization from class name if present
   //int til=className.find('<'),tir=className.find('>');
-  //if (til!=-1 && tir!=-1 && tir>til) 
+  //if (til!=-1 && tir!=-1 && tir>til)
   //{
   //  className=className.left(til)+className.right(className.length()-tir-1);
   //}
@@ -3332,7 +3332,7 @@ bool matchArguments(ArgumentList *srcAl,ArgumentList *dstAl,
   }
 
   // handle special case with void argument
-  if ( srcAl->count()==0 && dstAl->count()==1 && 
+  if ( srcAl->count()==0 && dstAl->count()==1 &&
       dstAl->getFirst()->type=="void" )
   { // special case for finding match between func() and func(void)
     Argument *a=new Argument;
@@ -3359,7 +3359,7 @@ bool matchArguments(ArgumentList *srcAl,ArgumentList *dstAl,
 
   if (checkCV)
   {
-    if (srcAl->constSpecifier != dstAl->constSpecifier) 
+    if (srcAl->constSpecifier != dstAl->constSpecifier)
     {
       NOMATCH
       return FALSE; // one member is const, the other not -> no match
@@ -3382,7 +3382,7 @@ bool matchArguments(ArgumentList *srcAl,ArgumentList *dstAl,
   ArgumentListIterator srcAli(*srcAl),dstAli(*dstAl);
   Argument *srcA,*dstA;
   for (;(srcA=srcAli.current()) && (dstA=dstAli.current());++srcAli,++dstAli)
-  { 
+  {
     if (!matchArgument(srcA,dstA,className,namespaceName,
           usingNamespaces,usingClasses))
     {
@@ -3391,7 +3391,7 @@ bool matchArguments(ArgumentList *srcAl,ArgumentList *dstAl,
     }
   }
   MATCH
-  return TRUE; // all arguments match 
+  return TRUE; // all arguments match
 }
 
 #endif
@@ -3400,7 +3400,7 @@ bool matchArguments(ArgumentList *srcAl,ArgumentList *dstAl,
 static QCString resolveSymbolName(FileDef *fs,Definition *symbol,QCString &templSpec)
 {
   ASSERT(symbol!=0);
-  if (symbol->definitionType()==Definition::TypeMember && 
+  if (symbol->definitionType()==Definition::TypeMember &&
       ((MemberDef*)symbol)->isTypedef()) // if symbol is a typedef then try
     // to resolve it
   {
@@ -3437,11 +3437,11 @@ static QCString extractCanonicalType(Definition *d,FileDef *fs,QCString type);
 
 QCString getCanonicalTemplateSpec(Definition *d,FileDef *fs,const QCString& spec)
 {
-  
+
   QCString templSpec = spec.stripWhiteSpace();
   // this part had been commented out before... but it is needed to match for instance
   // std::list<std::string> against list<string> so it is now back again!
-  if (!templSpec.isEmpty() && templSpec.at(0) == '<') 
+  if (!templSpec.isEmpty() && templSpec.at(0) == '<')
   {
     templSpec = "< " + extractCanonicalType(d,fs,templSpec.right(templSpec.length()-1).stripWhiteSpace());
   }
@@ -3463,7 +3463,7 @@ static QCString getCanonicalTypeForIdentifier(
 
   QCString symName,result,templSpec,tmpName;
   //DefinitionList *defList=0;
-  if (tSpec && !tSpec->isEmpty()) 
+  if (tSpec && !tSpec->isEmpty())
     templSpec = stripDeclKeywords(getCanonicalTemplateSpec(d,fs,*tSpec));
 
   if (word.findRev("::")!=-1 && !(tmpName=stripScope(word)).isEmpty())
@@ -3625,7 +3625,7 @@ static QCString extractCanonicalType(Definition *d,FileDef *fs,QCString type)
     QCString ct = getCanonicalTypeForIdentifier(d,fs,word,&templSpec);
 
     // in case the ct is empty it means that "word" represents scope "d"
-    // and this does not need to be added to the canonical 
+    // and this does not need to be added to the canonical
     // type (it is redundant), so/ we skip it. This solves problem 589616.
     if (ct.isEmpty() && type.mid(p,2)=="::")
     {
@@ -3639,7 +3639,7 @@ static QCString extractCanonicalType(Definition *d,FileDef *fs,QCString type)
     //    word.data(),templSpec.data(),canType.data(),ct.data());
     if (!templSpec.isEmpty()) // if we didn't use up the templSpec already
                               // (i.e. type is not a template specialization)
-                              // then resolve any identifiers inside. 
+                              // then resolve any identifiers inside.
     {
       static QRegExp re("[a-z_A-Z\\x80-\\xFF][a-z_A-Z0-9\\x80-\\xFF]*");
       int tp=0,tl,ti;
@@ -3667,11 +3667,11 @@ static QCString extractCanonicalArgType(Definition *d,FileDef *fs,const Argument
   QCString type = arg->type.stripWhiteSpace();
   QCString name = arg->name;
   //printf("----- extractCanonicalArgType(type=%s,name=%s)\n",type.data(),name.data());
-  if ((type=="const" || type=="volatile") && !name.isEmpty()) 
+  if ((type=="const" || type=="volatile") && !name.isEmpty())
   { // name is part of type => correct
     type+=" ";
     type+=name;
-  } 
+  }
   if (name=="const" || name=="volatile")
   { // name is part of type => correct
     if (!type.isEmpty()) type+=" ";
@@ -3771,7 +3771,7 @@ bool matchArguments2(Definition *srcScope,FileDef *srcFileScope,ArgumentList *sr
   }
 
   // handle special case with void argument
-  if ( srcAl->count()==0 && dstAl->count()==1 && 
+  if ( srcAl->count()==0 && dstAl->count()==1 &&
       dstAl->getFirst()->type=="void" )
   { // special case for finding match between func() and func(void)
     Argument *a=new Argument;
@@ -3798,7 +3798,7 @@ bool matchArguments2(Definition *srcScope,FileDef *srcFileScope,ArgumentList *sr
 
   if (checkCV)
   {
-    if (srcAl->constSpecifier != dstAl->constSpecifier) 
+    if (srcAl->constSpecifier != dstAl->constSpecifier)
     {
       NOMATCH
       return FALSE; // one member is const, the other not -> no match
@@ -3821,7 +3821,7 @@ bool matchArguments2(Definition *srcScope,FileDef *srcFileScope,ArgumentList *sr
   ArgumentListIterator srcAli(*srcAl),dstAli(*dstAl);
   Argument *srcA,*dstA;
   for (;(srcA=srcAli.current()) && (dstA=dstAli.current());++srcAli,++dstAli)
-  { 
+  {
     if (!matchArgument2(srcScope,srcFileScope,srcA,
           dstScope,dstFileScope,dstA)
        )
@@ -3831,7 +3831,7 @@ bool matchArguments2(Definition *srcScope,FileDef *srcFileScope,ArgumentList *sr
     }
   }
   MATCH
-  return TRUE; // all arguments match 
+  return TRUE; // all arguments match
 }
 
 
@@ -3988,11 +3988,11 @@ static void findMembersWithSpecificName(MemberName *mn,
     //printf("  md->name()=`%s' md->args=`%s' fd=%p gd=%p current=%p ref=%s\n",
     //    md->name().data(),args,fd,gd,currentFile,md->getReference().data());
     if (
-        ((gd && gd->isLinkable()) || (fd && fd->isLinkable()) || md->isReference()) && 
+        ((gd && gd->isLinkable()) || (fd && fd->isLinkable()) || md->isReference()) &&
         md->getNamespaceDef()==0 && md->isLinkable() &&
-        (!checkStatics || (!md->isStatic() && !md->isDefine()) || 
+        (!checkStatics || (!md->isStatic() && !md->isDefine()) ||
          currentFile==0 || fd==currentFile) // statics must appear in the same file
-       ) 
+       )
     {
       bool match=TRUE;
       ArgumentList *argList=0;
@@ -4004,10 +4004,10 @@ static void findMembersWithSpecificName(MemberName *mn,
         match=matchArguments2(
             md->getOuterScope(),fd,mdAl,
             Doxygen::globalScope,fd,argList,
-            checkCV); 
+            checkCV);
         delete argList; argList=0;
       }
-      if (match && (forceTagFile==0 || md->getReference()==forceTagFile)) 
+      if (match && (forceTagFile==0 || md->getReference()==forceTagFile))
       {
         //printf("Found match!\n");
         members.append(md);
@@ -4021,17 +4021,17 @@ static void findMembersWithSpecificName(MemberName *mn,
  * memberName may also include a (partial) scope to indicate the scope
  * in which the member is located.
  *
- * The parameter `scName' is a string representing the name of the scope in 
+ * The parameter `scName' is a string representing the name of the scope in
  * which the link was found.
  *
- * In case of a function args contains a string representation of the 
- * argument list. Passing 0 means the member has no arguments. 
+ * In case of a function args contains a string representation of the
+ * argument list. Passing 0 means the member has no arguments.
  * Passing "()" means any argument list will do, but "()" is preferred.
  *
  * The function returns TRUE if the member is known and documented or
  * FALSE if it is not.
- * If TRUE is returned parameter `md' contains a pointer to the member 
- * definition. Furthermore exactly one of the parameter `cd', `nd', or `fd' 
+ * If TRUE is returned parameter `md' contains a pointer to the member
+ * definition. Furthermore exactly one of the parameter `cd', `nd', or `fd'
  * will be non-zero:
  *   - if `cd' is non zero, the member was found in a class pointed to by cd.
  *   - if `nd' is non zero, the member was found in a namespace pointed to by nd.
@@ -4039,12 +4039,12 @@ static void findMembersWithSpecificName(MemberName *mn,
  *     file fd.
  */
 bool getDefs(const QCString &scName,
-             const QCString &mbName, 
+             const QCString &mbName,
              const char *args,
-             MemberDef *&md, 
-             ClassDef *&cd, 
-             FileDef *&fd, 
-             NamespaceDef *&nd, 
+             MemberDef *&md,
+             ClassDef *&cd,
+             FileDef *&fd,
+             NamespaceDef *&nd,
              GroupDef *&gd,
              bool forceEmptyScope,
              FileDef *currentFile,
@@ -4064,12 +4064,12 @@ bool getDefs(const QCString &scName,
 
   int is,im=0,pm=0;
   // strip common part of the scope from the scopeName
-  while ((is=scopeName.findRev("::"))!=-1 && 
+  while ((is=scopeName.findRev("::"))!=-1 &&
          (im=memberName.find("::",pm))!=-1 &&
           (scopeName.right(scopeName.length()-is-2)==memberName.mid(pm,im-pm))
         )
   {
-    scopeName=scopeName.left(is); 
+    scopeName=scopeName.left(is);
     pm=im+2;
   }
   //printf("result after scope corrections scope=%s name=%s\n",
@@ -4079,11 +4079,11 @@ bool getDefs(const QCString &scName,
   QCString mScope;
   if (memberName.left(9)!="operator " && // treat operator conversion methods
       // as a special case
-      (im=memberName.findRev("::"))!=-1 && 
+      (im=memberName.findRev("::"))!=-1 &&
       im<(int)memberName.length()-2 // not A::
      )
   {
-    mScope=memberName.left(im); 
+    mScope=memberName.left(im);
     mName=memberName.right(memberName.length()-im-2);
   }
 
@@ -4122,13 +4122,13 @@ bool getDefs(const QCString &scName,
       //printf("Trying class scope %s: fcd=%p tmd=%p\n",className.data(),fcd,tmd);
       // todo: fill in correct fileScope!
       if (fcd &&  // is it a documented class
-          fcd->isLinkable() 
+          fcd->isLinkable()
          )
       {
         //printf("  Found fcd=%p\n",fcd);
         MemberNameIterator mmli(*mn);
         MemberDef *mmd;
-        int mdist=maxInheritanceDepth; 
+        int mdist=maxInheritanceDepth;
         ArgumentList *argList=0;
         if (args)
         {
@@ -4140,11 +4140,11 @@ bool getDefs(const QCString &scName,
           if (!mmd->isStrongEnumValue())
           {
             ArgumentList *mmdAl = mmd->argumentList();
-            bool match=args==0 || 
+            bool match=args==0 ||
               matchArguments2(mmd->getOuterScope(),mmd->getFileDef(),mmdAl,
                   fcd,fcd->getFileDef(),argList,
                   checkCV
-                  );  
+                  );
             //printf("match=%d\n",match);
             if (match)
             {
@@ -4191,9 +4191,9 @@ bool getDefs(const QCString &scName,
           }
         }
         //printf("  >Succes=%d\n",mdist<maxInheritanceDepth);
-        if (mdist<maxInheritanceDepth) 
+        if (mdist<maxInheritanceDepth)
         {
-          if (!md->isLinkable() || md->isStrongEnumValue()) 
+          if (!md->isLinkable() || md->isStrongEnumValue())
           {
             md=0; // avoid returning things we cannot link to
             cd=0;
@@ -4206,7 +4206,7 @@ bool getDefs(const QCString &scName,
             return TRUE; /* found match */
           }
         }
-      } 
+      }
       if (tmd && tmd->isEnumerate() && tmd->isStrong()) // scoped enum
       {
         //printf("Found scoped enum!\n");
@@ -4310,7 +4310,7 @@ bool getDefs(const QCString &scName,
         namespaceName=mScope.copy();
       }
       //printf("Trying namespace %s\n",namespaceName.data());
-      if (!namespaceName.isEmpty() && 
+      if (!namespaceName.isEmpty() &&
           (fnd=Doxygen::namespaceSDict->find(namespaceName)) &&
           fnd->isLinkable()
          )
@@ -4328,7 +4328,7 @@ bool getDefs(const QCString &scName,
           if (emd && emd->isStrong())
           {
             //printf("yes match %s<->%s!\n",mScope.data(),emd->localName().data());
-            if (emd->getNamespaceDef()==fnd && 
+            if (emd->getNamespaceDef()==fnd &&
                 rightScopeMatch(mScope,emd->localName()))
             {
               //printf("found it!\n");
@@ -4355,7 +4355,7 @@ bool getDefs(const QCString &scName,
               match=matchArguments2(
                   mmd->getOuterScope(),mmd->getFileDef(),mmdAl,
                   fnd,mmd->getFileDef(),argList,
-                  checkCV); 
+                  checkCV);
             }
             if (match)
             {
@@ -4369,8 +4369,8 @@ bool getDefs(const QCString &scName,
             }
           }
         }
-        if (!found && args && !qstrcmp(args,"()")) 
-          // no exact match found, but if args="()" an arbitrary 
+        if (!found && args && !qstrcmp(args,"()"))
+          // no exact match found, but if args="()" an arbitrary
           // member will do
         {
           for (mmli.toFirst();((mmd=mmli.current()) && !found);++mmli)
@@ -4383,9 +4383,9 @@ bool getDefs(const QCString &scName,
             }
           }
         }
-        if (found) 
+        if (found)
         {
-          if (!md->isLinkable()) 
+          if (!md->isLinkable())
           {
             md=0; // avoid returning things we cannot link to
             nd=0;
@@ -4479,7 +4479,7 @@ bool getDefs(const QCString &scName,
           QListIterator<MemberDef> mit(members);
           for (mit.toFirst();(md=mit.current());++mit)
           {
-            if (md->getFileDef() && md->getFileDef()->name() == currentFile->name()) 
+            if (md->getFileDef() && md->getFileDef()->name() == currentFile->name())
             {
               break; // found match in the current file
             }
@@ -4494,7 +4494,7 @@ bool getDefs(const QCString &scName,
           md=members.getLast();
         }
       }
-      if (md && (md->getEnumScope()==0 || !md->getEnumScope()->isStrong())) 
+      if (md && (md->getEnumScope()==0 || !md->getEnumScope()->isStrong()))
            // found a matching global member, that is not a scoped enum value (or uniquely matches)
       {
         fd=md->getFileDef();
@@ -4512,14 +4512,14 @@ bool getDefs(const QCString &scName,
 
 /*!
  * Searches for a scope definition given its name as a string via parameter
- * `scope`. 
+ * `scope`.
  *
- * The parameter `docScope` is a string representing the name of the scope in 
+ * The parameter `docScope` is a string representing the name of the scope in
  * which the `scope` string was found.
  *
  * The function returns TRUE if the scope is known and documented or
  * FALSE if it is not.
- * If TRUE is returned exactly one of the parameter `cd`, `nd` 
+ * If TRUE is returned exactly one of the parameter `cd`, `nd`
  * will be non-zero:
  *   - if `cd` is non zero, the scope was a class pointed to by cd.
  *   - if `nd` is non zero, the scope was a namespace pointed to by nd.
@@ -4536,7 +4536,7 @@ static bool getScopeDefs(const char *docScope,const char *scope,
   bool explicitGlobalScope=FALSE;
   if (scopeName.at(0)==':' && scopeName.at(1)==':')
   {
-    scopeName=scopeName.right(scopeName.length()-2);  
+    scopeName=scopeName.right(scopeName.length()-2);
     explicitGlobalScope=TRUE;
   }
 
@@ -4553,11 +4553,11 @@ static bool getScopeDefs(const char *docScope,const char *scope,
          //(cd=getClass(fullName+"-g"))       // C# generic
         ) && cd->isLinkable())
     {
-      return TRUE; // class link written => quit 
+      return TRUE; // class link written => quit
     }
     else if ((nd=Doxygen::namespaceSDict->find(fullName)) && nd->isLinkable())
     {
-      return TRUE; // namespace link written => quit 
+      return TRUE; // namespace link written => quit
     }
     if (scopeOffset==0)
     {
@@ -4578,10 +4578,10 @@ static bool isLowerCase(QCString &s)
   if (p==0) return TRUE;
   int c;
   while ((c=*p++)) if (!islower(c)) return FALSE;
-  return TRUE; 
+  return TRUE;
 }
 
-/*! Returns an object to reference to given its name and context 
+/*! Returns an object to reference to given its name and context
  *  @post return value TRUE implies *resContext!=0 or *resMember!=0
  */
 bool resolveRef(/* in */  const char *scName,
@@ -4625,10 +4625,10 @@ bool resolveRef(/* in */  const char *scName,
     ClassDef *cd=0;
     NamespaceDef *nd=0;
 
-    // the following if() was commented out for releases in the range 
+    // the following if() was commented out for releases in the range
     // 1.5.2 to 1.6.1, but has been restored as a result of bug report 594787.
     if (!inSeeBlock && scopePos==-1 && isLowerCase(tsName))
-    { // link to lower case only name => do not try to autolink 
+    { // link to lower case only name => do not try to autolink
       return FALSE;
     }
 
@@ -4648,7 +4648,7 @@ bool resolveRef(/* in */  const char *scName,
       }
       return TRUE;
     }
-    else if (scName==fullName || (!inSeeBlock && scopePos==-1)) 
+    else if (scName==fullName || (!inSeeBlock && scopePos==-1))
       // nothing to link => output plain text
     {
       //printf("found scName=%s fullName=%s scName==fullName=%d "
@@ -4668,7 +4668,7 @@ bool resolveRef(/* in */  const char *scName,
   if (bracePos!=-1) argsStr=fullName.right(fullName.length()-bracePos);
 
   // strip template specifier
-  // TODO: match against the correct partial template instantiation 
+  // TODO: match against the correct partial template instantiation
   int templPos=nameStr.find('<');
   bool tryUnspecializedVersion = FALSE;
   if (templPos!=-1 && nameStr.find("operator")==-1)
@@ -4708,11 +4708,11 @@ bool resolveRef(/* in */  const char *scName,
      )
   {
     //printf("after getDefs checkScope=%d nameStr=%s cd=%p nd=%p\n",checkScope,nameStr.data(),cd,nd);
-    if (checkScope && md && md->getOuterScope()==Doxygen::globalScope && 
+    if (checkScope && md && md->getOuterScope()==Doxygen::globalScope &&
         !md->isStrongEnumValue() &&
         (!scopeStr.isEmpty() || nameStr.find("::")>0))
     {
-      // we did find a member, but it is a global one while we were explicitly 
+      // we did find a member, but it is a global one while we were explicitly
       // looking for a scoped variable. See bug 616387 for an example why this check is needed.
       // note we do need to support autolinking to "::symbol" hence the >0
       //printf("not global member!\n");
@@ -4791,20 +4791,20 @@ QCString linkToText(SrcLangExt lang,const char *link,bool isFileName)
 #if 0
 /*
  * generate a reference to a class, namespace or member.
- * `scName' is the name of the scope that contains the documentation 
+ * `scName' is the name of the scope that contains the documentation
  * string that is returned.
  * `name' is the name that we want to link to.
  * `name' may have five formats:
  *    1) "ScopeName"
- *    2) "memberName()"    one of the (overloaded) function or define 
+ *    2) "memberName()"    one of the (overloaded) function or define
  *                         with name memberName.
- *    3) "memberName(...)" a specific (overloaded) function or define 
+ *    3) "memberName(...)" a specific (overloaded) function or define
  *                         with name memberName
  *    4) "::name           a global variable or define
  *    4) "\#memberName     member variable, global variable or define
- *    5) ("ScopeName::")+"memberName()" 
- *    6) ("ScopeName::")+"memberName(...)" 
- *    7) ("ScopeName::")+"memberName" 
+ *    5) ("ScopeName::")+"memberName()"
+ *    6) ("ScopeName::")+"memberName(...)"
+ *    7) ("ScopeName::")+"memberName"
  * instead of :: the \# symbol may also be used.
  */
 
@@ -4966,7 +4966,7 @@ bool resolveLink(/* in */ const char *scName,
 
 //----------------------------------------------------------------------
 // General function that generates the HTML code for a reference to some
-// file, class or member from text `lr' within the context of class `clName'. 
+// file, class or member from text `lr' within the context of class `clName'.
 // This link has the text 'lt' (if not 0), otherwise `lr' is used as a
 // basis for the link's text.
 // returns TRUE if a link could be generated.
@@ -4984,14 +4984,14 @@ bool generateLink(OutputDocInterface &od,const char *clName,
     if (compound) // link to compound
     {
       if (lt==0 && anchor.isEmpty() &&                      /* compound link */
-          compound->definitionType()==Definition::TypeGroup /* is group */ 
+          compound->definitionType()==Definition::TypeGroup /* is group */
          )
       {
         linkText=((GroupDef *)compound)->groupTitle(); // use group's title as link
       }
       else if (compound->definitionType()==Definition::TypeFile)
       {
-        linkText=linkToText(compound->getLanguage(),lt,TRUE); 
+        linkText=linkToText(compound->getLanguage(),lt,TRUE);
       }
       od.writeObjectLink(compound->getReference(),
           compound->getOutputFileBase(),anchor,linkText);
@@ -5020,12 +5020,12 @@ void generateFileRef(OutputDocInterface &od,const char *name,const char *text)
   //FileInfo *fi;
   FileDef *fd;
   bool ambig;
-  if ((fd=findFileDef(Doxygen::inputNameDict,name,ambig)) && 
-      fd->isLinkable()) 
+  if ((fd=findFileDef(Doxygen::inputNameDict,name,ambig)) &&
+      fd->isLinkable())
     // link to documented input file
     od.writeObjectLink(fd->getReference(),fd->getOutputFileBase(),0,linkText);
   else
-    od.docify(linkText); 
+    od.docify(linkText);
 }
 
 //----------------------------------------------------------------------
@@ -5102,7 +5102,7 @@ FileDef *findFileDef(const FileNameDict *fnDict,const char *n,bool &ambig)
   if (slashPos!=-1)
   {
     path=name.left(slashPos+1);
-    name=name.right(name.length()-slashPos-1); 
+    name=name.right(name.length()-slashPos-1);
     //printf("path=%s name=%s\n",path.data(),name.data());
   }
   if (name.isEmpty()) goto exit;
@@ -5135,10 +5135,10 @@ FileDef *findFileDef(const FileNameDict *fnDict,const char *n,bool &ambig)
       for (fni.toFirst();(fd=fni.current());++fni)
       {
         QCString fdStripPath = stripFromIncludePath(fd->getPath());
-        if (path.isEmpty() || fdStripPath.right(pathStripped.length())==pathStripped) 
-        { 
-          count++; 
-          lastMatch=fd; 
+        if (path.isEmpty() || fdStripPath.right(pathStripped.length())==pathStripped)
+        {
+          count++;
+          lastMatch=fd;
         }
       }
       //printf(">1 ===> add to cache %p\n",fd);
@@ -5172,7 +5172,7 @@ QCString showFileDefMatches(const FileNameDict *fnDict,const char *n)
   if (slashPos!=-1)
   {
     path=name.left(slashPos+1);
-    name=name.right(name.length()-slashPos-1); 
+    name=name.right(name.length()-slashPos-1);
   }
   FileName *fn;
   if ((fn=(*fnDict)[name]))
@@ -5248,7 +5248,7 @@ QCString substituteKeywords(const QCString &s,const char *title,
 /*! Returns the character index within \a name of the first prefix
  *  in Config_getList(IGNORE_PREFIX) that matches \a name at the left hand side,
  *  or zero if no match was found
- */ 
+ */
 int getPrefixIndex(const QCString &name)
 {
   if (name.isEmpty()) return 0;
@@ -5296,7 +5296,7 @@ bool classHasVisibleChildren(ClassDef *cd)
     if (cd->baseClasses()==0) return FALSE;
     bcl=cd->baseClasses();
   }
-  else 
+  else
   {
     if (cd->subClasses()==0) return FALSE;
     bcl=cd->subClasses();
@@ -5384,7 +5384,7 @@ QCString escapeCharsInString(const char *name,bool allowDots,bool allowUnderscor
       case '$': growBuf.addStr("_0B"); break;
       case '\\': growBuf.addStr("_0C"); break;
       case '@': growBuf.addStr("_0D"); break;
-      default: 
+      default:
                 if (c<0)
                 {
                   char ids[5];
@@ -5446,7 +5446,7 @@ QCString escapeCharsInString(const char *name,bool allowDots,bool allowUnderscor
                 else
                 {
                   growBuf.addChar('_');
-                  growBuf.addChar(tolower(c)); 
+                  growBuf.addChar(tolower(c));
                 }
                 break;
     }
@@ -5456,7 +5456,7 @@ QCString escapeCharsInString(const char *name,bool allowDots,bool allowUnderscor
 }
 
 /*! This function determines the file name on disk of an item
- *  given its name, which could be a class name with template 
+ *  given its name, which could be a class name with template
  *  arguments, so special characters need to be escaped.
  */
 QCString convertNameToFile(const char *name,bool allowDots,bool allowUnderscore)
@@ -5482,7 +5482,7 @@ QCString convertNameToFile(const char *name,bool allowDots,bool allowUnderscore)
     {
       num = *value;
     }
-    result.sprintf("a%05d",num); 
+    result.sprintf("a%05d",num);
   }
   else // long names
   {
@@ -5495,17 +5495,17 @@ QCString convertNameToFile(const char *name,bool allowDots,bool allowUnderscore)
       QCString sigStr(33);
       MD5Buffer((const unsigned char *)result.data(),resultLen,md5_sig);
       MD5SigToString(md5_sig,sigStr.rawData(),33);
-      result=result.left(128-32)+sigStr; 
+      result=result.left(128-32)+sigStr;
     }
   }
   if (createSubdirs)
   {
     int l1Dir=0,l2Dir=0;
 
-#if MAP_ALGO==ALGO_COUNT 
+#if MAP_ALGO==ALGO_COUNT
     // old algorithm, has the problem that after regeneration the
     // output can be located in a different dir.
-    if (Doxygen::htmlDirMap==0) 
+    if (Doxygen::htmlDirMap==0)
     {
       Doxygen::htmlDirMap=new QDict<int>(100003);
       Doxygen::htmlDirMap->setAutoDelete(TRUE);
@@ -5514,7 +5514,7 @@ QCString convertNameToFile(const char *name,bool allowDots,bool allowUnderscore)
     int *dirNum = Doxygen::htmlDirMap->find(result);
     if (dirNum==0) // new name
     {
-      Doxygen::htmlDirMap->insert(result,new int(curDirNum)); 
+      Doxygen::htmlDirMap->insert(result,new int(curDirNum));
       l1Dir = (curDirNum)&0xf;    // bits 0-3
       l2Dir = (curDirNum>>4)&0xff; // bits 4-11
       curDirNum++;
@@ -5598,7 +5598,7 @@ void extractNamespaceName(const QCString &scopeName,
     goto done;
   }
   p=clName.length()-2;
-  while (p>=0 && (i=clName.findRev("::",p))!=-1) 
+  while (p>=0 && (i=clName.findRev("::",p))!=-1)
     // see if the first part is a namespace (and not a class)
   {
     //printf("Trying %s\n",clName.left(i).data());
@@ -5608,7 +5608,7 @@ void extractNamespaceName(const QCString &scopeName,
       namespaceName=nd->name().copy();
       className=clName.right(clName.length()-i-2);
       goto done;
-    } 
+    }
     p=i-2; // try a smaller piece of the scope
   }
   //printf("not found!\n");
@@ -5641,16 +5641,16 @@ QCString insertTemplateSpecifierInScope(const QCString &scope,const QCString &te
     int si,pi=0;
     ClassDef *cd=0;
     while (
-        (si=scope.find("::",pi))!=-1 && !getClass(scope.left(si)+templ) && 
-        ((cd=getClass(scope.left(si)))==0 || cd->templateArguments()==0) 
-        ) 
-    { 
-      //printf("Tried `%s'\n",(scope.left(si)+templ).data()); 
-      pi=si+2; 
+        (si=scope.find("::",pi))!=-1 && !getClass(scope.left(si)+templ) &&
+        ((cd=getClass(scope.left(si)))==0 || cd->templateArguments()==0)
+        )
+    {
+      //printf("Tried `%s'\n",(scope.left(si)+templ).data());
+      pi=si+2;
     }
     if (si==-1) // not nested => append template specifier
     {
-      result+=templ; 
+      result+=templ;
     }
     else // nested => insert template specifier before after first class name
     {
@@ -5679,7 +5679,7 @@ QCString stripScope(const char *name)
     char c=result.at(p);
     switch (c)
     {
-      case ':': 
+      case ':':
         //printf("stripScope(%s)=%s\n",name,result.right(l-p-1).data());
         return result.right(l-p-1);
       case '>':
@@ -5694,7 +5694,7 @@ QCString stripScope(const char *name)
           {
             case '>': count++; break;
             case '<': count--; if (count<=0) done=TRUE; break;
-            default: 
+            default:
                       //printf("c=%c count=%d\n",c,count);
                       break;
           }
@@ -5728,7 +5728,7 @@ QCString stripScope(const char *name)
       char c=result.at(p);
       switch (c)
       {
-        case ':': 
+        case ':':
           // only exit in the case of ::
           //printf("stripScope(%s)=%s\n",name,result.right(l-p-1).data());
           if (p>0 && result.at(p-1)==':') return result.right(l-p-1);
@@ -5755,10 +5755,10 @@ QCString stripScope(const char *name)
               c=result.at(p--);
               switch (c)
               {
-                case '>': 
-                  count++; 
+                case '>':
+                  count++;
                   break;
-                case '<': 
+                case '<':
                   if (p>0)
                   {
                     if (result.at(p-1) == '<') // skip << operator
@@ -5767,10 +5767,10 @@ QCString stripScope(const char *name)
                       break;
                     }
                   }
-                  count--; 
+                  count--;
                   foundMatch = count==0;
                   break;
-                default: 
+                default:
                   //printf("c=%c count=%d\n",c,count);
                   break;
               }
@@ -5837,7 +5837,7 @@ QCString convertToXML(const char *s)
       case '<':  growBuf.addStr("&lt;");   break;
       case '>':  growBuf.addStr("&gt;");   break;
       case '&':  growBuf.addStr("&amp;");  break;
-      case '\'': growBuf.addStr("&apos;"); break; 
+      case '\'': growBuf.addStr("&apos;"); break;
       case '"':  growBuf.addStr("&quot;"); break;
       case  1: case  2: case  3: case  4: case  5: case  6: case  7: case  8:
       case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18:
@@ -5886,10 +5886,10 @@ QCString convertToHtml(const char *s,bool keepEntities)
                  }
                  else
                  {
-                   growBuf.addStr("&amp;");  
+                   growBuf.addStr("&amp;");
                  }
                  break;
-      case '\'': growBuf.addStr("&#39;");  break; 
+      case '\'': growBuf.addStr("&#39;");  break;
       case '"':  growBuf.addStr("&quot;"); break;
       default:   growBuf.addChar(c);       break;
     }
@@ -6111,11 +6111,11 @@ int extractClassNameFromType(const QCString &type,int &pos,QCString &name,QCStri
         int brCount=1;
         while (te<typeLen && brCount!=0)
         {
-          if (type.at(te)=='<') 
+          if (type.at(te)=='<')
           {
             if (te<typeLen-1 && type.at(te+1)=='<') te++; else brCount++;
           }
-          if (type.at(te)=='>') 
+          if (type.at(te)=='>')
           {
             if (te<typeLen-1 && type.at(te+1)=='>') te++; else brCount--;
           }
@@ -6123,7 +6123,7 @@ int extractClassNameFromType(const QCString &type,int &pos,QCString &name,QCStri
         }
       }
       name = type.mid(i,l);
-      if (te>ts) 
+      if (te>ts)
       {
         templSpec = type.mid(ts,te-ts),tl+=te-ts;
         pos=i+l+tl;
@@ -6255,29 +6255,29 @@ QCString substituteTemplateArgumentsInString(
         if (formArg->name==n && actArg && !actArg->type.isEmpty()) // base class is a template argument
         {
           // replace formal argument with the actual argument of the instance
-          if (!leftScopeMatch(actArg->type,n)) 
-            // the scope guard is to prevent recursive lockup for 
-            // template<class A> class C : public<A::T>, 
-            // where A::T would become A::T::T here, 
+          if (!leftScopeMatch(actArg->type,n))
+            // the scope guard is to prevent recursive lockup for
+            // template<class A> class C : public<A::T>,
+            // where A::T would become A::T::T here,
             // since n==A and actArg->type==A::T
             // see bug595833 for an example
           {
             if (actArg->name.isEmpty())
             {
-              result += actArg->type+" "; 
+              result += actArg->type+" ";
               found=TRUE;
             }
-            else 
+            else
               // for case where the actual arg is something like "unsigned int"
               // the "int" part is in actArg->name.
             {
-              result += actArg->type+" "+actArg->name+" "; 
+              result += actArg->type+" "+actArg->name+" ";
               found=TRUE;
             }
           }
         }
-        else if (formArg->name==n && 
-                 actArg==0 && 
+        else if (formArg->name==n &&
+                 actArg==0 &&
                  !formArg->defval.isEmpty() &&
                  formArg->defval!=name /* to prevent recursion */
             )
@@ -6286,8 +6286,8 @@ QCString substituteTemplateArgumentsInString(
           found=TRUE;
         }
       }
-      else if (formArg->name==n && 
-               actArg==0 && 
+      else if (formArg->name==n &&
+               actArg==0 &&
                !formArg->defval.isEmpty() &&
                formArg->defval!=name /* to prevent recursion */
               )
@@ -6296,7 +6296,7 @@ QCString substituteTemplateArgumentsInString(
         found=TRUE;
       }
     }
-    if (!found) 
+    if (!found)
     {
       result += n;
     }
@@ -6308,7 +6308,7 @@ QCString substituteTemplateArgumentsInString(
   return result.stripWhiteSpace();
 }
 
-/*! Makes a deep copy of the list of argument lists \a srcLists. 
+/*! Makes a deep copy of the list of argument lists \a srcLists.
  *  Will allocate memory, that is owned by the caller.
  */
 QList<ArgumentList> *copyArgumentLists(const QList<ArgumentList> *srcLists)
@@ -6325,12 +6325,12 @@ QList<ArgumentList> *copyArgumentLists(const QList<ArgumentList> *srcLists)
   return dstLists;
 }
 
-/*! Strips template specifiers from scope \a fullName, except those 
- *  that make up specialized classes. The switch \a parentOnly 
- *  determines whether or not a template "at the end" of a scope 
- *  should be considered, e.g. with \a parentOnly is \c TRUE, A<T>::B<S> will 
- *  try to strip \<T\> and not \<S\>, while \a parentOnly is \c FALSE will 
- *  strip both unless A<T> or B<S> are specialized template classes. 
+/*! Strips template specifiers from scope \a fullName, except those
+ *  that make up specialized classes. The switch \a parentOnly
+ *  determines whether or not a template "at the end" of a scope
+ *  should be considered, e.g. with \a parentOnly is \c TRUE, A<T>::B<S> will
+ *  try to strip \<T\> and not \<S\>, while \a parentOnly is \c FALSE will
+ *  strip both unless A<T> or B<S> are specialized template classes.
  */
 QCString stripTemplateSpecifiersFromScope(const QCString &fullName,
     bool parentOnly,
@@ -6349,11 +6349,11 @@ QCString stripTemplateSpecifiersFromScope(const QCString &fullName,
     while (e<l && !done)
     {
       char c=fullName.at(e++);
-      if (c=='<') 
+      if (c=='<')
       {
         count++;
       }
-      else if (c=='>') 
+      else if (c=='>')
       {
         count--;
         done = count==0;
@@ -6361,7 +6361,7 @@ QCString stripTemplateSpecifiersFromScope(const QCString &fullName,
     }
     int si= fullName.find("::",e);
 
-    if (parentOnly && si==-1) break; 
+    if (parentOnly && si==-1) break;
     // we only do the parent scope, so we stop here if needed
 
     result+=fullName.mid(p,i-p);
@@ -6388,10 +6388,10 @@ QCString stripTemplateSpecifiersFromScope(const QCString &fullName,
  *  Example1: \c A::B and \c B::C will result in \c A::B::C <br>
  *  Example2: \c A and \c B will be \c A::B <br>
  *  Example3: \c A::B and B will be \c A::B
- *  
+ *
  *  @param leftScope the left hand part of the scope.
  *  @param rightScope the right hand part of the scope.
- *  @returns the merged scope. 
+ *  @returns the merged scope.
  */
 QCString mergeScopes(const QCString &leftScope,const QCString &rightScope)
 {
@@ -6496,7 +6496,7 @@ PageDef *addRelatedPage(const char *name,const QCString &ptitle,
   else // new page
   {
     QCString baseName=name;
-    if (baseName.right(4)==".tex") 
+    if (baseName.right(4)==".tex")
       baseName=baseName.left(baseName.length()-4);
     else if (baseName.right(Doxygen::htmlFileExtension.length())==Doxygen::htmlFileExtension)
       baseName=baseName.left(baseName.length()-Doxygen::htmlFileExtension.length());
@@ -6528,7 +6528,7 @@ PageDef *addRelatedPage(const char *name,const QCString &ptitle,
       {
         file=gd->getOutputFileBase();
       }
-      else 
+      else
       {
         file=pd->getOutputFileBase();
       }
@@ -6563,7 +6563,7 @@ PageDef *addRelatedPage(const char *name,const QCString &ptitle,
 //----------------------------------------------------------------------------
 
 void addRefItem(const QList<ListItemInfo> *sli,
-    const char *key, 
+    const char *key,
     const char *prefix, const char *name,const char *title,const char *args,Definition *scope)
 {
   //printf("addRefItem(sli=%p,key=%s,prefix=%s,name=%s,title=%s,args=%s)\n",sli,key,prefix,name,title,args);
@@ -6706,9 +6706,9 @@ void filterLatexString(FTextStream &t,const char *str,
                    }
                    break;
         case '*':  t << "$\\ast$";       break;
-        case '_':  if (!insideTabbing) t << "\\+";  
-                   t << "\\_"; 
-                   if (!insideTabbing) t << "\\+";  
+        case '_':  if (!insideTabbing) t << "\\+";
+                   t << "\\_";
+                   if (!insideTabbing) t << "\\+";
                    break;
         case '{':  t << "\\{";           break;
         case '}':  t << "\\}";           break;
@@ -6716,8 +6716,8 @@ void filterLatexString(FTextStream &t,const char *str,
         case '>':  t << "$>$";           break;
         case '|':  t << "$\\vert$";      break;
         case '~':  t << "$\\sim$";       break;
-        case '[':  if (Config_getBool(PDF_HYPERLINKS) || insideItem) 
-                     t << "\\mbox{[}"; 
+        case '[':  if (Config_getBool(PDF_HYPERLINKS) || insideItem)
+                     t << "\\mbox{[}";
                    else
                      t << "[";
                    break;
@@ -6725,12 +6725,12 @@ void filterLatexString(FTextStream &t,const char *str,
                      if (Config_getBool(PDF_HYPERLINKS) || insideItem)
                        t << "\\mbox{]}";
                      else
-                       t << "]";             
+                       t << "]";
                    break;
         case '-':  t << "-\\/";
                    break;
         case '\\': t << "\\textbackslash{}";
-                   break;           
+                   break;
         case '"':  t << "\\char`\\\"{}";
                    break;
         case '`':  t << "\\`{}";
@@ -6740,9 +6740,9 @@ void filterLatexString(FTextStream &t,const char *str,
         case ' ':  if (keepSpaces) { if (insideTabbing) t << "\\>"; else t << '~'; } else t << ' ';
                    break;
 
-        default:   
+        default:
                    //if (!insideTabbing && forceBreaks && c!=' ' && *p!=' ')
-                   if (!insideTabbing && 
+                   if (!insideTabbing &&
                        ((c>='A' && c<='Z' && pc!=' ' && pc!='\0' && *p) || (c==':' && pc!=':') || (pc=='.' && isId(c)))
                       )
                    {
@@ -6775,7 +6775,7 @@ QCString latexEscapeLabelName(const char *s,bool insideTabbing)
       case '}': t << "\\rcurly{}"; break;
       case '~': t << "````~"; break; // to get it a bit better in index together with other special characters
       // NOTE: adding a case here, means adding it to while below as well!
-      default:  
+      default:
         i=0;
         // collect as long string as possible, before handing it to docify
         tmp[i++]=c;
@@ -6813,7 +6813,7 @@ QCString latexEscapeIndexChars(const char *s,bool insideTabbing)
       case '{': t << "\\lcurly{}"; break;
       case '}': t << "\\rcurly{}"; break;
       // NOTE: adding a case here, means adding it to while below as well!
-      default:  
+      default:
         i=0;
         // collect as long string as possible, before handing it to docify
         tmp[i++]=c;
@@ -6965,11 +6965,11 @@ bool findAndRemoveWord(QCString &s,const QCString &word)
   int p=0,i,l;
   while ((i=wordExp.match(s,p,&l))!=-1)
   {
-    if (s.mid(i,l)==word) 
+    if (s.mid(i,l)==word)
     {
-      if (i>0 && isspace((uchar)s.at(i-1))) 
+      if (i>0 && isspace((uchar)s.at(i-1)))
         i--,l++;
-      else if (i+l<(int)s.length() && isspace(s.at(i+l))) 
+      else if (i+l<(int)s.length() && isspace(s.at(i+l)))
         l++;
       s = s.left(i)+s.mid(i+l); // remove word + spacing
       return TRUE;
@@ -7051,7 +7051,7 @@ static struct Lang2ExtMap
   const char *langName;
   const char *parserName;
   SrcLangExt parserId;
-} 
+}
 g_lang2extMap[] =
 {
 //  language       parser           parser option
@@ -7065,6 +7065,7 @@ g_lang2extMap[] =
   { "c",           "c",             SrcLangExt_Cpp      },
   { "c++",         "c",             SrcLangExt_Cpp      },
   { "python",      "python",        SrcLangExt_Python   },
+  { "sml",          "sml",          SrcLangExt_Sml      },
   { "fortran",     "fortran",       SrcLangExt_Fortran  },
   { "fortranfree", "fortranfree",   SrcLangExt_Fortran  },
   { "fortranfixed", "fortranfixed", SrcLangExt_Fortran  },
@@ -7156,6 +7157,8 @@ void initDefaultExtensionMapping()
   updateLanguageMapping(".mm",       "c");  // see bug746361
   updateLanguageMapping(".py",       "python");
   updateLanguageMapping(".pyw",      "python");
+  updateLanguageMapping(".sml",       "sml");
+  updateLanguageMapping(".sig",       "sml");
   updateLanguageMapping(".f",        "fortran");
   updateLanguageMapping(".for",      "fortran");
   updateLanguageMapping(".f90",      "fortran");
@@ -7189,7 +7192,7 @@ SrcLangExt getLanguageFromFileName(const QCString fileName)
       if (pVal) // listed extension
       {
         //printf("getLanguageFromFileName(%s)=%x\n",extStr.data(),*pVal);
-        return (SrcLangExt)*pVal; 
+        return (SrcLangExt)*pVal;
       }
     }
   }
@@ -7199,7 +7202,7 @@ SrcLangExt getLanguageFromFileName(const QCString fileName)
 
 //--------------------------------------------------------------------------
 
-MemberDef *getMemberFromSymbol(Definition *scope,FileDef *fileScope, 
+MemberDef *getMemberFromSymbol(Definition *scope,FileDef *fileScope,
                                 const char *n)
 {
   if (scope==0 ||
@@ -7389,8 +7392,8 @@ QCString parseCommentAsText(const Definition *scope,const MemberDef *md,
       {
         addEllipsis=TRUE;
       }
-      else if (result.at(i)==',' || 
-               result.at(i)=='.' || 
+      else if (result.at(i)==',' ||
+               result.at(i)=='.' ||
                result.at(i)=='?')
       {
         break;
@@ -7415,8 +7418,8 @@ struct Marker
   int size; // size of the marker
 };
 
-/** For a string \a s that starts with a command name, returns the character 
- *  offset within that string representing the first character after the 
+/** For a string \a s that starts with a command name, returns the character
+ *  offset within that string representing the first character after the
  *  command. For an alias with argument, this is the offset to the
  *  character just after the argument list.
  *
@@ -7443,8 +7446,8 @@ static int findEndOfCommand(const char *s)
   return i;
 }
 
-/** Replaces the markers in an alias definition \a aliasValue 
- *  with the corresponding values found in the comma separated argument 
+/** Replaces the markers in an alias definition \a aliasValue
+ *  with the corresponding values found in the comma separated argument
  *  list \a argList and the returns the result after recursive alias expansion.
  */
 static QCString replaceAliasArguments(const QCString &aliasValue,const QCString &argList)
@@ -7459,7 +7462,7 @@ static QCString replaceAliasArguments(const QCString &aliasValue,const QCString
   for (i=0;i<l;i++)
   {
     char c = argList.at(i);
-    if (c==',' && (i==0 || argList.at(i-1)!='\\')) 
+    if (c==',' && (i==0 || argList.at(i-1)!='\\'))
     {
       args.append(new QCString(argList.mid(s,i-s)));
       s=i+1; // start of next argument
@@ -7587,8 +7590,8 @@ static QCString expandAliasRec(const QCString s,bool allowRecursion)
       cmd += QCString().sprintf("{%d}",numArgs);  // alias name + {n}
     }
     QCString *aliasText=Doxygen::aliasDict.find(cmd);
-    if (numArgs>1 && aliasText==0) 
-    { // in case there is no command with numArgs parameters, but there is a command with 1 parameter, 
+    if (numArgs>1 && aliasText==0)
+    { // in case there is no command with numArgs parameters, but there is a command with 1 parameter,
       // we also accept all text as the argument of that command (so you don't have to escape commas)
       aliasText=Doxygen::aliasDict.find(cmdNoArgs+"{1}");
       if (aliasText)
@@ -7634,7 +7637,7 @@ int countAliasArguments(const QCString argList)
   int count=1;
   int l = argList.length();
   int i;
-  for (i=0;i<l;i++) 
+  for (i=0;i<l;i++)
   {
     char c = argList.at(i);
     if (c==',' && (i==0 || argList.at(i-1)!='\\')) count++;
@@ -7668,7 +7671,7 @@ QCString extractAliasArgs(const QCString &args,int pos)
         prevChar=0;
       }
 
-      if (bc==0) 
+      if (bc==0)
       {
         //printf("extractAliasArgs('%s')->'%s'\n",args.data(),args.mid(pos+1,i-pos-1).data());
         return args.mid(pos+1,i-pos-1);
@@ -7704,7 +7707,7 @@ QCString expandAlias(const QCString &aliasName,const QCString &aliasValue)
 void writeTypeConstraints(OutputList &ol,Definition *d,ArgumentList *al)
 {
   if (al==0) return;
-  ol.startConstraintList(theTranslator->trTypeConstraints()); 
+  ol.startConstraintList(theTranslator->trTypeConstraints());
   ArgumentListIterator ali(*al);
   Argument *a;
   for (;(a=ali.current());++ali)
@@ -7732,7 +7735,7 @@ void stackTrace()
   static char cmd[40960];
   char *p = cmd;
   p += sprintf(p,"/usr/bin/atos -p %d ", (int)getpid());
-  for (int x = 0; x < frameCount; x++) 
+  for (int x = 0; x < frameCount; x++)
   {
     p += sprintf(p,"%p ", backtraceFrames[x]);
   }
@@ -7757,7 +7760,7 @@ static int transcodeCharacterBuffer(const char *fileName,BufStr &srcBuf,int size
   if (inputEncoding==0 || outputEncoding==0) return size;
   if (qstricmp(inputEncoding,outputEncoding)==0) return size;
   void *cd = portable_iconv_open(outputEncoding,inputEncoding);
-  if (cd==(void *)(-1)) 
+  if (cd==(void *)(-1))
   {
     err("unsupported character conversion: '%s'->'%s': %s\n"
         "Check the INPUT_ENCODING setting in the config file!\n",
@@ -7904,7 +7907,7 @@ bool patternMatch(const QFileInfo &fi,const QStrList *patList)
 {
   bool found=FALSE;
   if (patList)
-  { 
+  {
     QStrListIterator it(*patList);
     QCString pattern;
 
@@ -7920,7 +7923,7 @@ bool patternMatch(const QFileInfo &fi,const QStrList *patList)
         if (i!=-1) pattern=pattern.left(i); // strip of the extension specific filter name
 
 #if defined(_WIN32) || defined(__MACOSX__) // Windows or MacOSX
-        QRegExp re(pattern,FALSE,TRUE); // case insensitive match 
+        QRegExp re(pattern,FALSE,TRUE); // case insensitive match
 #else                // unix
         QRegExp re(pattern,TRUE,TRUE);  // case sensitive match
 #endif
@@ -8002,7 +8005,7 @@ QCString externalRef(const QCString &relPath,const QCString &ref,bool href)
   return result;
 }
 
-/** Writes the intensity only bitmap representated by \a data as an image to 
+/** Writes the intensity only bitmap representated by \a data as an image to
  *  directory \a dir using the colors defined by HTML_COLORSTYLE_*.
  */
 void writeColoredImgData(const char *dir,ColoredImgDataItem data[])
@@ -8031,8 +8034,8 @@ void writeColoredImgData(const char *dir,ColoredImgDataItem data[])
 }
 
 /** Replaces any markers of the form \#\#AA in input string \a str
- *  by new markers of the form \#AABBCC, where \#AABBCC represents a 
- *  valid color, based on the intensity represented by hex number AA 
+ *  by new markers of the form \#AABBCC, where \#AABBCC represents a
+ *  valid color, based on the intensity represented by hex number AA
  *  and the current HTML_COLORSTYLE_* settings.
  */
 QCString replaceColorMarkers(const char *str)
@@ -8053,7 +8056,7 @@ QCString replaceColorMarkers(const char *str)
 #define HEXTONUM(x) (((x)>='0' && (x)<='9') ? ((x)-'0') :       \
                      ((x)>='a' && (x)<='f') ? ((x)-'a'+10) :    \
                      ((x)>='A' && (x)<='F') ? ((x)-'A'+10) : 0)
-    
+
     double r,g,b;
     int red,green,blue;
     int level = HEXTONUM(lumStr[0])*16+HEXTONUM(lumStr[1]);
@@ -8079,7 +8082,7 @@ QCString replaceColorMarkers(const char *str)
   return result;
 }
 
-/** Copies the contents of file with name \a src to the newly created 
+/** Copies the contents of file with name \a src to the newly created
  *  file with name \a dest. Returns TRUE if successful.
  */
 bool copyFile(const QCString &src,const QCString &dest)
@@ -8111,7 +8114,7 @@ bool copyFile(const QCString &src,const QCString &dest)
   return TRUE;
 }
 
-/** Returns the section of text, in between a pair of markers. 
+/** Returns the section of text, in between a pair of markers.
  *  Full lines are returned, excluding the lines on which the markers appear.
  *  \sa routine lineBlock
  */
@@ -8195,6 +8198,7 @@ QCString langToString(SrcLangExt lang)
     case SrcLangExt_Cpp:      return "C++";
     case SrcLangExt_JS:       return "Javascript";
     case SrcLangExt_Python:   return "Python";
+    case SrcLangExt_Sml:      return "Sml";
     case SrcLangExt_Fortran:  return "Fortran";
     case SrcLangExt_VHDL:     return "VHDL";
     case SrcLangExt_XML:      return "XML";
@@ -8208,7 +8212,7 @@ QCString langToString(SrcLangExt lang)
 /** Returns the scope separator to use given the programming language \a lang */
 QCString getLanguageSpecificSeparator(SrcLangExt lang,bool classScope)
 {
-  if (lang==SrcLangExt_Java || lang==SrcLangExt_CSharp || lang==SrcLangExt_VHDL || lang==SrcLangExt_Python)
+  if (lang==SrcLangExt_Java || lang==SrcLangExt_CSharp || lang==SrcLangExt_VHDL || lang==SrcLangExt_Python || lang==SrcLangExt_Sml)
   {
     return ".";
   }
@@ -8228,8 +8232,8 @@ QCString getLanguageSpecificSeparator(SrcLangExt lang,bool classScope)
 QCString correctURL(const QCString &url,const QCString &relPath)
 {
   QCString result = url;
-  if (!relPath.isEmpty() && 
-      url.left(5)!="http:" && url.left(6)!="https:" && 
+  if (!relPath.isEmpty() &&
+      url.left(5)!="http:" && url.left(6)!="https:" &&
       url.left(4)!="ftp:"  && url.left(5)!="file:")
   {
     result.prepend(relPath);
@@ -8244,8 +8248,8 @@ bool protectionLevelVisible(Protection prot)
   static bool extractPrivate = Config_getBool(EXTRACT_PRIVATE);
   static bool extractPackage = Config_getBool(EXTRACT_PACKAGE);
 
-  return (prot!=Private && prot!=Package)  || 
-         (prot==Private && extractPrivate) || 
+  return (prot!=Private && prot!=Package)  ||
+         (prot==Private && extractPrivate) ||
          (prot==Package && extractPackage);
 }
 
@@ -8268,7 +8272,7 @@ QCString stripIndentation(const QCString &s)
     if      (c=='\t') indent+=tabSize - (indent%tabSize);
     else if (c=='\n') indent=0,searchIndent=TRUE;
     else if (c==' ')  indent++;
-    else if (searchIndent) 
+    else if (searchIndent)
     {
       searchIndent=FALSE;
       if (indent<minIndent) minIndent=indent;
@@ -8325,7 +8329,7 @@ bool fileVisibleInIndex(FileDef *fd,bool &genSourceFile)
   genSourceFile = !isDocFile && fd->generateSourceFile();
   return ( ((allExternals && fd->isLinkable()) ||
             fd->isLinkableInProject()
-           ) && 
+           ) &&
            !isDocFile
          );
 }
@@ -8337,7 +8341,7 @@ void addDocCrossReference(MemberDef *src,MemberDef *dst)
 
   //printf("--> addDocCrossReference src=%s,dst=%s\n",src->name().data(),dst->name().data());
   if (dst->isTypedef() || dst->isEnumerate()) return; // don't add types
-  if ((referencedByRelation || dst->hasCallerGraph()) && 
+  if ((referencedByRelation || dst->hasCallerGraph()) &&
       src->showInCallGraph()
      )
   {
@@ -8353,7 +8357,7 @@ void addDocCrossReference(MemberDef *src,MemberDef *dst)
       mdDecl->addSourceReferencedBy(src);
     }
   }
-  if ((referencesRelation || src->hasCallGraph()) && 
+  if ((referencesRelation || src->hasCallGraph()) &&
       src->showInCallGraph()
      )
   {
@@ -8409,7 +8413,7 @@ uint getUtf8Code( const QCString& s, int idx )
 }
 
 
-/*! @brief Returns one unicode character as an unsigned integer 
+/*! @brief Returns one unicode character as an unsigned integer
  *  from utf-8 string, making the character lower case if it was upper case.
  *
  * @param s utf-8 encoded string
@@ -8424,7 +8428,7 @@ uint getUtf8CodeToLower( const QCString& s, int idx )
 }
 
 
-/*! @brief Returns one unicode character as an unsigned integer 
+/*! @brief Returns one unicode character as an unsigned integer
  *  from utf-8 string, making the character upper case if it was lower case.
  *
  * @param s utf-8 encoded string
@@ -8464,8 +8468,8 @@ bool namespaceHasVisibleChild(NamespaceDef *nd,bool includeClasses)
     ClassDef *cd;
     for (;(cd=cli.current());++cli)
     {
-      if (cd->isLinkableInProject() && cd->templateMaster()==0) 
-      { 
+      if (cd->isLinkableInProject() && cd->templateMaster()==0)
+      {
         return TRUE;
       }
     }
@@ -8728,7 +8732,7 @@ bool openOutputFile(const char *outFile,QFile &f)
       if (backup.exists()) // remove existing backup
         dir.remove(backup.fileName());
       dir.rename(fi.fileName(),fi.fileName()+".bak");
-    } 
+    }
     f.setName(outFile);
     fileOpened = f.open(IO_WriteOnly|IO_Translate);
   }
@@ -8739,7 +8743,7 @@ void writeExtraLatexPackages(FTextStream &t)
 {
   // User-specified packages
   QStrList &extraPackages = Config_getList(EXTRA_PACKAGES);
-  if (!extraPackages.isEmpty()) 
+  if (!extraPackages.isEmpty())
   {
     t << "% Packages requested by user\n";
     const char *pkgName=extraPackages.first();
@@ -8754,4 +8758,3 @@ void writeExtraLatexPackages(FTextStream &t)
     t << "\n";
   }
 }
-
-- 
2.11.0


From 243f6eabcd805ba0b427c8f9ca0fd865f2905b09 Mon Sep 17 00:00:00 2001
From: Christian Gregg <c_arlt@hotmail.com>
Date: Sun, 22 Oct 2017 15:53:36 +0100
Subject: [PATCH 2/2] Update Standard ML parser to latest Doxygen

---
 src/CMakeLists.txt |    4 +
 src/config.xml     | 1078 ++++++++++++++++++++++++++--------------------------
 src/context.cpp    |    3 +-
 src/smlcode.l      |   20 +-
 src/smlscanner.l   |    3 +
 src/types.h        |    2 +-
 6 files changed, 561 insertions(+), 549 deletions(-)

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 5c55efae..6d54fc41 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -117,6 +117,8 @@ FLEX_TARGET(commentscan    commentscan.l    ${GENERATED_SRC}/commentscan.cpp
 FLEX_TARGET(constexp       constexp.l       ${GENERATED_SRC}/constexp.cpp       COMPILE_FLAGS "${LEX_FLAGS}")
 FLEX_TARGET(xmlcode        xmlcode.l        ${GENERATED_SRC}/xmlcode.cpp        COMPILE_FLAGS "${LEX_FLAGS}")
 FLEX_TARGET(sqlcode        sqlcode.l        ${GENERATED_SRC}/sqlcode.cpp        COMPILE_FLAGS "${LEX_FLAGS}")
+FLEX_TARGET(smlscanner     smlscanner.l     ${GENERATED_SRC}/smlscanner.cpp      COMPILE_FLAGS "${LEX_FLAGS}")
+FLEX_TARGET(smlcode        smlcode.l        ${GENERATED_SRC}/smlcode.cpp         COMPILE_FLAGS "${LEX_FLAGS}")
 FLEX_TARGET(configimpl     configimpl.l     ${GENERATED_SRC}/configimpl.cpp     COMPILE_FLAGS "${LEX_FLAGS}")
 
 BISON_TARGET(constexp      constexp.y       ${GENERATED_SRC}/ce_parse.cpp       COMPILE_FLAGS ${YACC_FLAGS})
@@ -158,6 +160,8 @@ add_library(_doxygen STATIC
     ${GENERATED_SRC}/constexp.cpp
     ${GENERATED_SRC}/xmlcode.cpp
     ${GENERATED_SRC}/sqlcode.cpp
+    ${GENERATED_SRC}/smlscanner.cpp
+    ${GENERATED_SRC}/smlcode.cpp
     #
     ${GENERATED_SRC}/ce_parse.cpp
     #
diff --git a/src/config.xml b/src/config.xml
index 6cd79977..df3d4e0a 100644
--- a/src/config.xml
+++ b/src/config.xml
@@ -4,13 +4,13 @@
       <![CDATA[
 /*
  *
- * 
+ *
  *
  * Copyright (C) 1997-2015 by Dimitri van Heesch.
  *
  * Permission to use, copy, modify, and distribute this software and its
- * documentation under the terms of the GNU General Public License is hereby 
- * granted. No representations are made about the suitability of this software 
+ * documentation under the terms of the GNU General Public License is hereby
+ * granted. No representations are made about the suitability of this software
  * for any purpose. It is provided "as is" without express or implied warranty.
  * See the GNU General Public License for more details.
  *
@@ -41,28 +41,28 @@ Each statement consists of a \c TAG_NAME written in capitals,
 followed by the equal sign (<code>=</code>) and one or more values. If the same tag
 is assigned more than once, the last assignment overwrites any earlier
 assignment. For tags that take a list as their argument,
-the <code>+=</code> operator can be used instead of <code>=</code> to append 
-new values to the list. Values are sequences of non-blanks. If the value should 
+the <code>+=</code> operator can be used instead of <code>=</code> to append
+new values to the list. Values are sequences of non-blanks. If the value should
 contain one or more blanks it must be surrounded by quotes (<code>&quot;...&quot;</code>).
 Multiple lines can be concatenated by inserting a backslash (\c \\)
-as the last character of a line. Environment variables can be expanded 
+as the last character of a line. Environment variables can be expanded
 using the pattern <code>\$(ENV_VARIABLE_NAME)</code>.
 
 You can also include part of a configuration file from another configuration
 file using a <code>\@INCLUDE</code> tag as follows:
 \verbatim
 @INCLUDE = config_file_name
-\endverbatim 
-The include file is searched in the current working directory. You can 
+\endverbatim
+The include file is searched in the current working directory. You can
 also specify a list of directories that should be searched before looking
-in the current working directory. Do this by putting a <code>\@INCLUDE_PATH</code> tag 
+in the current working directory. Do this by putting a <code>\@INCLUDE_PATH</code> tag
 with these paths before the <code>\@INCLUDE</code> tag, e.g.:
 \verbatim
 @INCLUDE_PATH = my_config_dir
 \endverbatim
 
 The configuration options can be divided into several categories.
-Below is an alphabetical index of the tags that are recognized 
+Below is an alphabetical index of the tags that are recognized
 followed by the descriptions of the tags grouped by category.
 ]]>
     </docs>
@@ -91,14 +91,14 @@ Values that contain spaces should be placed between quotes (\" \").
       <![CDATA[
 \section config_examples Examples
 
-Suppose you have a simple project consisting of two files: a source file 
+Suppose you have a simple project consisting of two files: a source file
 \c example.cc and a header file \c example.h.
 Then a minimal configuration file is as simple as:
 \verbatim
 INPUT            = example.cc example.h
 \endverbatim
 
-Assuming the example makes use of Qt classes and \c perl is located 
+Assuming the example makes use of Qt classes and \c perl is located
 in <code>/usr/bin</code>, a more realistic configuration file would be:
 \verbatim
 PROJECT_NAME     = Example
@@ -109,7 +109,7 @@ PERL_PATH        = /usr/local/bin/perl
 SEARCHENGINE     = NO
 \endverbatim
 
-To generate the documentation for the 
+To generate the documentation for the
 <a href="http://www.stack.nl/~dimitri/qdbttabular/index.html">QdbtTabular</a> package
 I have used the following configuration file:
 \verbatim
@@ -160,7 +160,7 @@ INPUT                = $(QTDIR)/doc \
                        $(QTDIR)/src/dialogs \
                        $(QTDIR)/src/tools
 FILE_PATTERNS        = *.cpp *.h q*.doc
-INCLUDE_PATH         = $(QTDIR)/include 
+INCLUDE_PATH         = $(QTDIR)/include
 RECURSIVE            = YES
 \endverbatim
 
@@ -212,7 +212,7 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='string' id='DOXYFILE_ENCODING' format='string' defval='UTF-8'>
       <docs>
 <![CDATA[
- This tag specifies the encoding used for all characters in the config file that 
+ This tag specifies the encoding used for all characters in the config file that
  follow. The default is UTF-8 which is also the encoding used for all text before
  the first occurrence of this tag. Doxygen uses \c libiconv (or the iconv built into
  \c libc) for the transcoding. See https://www.gnu.org/software/libiconv/ for the list of
@@ -224,8 +224,8 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  The \c PROJECT_NAME tag is a single word (or a sequence of words
- surrounded by double-quotes, unless you are using Doxywizard) that should identify the project for which the 
- documentation is generated. This name is used in the title of most 
+ surrounded by double-quotes, unless you are using Doxywizard) that should identify the project for which the
+ documentation is generated. This name is used in the title of most
  generated pages and in a few other places.
 ]]>
       </docs>
@@ -242,9 +242,9 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='string' id='PROJECT_BRIEF' format='string' defval=''>
       <docs>
 <![CDATA[
- Using the \c PROJECT_BRIEF tag one can provide an optional one line description 
- for a project that appears at the top of each page and should give viewer 
- a quick idea about the purpose of the project. Keep the description short. 
+ Using the \c PROJECT_BRIEF tag one can provide an optional one line description
+ for a project that appears at the top of each page and should give viewer
+ a quick idea about the purpose of the project. Keep the description short.
 ]]>
       </docs>
     </option>
@@ -252,9 +252,9 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='string' id='PROJECT_LOGO' format='image' defval=''>
       <docs>
 <![CDATA[
- With the \c PROJECT_LOGO tag one can specify a logo or an icon that is 
- included in the documentation. The maximum height of the logo should not 
- exceed 55 pixels and the maximum width should not exceed 200 pixels. 
+ With the \c PROJECT_LOGO tag one can specify a logo or an icon that is
+ included in the documentation. The maximum height of the logo should not
+ exceed 55 pixels and the maximum width should not exceed 200 pixels.
  Doxygen will copy the logo to the output directory.
 ]]>
       </docs>
@@ -262,9 +262,9 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='string' id='OUTPUT_DIRECTORY' format='dir' defval=''>
       <docs>
 <![CDATA[
- The \c OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
- path into which the generated documentation will be written. 
- If a relative path is entered, it will be relative to the location 
+ The \c OUTPUT_DIRECTORY tag is used to specify the (relative or absolute)
+ path into which the generated documentation will be written.
+ If a relative path is entered, it will be relative to the location
  where doxygen was started. If left blank the current directory will be used.
 ]]>
       </docs>
@@ -273,11 +273,11 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  If the \c CREATE_SUBDIRS tag is set to \c YES then doxygen will create
- 4096 sub-directories (in 2 levels) under the output directory of each output 
- format and will distribute the generated files over these directories. 
+ 4096 sub-directories (in 2 levels) under the output directory of each output
+ format and will distribute the generated files over these directories.
  Enabling this option can be useful when feeding doxygen a huge amount of source
  files, where putting all generated files in the same directory would otherwise
- causes performance problems for the file system. 
+ causes performance problems for the file system.
 ]]>
       </docs>
     </option>
@@ -285,8 +285,8 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  If the \c ALLOW_UNICODE_NAMES tag is set to \c YES,
- doxygen will allow non-ASCII characters to appear in the names of generated files. 
- If set to \c NO, non-ASCII characters will be escaped, for example _xE3_x81_x84 
+ doxygen will allow non-ASCII characters to appear in the names of generated files.
+ If set to \c NO, non-ASCII characters will be escaped, for example _xE3_x81_x84
  will be used for Unicode U+3044.
 ]]>
       </docs>
@@ -356,12 +356,12 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='REPEAT_BRIEF' defval='1'>
       <docs>
 <![CDATA[
- If the \c REPEAT_BRIEF tag is set to \c YES, doxygen will 
- prepend the brief description of a member or function before the detailed 
- description 
- <br>Note: 
+ If the \c REPEAT_BRIEF tag is set to \c YES, doxygen will
+ prepend the brief description of a member or function before the detailed
+ description
+ <br>Note:
  If both \ref cfg_hide_undoc_members "HIDE_UNDOC_MEMBERS" and
- \ref cfg_brief_member_desc "BRIEF_MEMBER_DESC" are set to \c NO, the 
+ \ref cfg_brief_member_desc "BRIEF_MEMBER_DESC" are set to \c NO, the
  brief descriptions will be completely suppressed.
 ]]>
       </docs>
@@ -375,7 +375,7 @@ Go to the <a href="commands.html">next</a> section or return to the
  stripped from the text and the result, after processing the whole list, is used
  as the annotated text. Otherwise, the brief description is used as-is. If left
  blank, the following values are used (`$name` is automatically replaced with the
- name of the entity): 
+ name of the entity):
 ]]>
       </docs>
       <value name='The $name class'/>
@@ -393,7 +393,7 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='ALWAYS_DETAILED_SEC' defval='0'>
       <docs>
 <![CDATA[
- If the \c ALWAYS_DETAILED_SEC and \ref cfg_repeat_brief "REPEAT_BRIEF" tags 
+ If the \c ALWAYS_DETAILED_SEC and \ref cfg_repeat_brief "REPEAT_BRIEF" tags
  are both set to \c YES then
  doxygen will generate a detailed section even if there is only a brief
  description.
@@ -424,12 +424,12 @@ Go to the <a href="commands.html">next</a> section or return to the
 <![CDATA[
  The \c STRIP_FROM_PATH tag
  can be used to strip a user-defined part of the path. Stripping is
- only done if one of the specified strings matches the left-hand part of the 
+ only done if one of the specified strings matches the left-hand part of the
  path. The tag can be used to show relative paths in the file list.
  If left blank the directory from which doxygen is run is used as the
  path to strip.
- <br>Note that you can specify absolute paths here, but also 
- relative paths, which will be relative from the directory where doxygen is 
+ <br>Note that you can specify absolute paths here, but also
+ relative paths, which will be relative from the directory where doxygen is
  started.
 ]]>
       </docs>
@@ -438,11 +438,11 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='list' id='STRIP_FROM_INC_PATH' format='string'>
       <docs>
 <![CDATA[
- The \c STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of 
+ The \c STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of
  the path mentioned in the documentation of a class, which tells
- the reader which header file to include in order to use a class. 
+ the reader which header file to include in order to use a class.
  If left blank only the name of the header file containing the class
- definition is used. Otherwise one should specify the list of include paths that 
+ definition is used. Otherwise one should specify the list of include paths that
  are normally passed to the compiler using the `-I` flag.
 ]]>
       </docs>
@@ -461,7 +461,7 @@ Go to the <a href="commands.html">next</a> section or return to the
 <![CDATA[
   If the \c JAVADOC_AUTOBRIEF tag is set to \c YES then doxygen
   will interpret the first line (until the first dot) of a Javadoc-style
-  comment as the brief description. If set to \c NO, the 
+  comment as the brief description. If set to \c NO, the
   Javadoc-style will behave just like regular Qt-style comments
   (thus requiring an explicit \ref cmdbrief "\@brief" command for a brief description.)
 ]]>
@@ -521,16 +521,16 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  This tag can be used to specify a number of aliases that act
- as commands in the documentation. An alias has the form: 
+ as commands in the documentation. An alias has the form:
 \verbatim
  name=value
 \endverbatim
- For example adding 
+ For example adding
 \verbatim
- "sideeffect=@par Side Effects:\n" 
+ "sideeffect=@par Side Effects:\n"
 \endverbatim
  will allow you to
- put the command \c \\sideeffect (or \c \@sideeffect) in the documentation, which 
+ put the command \c \\sideeffect (or \c \@sideeffect) in the documentation, which
  will result in a user-defined paragraph with heading "Side Effects:".
  You can put \ref cmdn "\\n"'s in the value part of an alias to insert newlines.
 ]]>
@@ -539,9 +539,9 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='list' id='TCL_SUBST' format='string'>
       <docs>
 <![CDATA[
- This tag can be used to specify a number of word-keyword mappings (TCL only). 
- A mapping has the form <code>"name=value"</code>. For example adding 
- <code>"class=itcl::class"</code> will allow you to use the command class in the 
+ This tag can be used to specify a number of word-keyword mappings (TCL only).
+ A mapping has the form <code>"name=value"</code>. For example adding
+ <code>"class=itcl::class"</code> will allow you to use the command class in the
  <code>itcl::class</code> meaning.
 ]]>
       </docs>
@@ -549,10 +549,10 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='OPTIMIZE_OUTPUT_FOR_C' defval='0'>
       <docs>
 <![CDATA[
- Set the \c OPTIMIZE_OUTPUT_FOR_C tag to \c YES if your project consists 
- of C sources only. Doxygen will then generate output that is more tailored 
- for C. For instance, some of the names that are used will be different. 
- The list of all members will be omitted, etc. 
+ Set the \c OPTIMIZE_OUTPUT_FOR_C tag to \c YES if your project consists
+ of C sources only. Doxygen will then generate output that is more tailored
+ for C. For instance, some of the names that are used will be different.
+ The list of all members will be omitted, etc.
 ]]>
       </docs>
     </option>
@@ -560,16 +560,16 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  Set the \c OPTIMIZE_OUTPUT_JAVA tag to \c YES if your project consists of Java or
- Python sources only. Doxygen will then generate output that is more tailored 
- for that language. For instance, namespaces will be presented as packages, 
- qualified scopes will look different, etc. 
+ Python sources only. Doxygen will then generate output that is more tailored
+ for that language. For instance, namespaces will be presented as packages,
+ qualified scopes will look different, etc.
 ]]>
       </docs>
     </option>
     <option type='bool' id='OPTIMIZE_FOR_FORTRAN' defval='0'>
       <docs>
 <![CDATA[
- Set the \c OPTIMIZE_FOR_FORTRAN tag to \c YES if your project consists of Fortran 
+ Set the \c OPTIMIZE_FOR_FORTRAN tag to \c YES if your project consists of Fortran
  sources. Doxygen will then generate output that is tailored for Fortran.
 ]]>
       </docs>
@@ -577,7 +577,7 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='OPTIMIZE_OUTPUT_VHDL' defval='0'>
       <docs>
 <![CDATA[
- Set the \c OPTIMIZE_OUTPUT_VHDL tag to \c YES if your project consists of VHDL 
+ Set the \c OPTIMIZE_OUTPUT_VHDL tag to \c YES if your project consists of VHDL
  sources. Doxygen will then generate output that is tailored for VHDL.
 ]]>
       </docs>
@@ -593,14 +593,14 @@ Go to the <a href="commands.html">next</a> section or return to the
  Objective-C, Python, Fortran (fixed format Fortran: FortranFixed,
  free formatted Fortran: FortranFree, unknown formatted Fortran: Fortran. In
  the later case the parser tries to guess whether the code is fixed or free
- formatted code, this is the default for Fortran type files), VHDL. 
+ formatted code, this is the default for Fortran type files), VHDL.
 
  For instance to make doxygen treat
  <code>.inc</code> files as Fortran files (default is PHP), and <code>.f</code> files as C (default is Fortran),
  use: `inc=Fortran f=C`.
 
  <br>Note: For files without extension you can use `no_extension` as a placeholder.
- <br>Note that for custom extensions you also need to set \ref cfg_file_patterns "FILE_PATTERNS" otherwise the 
+ <br>Note that for custom extensions you also need to set \ref cfg_file_patterns "FILE_PATTERNS" otherwise the
  files are not read by doxygen.
 ]]>
       </docs>
@@ -608,12 +608,12 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='MARKDOWN_SUPPORT' defval='1'>
       <docs>
 <![CDATA[
- If the \c MARKDOWN_SUPPORT tag is enabled then doxygen pre-processes all 
- comments according to the Markdown format, which allows for more readable 
- documentation. See http://daringfireball.net/projects/markdown/ for details. 
- The output of markdown processing is further processed by doxygen, so you 
- can mix doxygen, HTML, and XML commands with Markdown formatting. 
- Disable only in case of backward compatibilities issues. 
+ If the \c MARKDOWN_SUPPORT tag is enabled then doxygen pre-processes all
+ comments according to the Markdown format, which allows for more readable
+ documentation. See http://daringfireball.net/projects/markdown/ for details.
+ The output of markdown processing is further processed by doxygen, so you
+ can mix doxygen, HTML, and XML commands with Markdown formatting.
+ Disable only in case of backward compatibilities issues.
 ]]>
       </docs>
     </option>
@@ -630,9 +630,9 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='AUTOLINK_SUPPORT' defval='1'>
       <docs>
 <![CDATA[
- When enabled doxygen tries to link words that correspond to documented classes, 
- or namespaces to their corresponding documentation. Such a link can be 
- prevented in individual cases by putting a \c % sign in front of the word or 
+ When enabled doxygen tries to link words that correspond to documented classes,
+ or namespaces to their corresponding documentation. Such a link can be
+ prevented in individual cases by putting a \c % sign in front of the word or
  globally by setting \c AUTOLINK_SUPPORT to \c NO.
 ]]>
       </docs>
@@ -660,10 +660,10 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='SIP_SUPPORT' defval='0'>
       <docs>
 <![CDATA[
- Set the \c SIP_SUPPORT tag to \c YES if your project consists 
- of <a href="https://www.riverbankcomputing.com/software/sip/intro">sip</a> sources only. 
- Doxygen will parse them like normal C++ but will assume all classes use public 
- instead of private inheritance when no explicit protection keyword is present. 
+ Set the \c SIP_SUPPORT tag to \c YES if your project consists
+ of <a href="https://www.riverbankcomputing.com/software/sip/intro">sip</a> sources only.
+ Doxygen will parse them like normal C++ but will assume all classes use public
+ instead of private inheritance when no explicit protection keyword is present.
 ]]>
       </docs>
     </option>
@@ -673,8 +673,8 @@ Go to the <a href="commands.html">next</a> section or return to the
  For Microsoft's IDL there are \c propget and \c propput attributes to indicate getter
  and setter methods for a property. Setting this option to \c YES
  will make doxygen to replace the get and set methods by a property in the
- documentation. This will only work if the methods are indeed getting or 
- setting a simple type. If this is not the case, or you want to show the 
+ documentation. This will only work if the methods are indeed getting or
+ setting a simple type. If this is not the case, or you want to show the
  methods anyway, you should set this option to \c NO.
 ]]>
       </docs>
@@ -705,16 +705,16 @@ Go to the <a href="commands.html">next</a> section or return to the
  the same type (for instance a group of public functions) to be put as a
  subgroup of that type (e.g. under the Public Functions section). Set it to
  \c NO to prevent subgrouping. Alternatively, this can be done per class using
- the \ref cmdnosubgrouping "\\nosubgrouping" command. 
+ the \ref cmdnosubgrouping "\\nosubgrouping" command.
 ]]>
       </docs>
     </option>
     <option type='bool' id='INLINE_GROUPED_CLASSES' defval='0'>
       <docs>
 <![CDATA[
- When the \c INLINE_GROUPED_CLASSES tag is set to \c YES, classes, structs and 
- unions are shown inside the group in which they are included 
- (e.g. using \ref cmdingroup "\\ingroup") instead of on a separate page (for HTML and Man pages) 
+ When the \c INLINE_GROUPED_CLASSES tag is set to \c YES, classes, structs and
+ unions are shown inside the group in which they are included
+ (e.g. using \ref cmdingroup "\\ingroup") instead of on a separate page (for HTML and Man pages)
  or section (for \f$\mbox{\LaTeX}\f$ and RTF).
  <br>Note that this feature does not work in
  combination with \ref cfg_separate_member_pages "SEPARATE_MEMBER_PAGES".
@@ -724,11 +724,11 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='INLINE_SIMPLE_STRUCTS' defval='0'>
       <docs>
 <![CDATA[
- When the \c INLINE_SIMPLE_STRUCTS tag is set to \c YES, structs, classes, and 
- unions with only public data fields or simple typedef fields will be shown 
- inline in the documentation of the scope in which they are defined (i.e. file, 
- namespace, or group documentation), provided this scope is documented. If set 
- to \c NO, structs, classes, and unions are shown on a separate 
+ When the \c INLINE_SIMPLE_STRUCTS tag is set to \c YES, structs, classes, and
+ unions with only public data fields or simple typedef fields will be shown
+ inline in the documentation of the scope in which they are defined (i.e. file,
+ namespace, or group documentation), provided this scope is documented. If set
+ to \c NO, structs, classes, and unions are shown on a separate
  page (for HTML and Man pages) or section (for \f$\mbox{\LaTeX}\f$ and RTF).
 ]]>
       </docs>
@@ -737,11 +737,11 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  When \c TYPEDEF_HIDES_STRUCT tag is enabled, a typedef of a struct, union, or enum
- is documented as struct, union, or enum with the name of the typedef. So 
- <code>typedef struct TypeS {} TypeT</code>, will appear in the documentation as a struct 
- with name \c TypeT. When disabled the typedef will appear as a member of a file, 
- namespace, or class. And the struct will be named \c TypeS. This can typically 
- be useful for C code in case the coding convention dictates that all compound 
+ is documented as struct, union, or enum with the name of the typedef. So
+ <code>typedef struct TypeS {} TypeT</code>, will appear in the documentation as a struct
+ with name \c TypeT. When disabled the typedef will appear as a member of a file,
+ namespace, or class. And the struct will be named \c TypeS. This can typically
+ be useful for C code in case the coding convention dictates that all compound
  types are typedef'ed and only the typedef is referenced, never the tag name.
 ]]>
       </docs>
@@ -750,14 +750,14 @@ Go to the <a href="commands.html">next</a> section or return to the
       <!-- be careful when changing these formulas as they are hard coded in the conversion script -->
       <docs>
 <![CDATA[
- The size of the symbol lookup cache can be 
- set using \c LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given 
- their name and scope. Since this can be an expensive process and often the 
- same symbol appears multiple times in the code, doxygen keeps a cache of 
- pre-resolved symbols. If the cache is too small doxygen will become slower. 
- If the cache is too large, memory is wasted. The cache size is given by this 
- formula: \f$2^{(16+\mbox{LOOKUP\_CACHE\_SIZE})}\f$. The valid range is 0..9, the default is 0, 
- corresponding to a cache size of \f$2^{16} = 65536\f$ symbols. 
+ The size of the symbol lookup cache can be
+ set using \c LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given
+ their name and scope. Since this can be an expensive process and often the
+ same symbol appears multiple times in the code, doxygen keeps a cache of
+ pre-resolved symbols. If the cache is too small doxygen will become slower.
+ If the cache is too large, memory is wasted. The cache size is given by this
+ formula: \f$2^{(16+\mbox{LOOKUP\_CACHE\_SIZE})}\f$. The valid range is 0..9, the default is 0,
+ corresponding to a cache size of \f$2^{16} = 65536\f$ symbols.
  At the end of a run doxygen will report the cache usage and suggest the
  optimal cache size from a speed point of view.
 ]]>
@@ -768,14 +768,14 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='EXTRACT_ALL' defval='0'>
       <docs>
 <![CDATA[
- If the \c EXTRACT_ALL tag is set to \c YES, doxygen will assume all 
- entities in documentation are documented, even if no documentation was 
- available. Private class members and static file members will be hidden 
- unless the \ref cfg_extract_private "EXTRACT_PRIVATE" respectively 
+ If the \c EXTRACT_ALL tag is set to \c YES, doxygen will assume all
+ entities in documentation are documented, even if no documentation was
+ available. Private class members and static file members will be hidden
+ unless the \ref cfg_extract_private "EXTRACT_PRIVATE" respectively
  \ref cfg_extract_static "EXTRACT_STATIC" tags are set to \c YES.
 
- \note This will also disable the warnings about undocumented members 
- that are normally produced when \ref cfg_warnings "WARNINGS" is 
+ \note This will also disable the warnings about undocumented members
+ that are normally produced when \ref cfg_warnings "WARNINGS" is
  set to \c YES.
 ]]>
       </docs>
@@ -783,7 +783,7 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='EXTRACT_PRIVATE' defval='0'>
       <docs>
 <![CDATA[
- If the \c EXTRACT_PRIVATE tag is set to \c YES, all private members of a 
+ If the \c EXTRACT_PRIVATE tag is set to \c YES, all private members of a
  class will be included in the documentation.
 ]]>
       </docs>
@@ -791,8 +791,8 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='EXTRACT_PACKAGE' defval='0'>
       <docs>
 <![CDATA[
- If the \c EXTRACT_PACKAGE tag is set to \c YES, all members with package 
- or internal scope will be included in the documentation. 
+ If the \c EXTRACT_PACKAGE tag is set to \c YES, all members with package
+ or internal scope will be included in the documentation.
 ]]>
       </docs>
     </option>
@@ -807,8 +807,8 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='EXTRACT_LOCAL_CLASSES' defval='1'>
       <docs>
 <![CDATA[
- If the \c EXTRACT_LOCAL_CLASSES tag is set to \c YES, classes (and structs) 
- defined locally in source files will be included in the documentation. 
+ If the \c EXTRACT_LOCAL_CLASSES tag is set to \c YES, classes (and structs)
+ defined locally in source files will be included in the documentation.
  If set to \c NO, only classes defined in header files are included. Does not
  have any effect for Java sources.
 ]]>
@@ -817,7 +817,7 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='EXTRACT_LOCAL_METHODS' defval='0'>
       <docs>
 <![CDATA[
- This flag is only useful for Objective-C code. If set to \c YES, local 
+ This flag is only useful for Objective-C code. If set to \c YES, local
  methods, which are defined in the implementation section but not in
  the interface are included in the documentation.
  If set to \c NO, only methods in the interface are included.
@@ -838,7 +838,7 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  If the \c HIDE_UNDOC_MEMBERS tag is set to \c YES, doxygen will hide all
- undocumented members inside documented classes or files. 
+ undocumented members inside documented classes or files.
  If set to \c NO these members will be included in the
  various overviews, but no documentation section is generated.
  This option has no effect if \ref cfg_extract_all "EXTRACT_ALL" is enabled.
@@ -849,7 +849,7 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  If the \c HIDE_UNDOC_CLASSES tag is set to \c YES, doxygen will hide all
- undocumented classes that are normally visible in the class hierarchy. 
+ undocumented classes that are normally visible in the class hierarchy.
  If set to \c NO, these classes will be included in the
  various overviews.
  This option has no effect if \ref cfg_extract_all "EXTRACT_ALL" is enabled.
@@ -869,9 +869,9 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='HIDE_IN_BODY_DOCS' defval='0'>
       <docs>
 <![CDATA[
- If the \c HIDE_IN_BODY_DOCS tag is set to \c YES, doxygen will hide any 
+ If the \c HIDE_IN_BODY_DOCS tag is set to \c YES, doxygen will hide any
  documentation blocks found inside the body of a function.
- If set to \c NO, these blocks will be appended to the 
+ If set to \c NO, these blocks will be appended to the
  function's detailed documentation block.
 ]]>
       </docs>
@@ -901,9 +901,9 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='HIDE_SCOPE_NAMES' defval='0'>
       <docs>
 <![CDATA[
- If the \c HIDE_SCOPE_NAMES tag is set to \c NO then doxygen 
+ If the \c HIDE_SCOPE_NAMES tag is set to \c NO then doxygen
  will show members with their full class and namespace scopes in the
- documentation. If set to \c YES, the scope will be hidden. 
+ documentation. If set to \c YES, the scope will be hidden.
 ]]>
       </docs>
     </option>
@@ -912,7 +912,7 @@ Go to the <a href="commands.html">next</a> section or return to the
 <![CDATA[
  If the \c HIDE_COMPOUND_REFERENCE tag is set to \c NO (default) then
  doxygen will append additional text to a page's title, such as Class Reference.
- If set to \c YES the compound reference will be hidden. 
+ If set to \c YES the compound reference will be hidden.
 ]]>
       </docs>
     </option>
@@ -920,7 +920,7 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  If the \c SHOW_INCLUDE_FILES tag is set to \c YES then doxygen
- will put a list of the files that are included by a file in the documentation 
+ will put a list of the files that are included by a file in the documentation
  of that file.
 ]]>
       </docs>
@@ -928,7 +928,7 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='SHOW_GROUPED_MEMB_INC' defval='0'>
       <docs>
 <![CDATA[
- If the SHOW_GROUPED_MEMB_INC tag is set to \c YES then Doxygen 
+ If the SHOW_GROUPED_MEMB_INC tag is set to \c YES then Doxygen
  will add for each grouped member an include statement to the documentation,
  telling the reader which file to include in order to use the member.
 ]]>
@@ -937,8 +937,8 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='FORCE_LOCAL_INCLUDES' defval='0'>
       <docs>
 <![CDATA[
- If the \c FORCE_LOCAL_INCLUDES tag is set to \c YES then doxygen 
- will list include files with double quotes in the documentation 
+ If the \c FORCE_LOCAL_INCLUDES tag is set to \c YES then doxygen
+ will list include files with double quotes in the documentation
  rather than with sharp brackets.
 ]]>
       </docs>
@@ -990,9 +990,9 @@ Go to the <a href="commands.html">next</a> section or return to the
     <option type='bool' id='SORT_GROUP_NAMES' defval='0'>
       <docs>
 <![CDATA[
- If the \c SORT_GROUP_NAMES tag is set to \c YES then doxygen will sort the 
+ If the \c SORT_GROUP_NAMES tag is set to \c YES then doxygen will sort the
  hierarchy of group names into alphabetical order. If set to \c NO
- the group names will appear in their defined order. 
+ the group names will appear in their defined order.
 ]]>
       </docs>
     </option>
@@ -1004,7 +1004,7 @@ Go to the <a href="commands.html">next</a> section or return to the
  \c NO, the class list will be sorted only by class name,
  not including the namespace part.
  \note This option is not very useful if \ref cfg_hide_scope_names "HIDE_SCOPE_NAMES" is set to \c YES.
- \note This option applies only to the class list, not to the 
+ \note This option applies only to the class list, not to the
        alphabetical list.
 ]]>
       </docs>
@@ -1013,10 +1013,10 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  If the \c STRICT_PROTO_MATCHING option is enabled and doxygen fails to
- do proper type resolution of all parameters of a function it will reject a  
+ do proper type resolution of all parameters of a function it will reject a
  match between the prototype and the implementation of a member function even
  if there is only one candidate or it is obvious which candidate to choose
- by doing a simple string match. By disabling \c STRICT_PROTO_MATCHING doxygen 
+ by doing a simple string match. By disabling \c STRICT_PROTO_MATCHING doxygen
  will still accept a match between prototype and implementation in such cases.
 ]]>
       </docs>
@@ -1025,7 +1025,7 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  The \c GENERATE_TODOLIST tag can be used to enable (\c YES) or
- disable (\c NO) the todo list. This list is created by 
+ disable (\c NO) the todo list. This list is created by
  putting \ref cmdtodo "\\todo" commands in the documentation.
 ]]>
       </docs>
@@ -1034,7 +1034,7 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  The \c GENERATE_TESTLIST tag can be used to enable (\c YES) or
- disable (\c NO) the test list. This list is created by 
+ disable (\c NO) the test list. This list is created by
  putting \ref cmdtest "\\test" commands in the documentation.
 ]]>
       </docs>
@@ -1043,7 +1043,7 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  The \c GENERATE_BUGLIST tag can be used to enable (\c YES) or
- disable (\c NO) the bug list. This list is created by 
+ disable (\c NO) the bug list. This list is created by
  putting \ref cmdbug "\\bug" commands in the documentation.
 ]]>
       </docs>
@@ -1052,7 +1052,7 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  The \c GENERATE_DEPRECATEDLIST tag can be used to enable (\c YES) or
- disable (\c NO) the deprecated list. This list is created by 
+ disable (\c NO) the deprecated list. This list is created by
  putting \ref cmddeprecated "\\deprecated"
  commands in the documentation.
 ]]>
@@ -1062,7 +1062,7 @@ Go to the <a href="commands.html">next</a> section or return to the
       <docs>
 <![CDATA[
  The \c ENABLED_SECTIONS tag can be used to enable conditional
- documentation sections, marked by \ref cmdif "\\if" \<section_label\> ... 
+ documentation sections, marked by \ref cmdif "\\if" \<section_label\> ...
  \ref cmdendif "\\endif" and \ref cmdcond "\\cond" \<section_label\> ...
  \ref cmdendcond "\\endcond" blocks.
 ]]>
@@ -1114,9 +1114,9 @@ Go to the <a href="commands.html">next</a> section or return to the
  The \c FILE_VERSION_FILTER tag can be used to specify a program or script that
  doxygen should invoke to get the current version for each file (typically from the
  version control system). Doxygen will invoke the program by executing (via
- <code>popen()</code>) the command <code>command input-file</code>, where \c command is 
- the value of the \c FILE_VERSION_FILTER tag, and \c input-file is the name 
- of an input file provided by doxygen. 
+ <code>popen()</code>) the command <code>command input-file</code>, where \c command is
+ the value of the \c FILE_VERSION_FILTER tag, and \c input-file is the name
+ of an input file provided by doxygen.
  Whatever the program writes to standard output is used as the file version.
 ]]>
       </docs>
@@ -1131,8 +1131,8 @@ Example shell script for CVS:
 \verbatim
 #!/bin/sh
 cvs status $1 | sed -n 's/^[ \]*Working revision:[ \t]*\([0-9][0-9\.]*\).*/\1/p'
-\endverbatim 
-<br> 
+\endverbatim
+<br>
 Example shell script for Subversion:
 \verbatim
 #!/bin/sh
@@ -1160,8 +1160,8 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
  doxygen's defaults, run doxygen with the `-l` option. You can optionally specify a
  file name after the option, if omitted \c DoxygenLayout.xml will be used as the name
  of the layout file.
- <br>Note that if you run doxygen from a directory containing 
- a file called \c DoxygenLayout.xml, doxygen will parse it automatically even if 
+ <br>Note that if you run doxygen from a directory containing
+ a file called \c DoxygenLayout.xml, doxygen will parse it automatically even if
  the \c LAYOUT_FILE tag is left empty.
 ]]>
       </docs>
@@ -1169,11 +1169,11 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
     <option type='list' id='CITE_BIB_FILES' format='file'>
       <docs>
 <![CDATA[
- The \c CITE_BIB_FILES tag can be used to specify one or more \c bib files 
- containing the reference definitions. This must be a list of <code>.bib</code> files. The 
- <code>.bib</code> extension is automatically appended if omitted. This requires the 
+ The \c CITE_BIB_FILES tag can be used to specify one or more \c bib files
+ containing the reference definitions. This must be a list of <code>.bib</code> files. The
+ <code>.bib</code> extension is automatically appended if omitted. This requires the
  \c bibtex tool to be installed. See also https://en.wikipedia.org/wiki/BibTeX for
- more info. For \f$\mbox{\LaTeX}\f$ the style of the bibliography can be controlled 
+ more info. For \f$\mbox{\LaTeX}\f$ the style of the bibliography can be controlled
  using \ref cfg_latex_bib_style "LATEX_BIB_STYLE".
  To use this feature you need \c bibtex and \c perl available in the search path.
  See also \ref cmdcite "\\cite" for info how to create references.
@@ -1194,7 +1194,7 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
       <docs>
 <![CDATA[
  The \c WARNINGS tag can be used to turn on/off the warning messages that are
- generated to standard error (\c stderr) by doxygen. If \c WARNINGS is set to 
+ generated to standard error (\c stderr) by doxygen. If \c WARNINGS is set to
  \c YES this implies that the warnings are on.
 <br>
  \b Tip: Turn warnings on while writing the documentation.
@@ -1216,14 +1216,14 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
  If the \c WARN_IF_DOC_ERROR tag is set to \c YES, doxygen will generate warnings for
  potential errors in the documentation, such as not documenting some
  parameters in a documented function, or documenting parameters that
- don't exist or using markup commands wrongly. 
+ don't exist or using markup commands wrongly.
 ]]>
       </docs>
     </option>
     <option type='bool' id='WARN_NO_PARAMDOC' defval='0'>
       <docs>
 <![CDATA[
- This \c WARN_NO_PARAMDOC option can be enabled to get warnings for 
+ This \c WARN_NO_PARAMDOC option can be enabled to get warnings for
  functions that are documented, but have no documentation for their parameters
  or return value. If set to \c NO, doxygen will only warn about
  wrong or incomplete parameter documentation, but not about the absence of
@@ -1243,13 +1243,13 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
       <docs>
 <![CDATA[
  The \c WARN_FORMAT tag determines the format of the warning messages that
- doxygen can produce. The string should contain the <code>\$file</code>, 
- <code>\$line</code>, and <code>\$text</code> 
+ doxygen can produce. The string should contain the <code>\$file</code>,
+ <code>\$line</code>, and <code>\$text</code>
  tags, which will be replaced by the file and line number from which the
  warning originated and the warning text.
- Optionally the format may contain 
- <code>$version</code>, which will be replaced by the version of the file (if it could 
- be obtained via \ref cfg_file_version_filter "FILE_VERSION_FILTER") 
+ Optionally the format may contain
+ <code>$version</code>, which will be replaced by the version of the file (if it could
+ be obtained via \ref cfg_file_version_filter "FILE_VERSION_FILTER")
 ]]>
       </docs>
     </option>
@@ -1257,7 +1257,7 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
       <docs>
 <![CDATA[
  The \c WARN_LOGFILE tag can be used to specify a file to which warning
- and error messages should be written. If left blank the output is written 
+ and error messages should be written. If left blank the output is written
  to standard error (`stderr`).
 ]]>
       </docs>
@@ -1267,9 +1267,9 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
     <option type='list' id='INPUT' format='filedir'>
       <docs>
 <![CDATA[
- The \c INPUT tag is used to specify the files and/or directories that contain 
- documented source files. You may enter file names like 
- \c myfile.cpp or directories like \c /usr/src/myproject. 
+ The \c INPUT tag is used to specify the files and/or directories that contain
+ documented source files. You may enter file names like
+ \c myfile.cpp or directories like \c /usr/src/myproject.
  Separate the files or directories with spaces. See also
  \ref cfg_file_patterns "FILE_PATTERNS"  and
  \ref cfg_extension_mapping "EXTENSION_MAPPING"
@@ -1282,10 +1282,10 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
     <option type='string' id='INPUT_ENCODING' format='string' defval='UTF-8'>
       <docs>
 <![CDATA[
- This tag can be used to specify the character encoding of the source files that 
+ This tag can be used to specify the character encoding of the source files that
  doxygen parses. Internally doxygen uses the UTF-8 encoding.
- Doxygen uses `libiconv` (or the `iconv` built into `libc`) for the transcoding. 
- See <a href="https://www.gnu.org/software/libiconv/">the libiconv documentation</a> for 
+ Doxygen uses `libiconv` (or the `iconv` built into `libc`) for the transcoding.
+ See <a href="https://www.gnu.org/software/libiconv/">the libiconv documentation</a> for
  the list of possible encodings.
 ]]>
       </docs>
@@ -1293,9 +1293,9 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
     <option type='list' id='FILE_PATTERNS' format='string'>
       <docs>
 <![CDATA[
- If the value of the \ref cfg_input "INPUT" tag contains directories, you can use the 
- \c FILE_PATTERNS tag to specify one or more wildcard patterns 
- (like `*.cpp` and `*.h`) to filter out the source-files 
+ If the value of the \ref cfg_input "INPUT" tag contains directories, you can use the
+ \c FILE_PATTERNS tag to specify one or more wildcard patterns
+ (like `*.cpp` and `*.h`) to filter out the source-files
  in the directories.<br>
  Note that for custom extensions or not directly supported extensions you also
  need to set \ref cfg_extension_mapping "EXTENSION_MAPPING" for the extension
@@ -1347,6 +1347,8 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
       <value name='*.vhdl'/>
       <value name='*.ucf'/>
       <value name='*.qsf'/>
+      <value name='*.sml'/>
+      <value name='*.sig'/>
     </option>
     <option type='bool' id='RECURSIVE' defval='0'>
       <docs>
@@ -1369,7 +1371,7 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
     <option type='bool' id='EXCLUDE_SYMLINKS' defval='0'>
       <docs>
 <![CDATA[
- The \c EXCLUDE_SYMLINKS tag can be used to select whether or not files or directories 
+ The \c EXCLUDE_SYMLINKS tag can be used to select whether or not files or directories
  that are symbolic links (a Unix file system feature) are excluded from the input.
 ]]>
       </docs>
@@ -1380,8 +1382,8 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
  If the value of the \ref cfg_input "INPUT" tag contains directories, you can use the
  \c EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude
  certain files from those directories.
- <br>Note that the wildcards are matched 
- against the file with absolute path, so to exclude all test directories 
+ <br>Note that the wildcards are matched
+ against the file with absolute path, so to exclude all test directories
  for example use the pattern `*``/test/``*`
 ]]>
       </docs>
@@ -1389,13 +1391,13 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
     <option type='list' id='EXCLUDE_SYMBOLS' format='string'>
       <docs>
 <![CDATA[
- The \c EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names 
- (namespaces, classes, functions, etc.) that should be excluded from the 
- output. The symbol name can be a fully qualified name, a word, or if the 
- wildcard `*` is used, a substring. Examples: `ANamespace`, `AClass`, 
- `AClass::ANamespace`, `ANamespace::*Test` 
- <br>Note that the wildcards are matched against the file with absolute path, 
- so to exclude all test directories use the pattern 
+ The \c EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names
+ (namespaces, classes, functions, etc.) that should be excluded from the
+ output. The symbol name can be a fully qualified name, a word, or if the
+ wildcard `*` is used, a substring. Examples: `ANamespace`, `AClass`,
+ `AClass::ANamespace`, `ANamespace::*Test`
+ <br>Note that the wildcards are matched against the file with absolute path,
+ so to exclude all test directories use the pattern
  `*``/test/``*`
 ]]>
       </docs>
@@ -1412,7 +1414,7 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
     <option type='list' id='EXAMPLE_PATTERNS' format='string'>
       <docs>
 <![CDATA[
- If the value of the \ref cfg_example_path "EXAMPLE_PATH" tag contains directories, 
+ If the value of the \ref cfg_example_path "EXAMPLE_PATH" tag contains directories,
  you can use the
  \c EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like `*.cpp`
  and `*.h`) to filter out the source-files in the directories. If left
@@ -1426,8 +1428,8 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
 <![CDATA[
  If the \c EXAMPLE_RECURSIVE tag is set to \c YES then subdirectories will be
  searched for input files to be used with the \ref cmdinclude "\\include" or
- \ref cmddontinclude "\\dontinclude" 
- commands irrespective of the value of the \ref cfg_recursive "RECURSIVE" tag. 
+ \ref cmddontinclude "\\dontinclude"
+ commands irrespective of the value of the \ref cfg_recursive "RECURSIVE" tag.
 ]]>
       </docs>
     </option>
@@ -1435,7 +1437,7 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
       <docs>
 <![CDATA[
  The \c IMAGE_PATH tag can be used to specify one or more files or
- directories that contain images that are to be included in the 
+ directories that contain images that are to be included in the
  documentation (see the \ref cmdimage "\\image" command).
 ]]>
       </docs>
@@ -1452,9 +1454,9 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
  where <code>\<filter\></code>
  is the value of the \c INPUT_FILTER tag, and <code>\<input-file\></code> is the name of an
  input file. Doxygen will then use the output that the filter program writes
- to standard output.  If \ref cfg_filter_patterns "FILTER_PATTERNS" is specified, this tag will be ignored. 
- <br>Note that the filter must not add or remove lines; it is applied before the 
- code is scanned, but not when the output code is generated. If lines are added 
+ to standard output.  If \ref cfg_filter_patterns "FILTER_PATTERNS" is specified, this tag will be ignored.
+ <br>Note that the filter must not add or remove lines; it is applied before the
+ code is scanned, but not when the output code is generated. If lines are added
  or removed, the anchors will not be placed correctly.
  <br>Note that for custom extensions or not directly supported extensions you also
  need to set \ref cfg_extension_mapping "EXTENSION_MAPPING" for the extension
@@ -1471,7 +1473,7 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
  filter if there is a match. The filters are a list of the form:
  pattern=filter (like `*.cpp=my_cpp_filter`). See \ref cfg_input_filter "INPUT_FILTER" for further
  information on how filters are used. If the \c FILTER_PATTERNS tag is empty or if
- none of the patterns match the file name, \ref cfg_input_filter "INPUT_FILTER" is 
+ none of the patterns match the file name, \ref cfg_input_filter "INPUT_FILTER" is
  applied.
  <br>Note that for custom extensions or not directly supported extensions you also
  need to set \ref cfg_extension_mapping "EXTENSION_MAPPING" for the extension
@@ -1484,7 +1486,7 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
 <![CDATA[
  If the \c FILTER_SOURCE_FILES tag is set to \c YES, the input filter (if set using
  \ref cfg_input_filter "INPUT_FILTER") will also be used to filter the input
- files that are used for producing the source files to browse 
+ files that are used for producing the source files to browse
  (i.e. when \ref cfg_source_browser "SOURCE_BROWSER" is set to \c YES).
 ]]>
       </docs>
@@ -1492,10 +1494,10 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
     <option type='list' id='FILTER_SOURCE_PATTERNS' format='string' depends='FILTER_SOURCE_FILES'>
       <docs>
 <![CDATA[
- The \c FILTER_SOURCE_PATTERNS tag can be used to specify source filters per 
- file pattern. A pattern will override the setting 
- for \ref cfg_filter_patterns "FILTER_PATTERN" (if any) 
- and it is also possible to disable source filtering for a specific pattern 
+ The \c FILTER_SOURCE_PATTERNS tag can be used to specify source filters per
+ file pattern. A pattern will override the setting
+ for \ref cfg_filter_patterns "FILTER_PATTERN" (if any)
+ and it is also possible to disable source filtering for a specific pattern
  using `*.ext=` (so without naming a filter).
 ]]>
       </docs>
@@ -1503,9 +1505,9 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
     <option type='string' id='USE_MDFILE_AS_MAINPAGE' format='string' defval=''>
       <docs>
 <![CDATA[
- If the \c USE_MDFILE_AS_MAINPAGE tag refers to the name of a markdown file that 
- is part of the input, its contents will be placed on the main page (`index.html`). 
- This can be useful if you have a project on for instance GitHub and want to reuse 
+ If the \c USE_MDFILE_AS_MAINPAGE tag refers to the name of a markdown file that
+ is part of the input, its contents will be placed on the main page (`index.html`).
+ This can be useful if you have a project on for instance GitHub and want to reuse
  the introduction page also for the doxygen output.
 ]]>
       </docs>
@@ -1544,7 +1546,7 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
 <![CDATA[
  If the \c REFERENCED_BY_RELATION tag is set to \c YES
  then for each documented function all documented
- functions referencing it will be listed. 
+ functions referencing it will be listed.
 ]]>
       </docs>
     </option>
@@ -1553,7 +1555,7 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
 <![CDATA[
  If the \c REFERENCES_RELATION tag is set to \c YES
  then for each documented function all documented entities
- called/used by that function will be listed. 
+ called/used by that function will be listed.
 ]]>
       </docs>
     </option>
@@ -1561,9 +1563,9 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
       <docs>
 <![CDATA[
  If the \c REFERENCES_LINK_SOURCE tag is set to \c YES
- and \ref cfg_source_browser "SOURCE_BROWSER" tag is set to \c YES then the hyperlinks from 
+ and \ref cfg_source_browser "SOURCE_BROWSER" tag is set to \c YES then the hyperlinks from
  functions in \ref cfg_references_relation "REFERENCES_RELATION" and
- \ref cfg_referenced_by_relation "REFERENCED_BY_RELATION" lists will 
+ \ref cfg_referenced_by_relation "REFERENCED_BY_RELATION" lists will
  link to the source code.  Otherwise they will link to the documentation.
 ]]>
       </docs>
@@ -1571,11 +1573,11 @@ FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
     <option type='bool' id='SOURCE_TOOLTIPS' defval='1' depends='SOURCE_BROWSER'>
       <docs>
 <![CDATA[
-If SOURCE_TOOLTIPS is enabled (the default) then hovering a hyperlink in the 
-source code will show a tooltip with additional information such as prototype, 
-brief description and links to the definition and documentation. Since this will 
-make the HTML file larger and loading of large files a bit slower, you can opt 
-to disable this feature. 
+If SOURCE_TOOLTIPS is enabled (the default) then hovering a hyperlink in the
+source code will show a tooltip with additional information such as prototype,
+brief description and links to the definition and documentation. Since this will
+make the HTML file larger and loading of large files a bit slower, you can opt
+to disable this feature.
 ]]>
       </docs>
     </option>
@@ -1585,8 +1587,8 @@ to disable this feature.
  If the \c USE_HTAGS tag is set to \c YES then the references to source code
  will point to the HTML generated by the \c htags(1) tool instead of doxygen
  built-in source browser. The \c htags tool is part of GNU's global source
- tagging system (see https://www.gnu.org/software/global/global.html). You 
- will need version 4.8.6 or higher. 
+ tagging system (see https://www.gnu.org/software/global/global.html). You
+ will need version 4.8.6 or higher.
 <br>
  To use it do the following:
  -# Install the latest version of \c global
@@ -1616,10 +1618,10 @@ to disable this feature.
     <option type='bool' id='CLANG_ASSISTED_PARSING' setting='USE_LIBCLANG' defval='0'>
       <docs>
 <![CDATA[
-  If the \c CLANG_ASSISTED_PARSING tag is set to \c YES then doxygen will use the 
-  <a href="http://clang.llvm.org/">clang parser</a> for more accurate parsing 
-  at the cost of reduced performance. This can be particularly helpful with 
-  template rich C++ code for which doxygen's built-in parser lacks the 
+  If the \c CLANG_ASSISTED_PARSING tag is set to \c YES then doxygen will use the
+  <a href="http://clang.llvm.org/">clang parser</a> for more accurate parsing
+  at the cost of reduced performance. This can be particularly helpful with
+  template rich C++ code for which doxygen's built-in parser lacks the
   necessary type information.
 
   @note The availability of this option depends on whether or not doxygen
@@ -1630,9 +1632,9 @@ to disable this feature.
     <option type='list' id='CLANG_OPTIONS' format='string' setting='USE_LIBCLANG' depends='CLANG_ASSISTED_PARSING'>
       <docs>
 <![CDATA[
- If clang assisted parsing is enabled you can provide the compiler with command 
- line options that you would normally use when invoking the compiler. Note that 
- the include paths will already be set by doxygen for the files and directories 
+ If clang assisted parsing is enabled you can provide the compiler with command
+ line options that you would normally use when invoking the compiler. Note that
+ the include paths will already be set by doxygen for the files and directories
  specified with \ref cfg_input "INPUT" and \ref cfg_include_path "INCLUDE_PATH".
 ]]>
       </docs>
@@ -1657,7 +1659,7 @@ to disable this feature.
       <docs>
 <![CDATA[
  If the \c ALPHABETICAL_INDEX tag is set to \c YES, an alphabetical index
- of all compounds will be generated. Enable this if the project contains 
+ of all compounds will be generated. Enable this if the project contains
  a lot of classes, structs, unions or interfaces.
 ]]>
       </docs>
@@ -1665,7 +1667,7 @@ to disable this feature.
     <option type='int' id='COLS_IN_ALPHA_INDEX' minval='1' maxval='20' defval='5' depends='ALPHABETICAL_INDEX'>
       <docs>
 <![CDATA[
- The \c COLS_IN_ALPHA_INDEX tag can be 
+ The \c COLS_IN_ALPHA_INDEX tag can be
  used to specify the number of columns in which the alphabetical index list will be split.
 ]]>
       </docs>
@@ -1673,9 +1675,9 @@ to disable this feature.
     <option type='list' id='IGNORE_PREFIX' format='string' depends='ALPHABETICAL_INDEX'>
       <docs>
 <![CDATA[
- In case all classes in a project start with a common prefix, all classes will 
+ In case all classes in a project start with a common prefix, all classes will
  be put under the same header in the alphabetical index.
- The \c IGNORE_PREFIX tag can be used to specify a prefix 
+ The \c IGNORE_PREFIX tag can be used to specify a prefix
  (or a list of prefixes) that should be ignored while generating the index headers.
 ]]>
       </docs>
@@ -1702,7 +1704,7 @@ to disable this feature.
     <option type='string' id='HTML_FILE_EXTENSION' format='string' defval='.html' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- The \c HTML_FILE_EXTENSION tag can be used to specify the file extension for 
+ The \c HTML_FILE_EXTENSION tag can be used to specify the file extension for
  each generated HTML page (for example: <code>.htm, .php, .asp</code>).
 ]]>
       </docs>
@@ -1710,10 +1712,10 @@ to disable this feature.
     <option type='string' id='HTML_HEADER' format='file' defval='' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- The \c HTML_HEADER tag can be used to specify a user-defined HTML 
- header file for each generated HTML page. 
- If the tag is left blank doxygen will generate a 
- standard header. 
+ The \c HTML_HEADER tag can be used to specify a user-defined HTML
+ header file for each generated HTML page.
+ If the tag is left blank doxygen will generate a
+ standard header.
 <br>
  To get valid HTML the header file that
  includes any scripts and style sheets that doxygen
@@ -1729,7 +1731,7 @@ doxygen -w html new_header.html new_footer.html new_stylesheet.css YourConfigFil
  the default header that doxygen normally uses.
 
  @note The header is subject to change so you typically
- have to regenerate the default header when upgrading to a newer version of 
+ have to regenerate the default header when upgrading to a newer version of
  doxygen.
 ]]>
       </docs>
@@ -1742,7 +1744,7 @@ doxygen -w html new_header.html new_footer.html new_stylesheet.css YourConfigFil
  <dt><code>\$date</code><dd>will be replaced with the current date.
  <dt><code>\$year</code><dd>will be replaces with the current year.
  <dt><code>\$doxygenversion</code><dd>will be replaced with the version of doxygen
- <dt><code>\$projectname</code><dd>will be replaced with the name of 
+ <dt><code>\$projectname</code><dd>will be replaced with the name of
             the project (see \ref cfg_project_name "PROJECT_NAME")
  <dt><code>\$projectnumber</code><dd>will be replaced with the project number
             (see \ref cfg_project_number "PROJECT_NUMBER")
@@ -1750,25 +1752,25 @@ doxygen -w html new_header.html new_footer.html new_stylesheet.css YourConfigFil
             description (see \ref cfg_project_brief "PROJECT_BRIEF")
  <dt><code>\$projectlogo</code><dd>will be replaced with the project logo
             (see \ref cfg_project_logo "PROJECT_LOGO")
- <dt><code>\$treeview</code><dd>will be replaced with links to 
-            the javascript and style sheets needed for the navigation tree 
-            (or an empty string when \ref cfg_generate_treeview "GENERATE_TREEVIEW" 
+ <dt><code>\$treeview</code><dd>will be replaced with links to
+            the javascript and style sheets needed for the navigation tree
+            (or an empty string when \ref cfg_generate_treeview "GENERATE_TREEVIEW"
             is disabled).
- <dt><code>\$search</code><dd>will be replaced with a links to 
-            the javascript and style sheets needed for the search engine 
-            (or an empty string when \ref cfg_searchengine "SEARCHENGINE" 
+ <dt><code>\$search</code><dd>will be replaced with a links to
+            the javascript and style sheets needed for the search engine
+            (or an empty string when \ref cfg_searchengine "SEARCHENGINE"
             is disabled).
- <dt><code>\$mathjax</code><dd>will be replaced with a links to 
-            the javascript and style sheets needed for the MathJax feature 
+ <dt><code>\$mathjax</code><dd>will be replaced with a links to
+            the javascript and style sheets needed for the MathJax feature
             (or an empty string when \ref cfg_use_mathjax "USE_MATHJAX" is disabled).
  <dt><code>\$relpath^</code><dd>
- If \ref cfg_create_subdirs "CREATE_SUBDIRS" is enabled, the command <code>\$relpath^</code> can be 
+ If \ref cfg_create_subdirs "CREATE_SUBDIRS" is enabled, the command <code>\$relpath^</code> can be
  used to produce a relative path to the root of the HTML output directory,
  e.g. use <code>\$relpath^doxygen.css</code>, to refer to the standard style sheet.
  </dl>
 
- To cope with differences in the layout of the header and footer that depend on 
- configuration settings, the header can also contain special blocks that 
+ To cope with differences in the layout of the header and footer that depend on
+ configuration settings, the header can also contain special blocks that
  will be copied to the output or skipped depending on the configuration.
  Such blocks have the following form:
 \verbatim
@@ -1797,9 +1799,9 @@ doxygen -w html new_header.html new_footer.html new_stylesheet.css YourConfigFil
       when the \ref cfg_project_logo "PROJECT_LOGO" option is not empty.
  <dt><code>TITLEAREA</code><dd>Content within this block is copied to the output
      when a title is visible at the top of each page. This is the case
-     if either \ref cfg_project_name "PROJECT_NAME", 
-     \ref cfg_project_brief "PROJECT_BRIEF", \ref cfg_project_logo "PROJECT_LOGO" 
-     is filled in or if both \ref cfg_disable_index "DISABLE_INDEX" and 
+     if either \ref cfg_project_name "PROJECT_NAME",
+     \ref cfg_project_brief "PROJECT_BRIEF", \ref cfg_project_logo "PROJECT_LOGO"
+     is filled in or if both \ref cfg_disable_index "DISABLE_INDEX" and
      \ref cfg_searchengine "SEARCHENGINE" are enabled.
  </dl>
 ]]>
@@ -1814,12 +1816,12 @@ doxygen -w html new_header.html new_footer.html new_stylesheet.css YourConfigFil
     <option type='string' id='HTML_FOOTER' format='file' defval='' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- The \c HTML_FOOTER tag can be used to specify a user-defined HTML footer for 
- each generated HTML page. 
+ The \c HTML_FOOTER tag can be used to specify a user-defined HTML footer for
+ each generated HTML page.
  If the tag is left blank doxygen will generate a standard footer.
 
- See \ref cfg_html_header "HTML_HEADER" for more information on 
- how to generate a default footer and what special commands can be 
+ See \ref cfg_html_header "HTML_HEADER" for more information on
+ how to generate a default footer and what special commands can be
  used inside the footer.
 
  See also section \ref doxygen_usage for information on how to generate
@@ -1830,17 +1832,17 @@ doxygen -w html new_header.html new_footer.html new_stylesheet.css YourConfigFil
     <option type='string' id='HTML_STYLESHEET' format='file' defval='' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- The \c HTML_STYLESHEET tag can be used to specify a user-defined cascading 
- style sheet that is used by each HTML page. It can be used to 
- fine-tune the look of the HTML output. If left blank doxygen 
- will generate a default style sheet. 
- 
+ The \c HTML_STYLESHEET tag can be used to specify a user-defined cascading
+ style sheet that is used by each HTML page. It can be used to
+ fine-tune the look of the HTML output. If left blank doxygen
+ will generate a default style sheet.
+
  See also section \ref doxygen_usage for information on how to generate
  the style sheet that doxygen normally uses.
 
- \note It is recommended to use 
+ \note It is recommended to use
  \ref cfg_html_extra_stylesheet "HTML_EXTRA_STYLESHEET" instead of this tag,
- as it is more robust and 
+ as it is more robust and
  this tag (<code>HTML_STYLESHEET</code>) will in the future become obsolete.
 ]]>
       </docs>
@@ -1848,12 +1850,12 @@ doxygen -w html new_header.html new_footer.html new_stylesheet.css YourConfigFil
     <option type='list' id='HTML_EXTRA_STYLESHEET' format='file' defval='' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- The \c HTML_EXTRA_STYLESHEET tag can be used to specify additional 
- user-defined cascading style sheets that are included after the standard 
- style sheets created by doxygen. Using this option one can overrule 
- certain style aspects. This is preferred over using \ref cfg_html_stylesheet "HTML_STYLESHEET" 
- since it does not replace the standard style sheet and is therefore more 
- robust against future updates. Doxygen will copy the style sheet files to 
+ The \c HTML_EXTRA_STYLESHEET tag can be used to specify additional
+ user-defined cascading style sheets that are included after the standard
+ style sheets created by doxygen. Using this option one can overrule
+ certain style aspects. This is preferred over using \ref cfg_html_stylesheet "HTML_STYLESHEET"
+ since it does not replace the standard style sheet and is therefore more
+ robust against future updates. Doxygen will copy the style sheet files to
  the output directory.
  \note The order of the extra style sheet files is of importance (e.g. the last
  style sheet in the list overrules the setting of the previous ones in the list).
@@ -1902,12 +1904,12 @@ hr.footer {
     <option type='list' id='HTML_EXTRA_FILES' format='file' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- The \c HTML_EXTRA_FILES tag can be used to specify one or more extra images or 
- other source files which should be copied to the HTML output directory. Note 
- that these files will be copied to the base HTML output directory. Use the 
+ The \c HTML_EXTRA_FILES tag can be used to specify one or more extra images or
+ other source files which should be copied to the HTML output directory. Note
+ that these files will be copied to the base HTML output directory. Use the
  <code>$relpath^</code> marker in the \ref cfg_html_header "HTML_HEADER" and/or
- \ref cfg_html_footer "HTML_FOOTER" files to load these 
- files. In the \ref cfg_html_stylesheet "HTML_STYLESHEET" file, use the file name only. Also note that 
+ \ref cfg_html_footer "HTML_FOOTER" files to load these
+ files. In the \ref cfg_html_stylesheet "HTML_STYLESHEET" file, use the file name only. Also note that
  the files will be copied as-is; there are no commands or markers available.
 ]]>
       </docs>
@@ -1915,32 +1917,32 @@ hr.footer {
     <option type='int' id='HTML_COLORSTYLE_HUE' minval='0' maxval='359' defval='220' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- The \c HTML_COLORSTYLE_HUE tag controls the color of the HTML output. 
- Doxygen will adjust the colors in the style sheet and background images 
- according to this color. Hue is specified as an angle on a colorwheel, 
- see https://en.wikipedia.org/wiki/Hue for more information. 
- For instance the value 0 represents red, 60 is yellow, 120 is green, 
- 180 is cyan, 240 is blue, 300 purple, and 360 is red again. 
+ The \c HTML_COLORSTYLE_HUE tag controls the color of the HTML output.
+ Doxygen will adjust the colors in the style sheet and background images
+ according to this color. Hue is specified as an angle on a colorwheel,
+ see https://en.wikipedia.org/wiki/Hue for more information.
+ For instance the value 0 represents red, 60 is yellow, 120 is green,
+ 180 is cyan, 240 is blue, 300 purple, and 360 is red again.
 ]]>
       </docs>
     </option>
     <option type='int' id='HTML_COLORSTYLE_SAT' minval='0' maxval='255' defval='100' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- The \c HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of 
- the colors in the HTML output. For a value of 0 the output will use 
- grayscales only. A value of 255 will produce the most vivid colors. 
+ The \c HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of
+ the colors in the HTML output. For a value of 0 the output will use
+ grayscales only. A value of 255 will produce the most vivid colors.
 ]]>
       </docs>
     </option>
     <option type='int' id='HTML_COLORSTYLE_GAMMA' minval='40' maxval='240' defval='80' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- The \c HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to 
- the luminance component of the colors in the HTML output. Values below 
- 100 gradually make the output lighter, whereas values above 100 make 
- the output darker. The value divided by 100 is the actual gamma applied, 
- so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2, 
+ The \c HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to
+ the luminance component of the colors in the HTML output. Values below
+ 100 gradually make the output lighter, whereas values above 100 make
+ the output darker. The value divided by 100 is the actual gamma applied,
+ so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2,
  and 100 does not change the gamma.
 ]]>
       </docs>
@@ -1948,9 +1950,9 @@ hr.footer {
     <option type='bool' id='HTML_TIMESTAMP' defval='0' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- If the \c HTML_TIMESTAMP tag is set to \c YES then the footer of 
- each generated HTML page will contain the date and time when the page 
- was generated. Setting this to \c YES can help to show when doxygen was last run 
+ If the \c HTML_TIMESTAMP tag is set to \c YES then the footer of
+ each generated HTML page will contain the date and time when the page
+ was generated. Setting this to \c YES can help to show when doxygen was last run
  and thus if the documentation is up to date.
 ]]>
       </docs>
@@ -1958,11 +1960,11 @@ hr.footer {
     <option type='bool' id='HTML_DYNAMIC_MENUS' defval='1' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- If the \c HTML_DYNAMIC_MENUS tag is set to \c YES then the generated HTML 
- documentation will contain a main index with vertical navigation menus that 
- are dynamically created via Javascript. If disabled, the navigation index will consists of 
- multiple levels of tabs that are statically embedded in every HTML page. 
- Disable this option to support browsers that do not have Javascript, like 
+ If the \c HTML_DYNAMIC_MENUS tag is set to \c YES then the generated HTML
+ documentation will contain a main index with vertical navigation menus that
+ are dynamically created via Javascript. If disabled, the navigation index will consists of
+ multiple levels of tabs that are statically embedded in every HTML page.
+ Disable this option to support browsers that do not have Javascript, like
  the Qt help browser.
 ]]>
       </docs>
@@ -1972,20 +1974,20 @@ hr.footer {
 <![CDATA[
  If the \c HTML_DYNAMIC_SECTIONS tag is set to \c YES then the generated HTML
  documentation will contain sections that can be hidden and shown after the
- page has loaded. 
+ page has loaded.
 ]]>
       </docs>
     </option>
     <option type='int' id='HTML_INDEX_NUM_ENTRIES' minval='0' maxval='9999' defval='100' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- With \c HTML_INDEX_NUM_ENTRIES one can control the preferred number of 
- entries shown in the various tree structured indices initially; the user 
- can expand and collapse entries dynamically later on. Doxygen will expand 
- the tree to such a level that at most the specified number of entries are 
- visible (unless a fully collapsed tree already exceeds this amount). 
- So setting the number of entries 1 will produce a full collapsed tree by 
- default. 0 is a special value representing an infinite number of entries 
+ With \c HTML_INDEX_NUM_ENTRIES one can control the preferred number of
+ entries shown in the various tree structured indices initially; the user
+ can expand and collapse entries dynamically later on. Doxygen will expand
+ the tree to such a level that at most the specified number of entries are
+ visible (unless a fully collapsed tree already exceeds this amount).
+ So setting the number of entries 1 will produce a full collapsed tree by
+ default. 0 is a special value representing an infinite number of entries
  and will result in a full expanded tree by default.
 ]]>
       </docs>
@@ -1994,13 +1996,13 @@ hr.footer {
       <docs>
 <![CDATA[
  If the \c GENERATE_DOCSET tag is set to \c YES, additional index files
- will be generated that can be used as input for 
+ will be generated that can be used as input for
  <a href="https://developer.apple.com/tools/xcode/">Apple's Xcode 3
  integrated development environment</a>, introduced with OSX 10.5 (Leopard).
  To create a documentation set, doxygen will generate a Makefile in the
  HTML output directory. Running \c make will produce the docset in that
- directory and running <code>make install</code> will install the docset in 
- <code>~/Library/Developer/Shared/Documentation/DocSets</code> 
+ directory and running <code>make install</code> will install the docset in
+ <code>~/Library/Developer/Shared/Documentation/DocSets</code>
  so that Xcode will find it at startup. See
  https://developer.apple.com/tools/creatingdocsetswithdoxygen.html for
  more information.
@@ -2012,7 +2014,7 @@ hr.footer {
 <![CDATA[
  This tag determines the name of the docset
  feed. A documentation feed provides an umbrella under which multiple
- documentation sets from a single provider (such as a company or product suite) 
+ documentation sets from a single provider (such as a company or product suite)
  can be grouped.
 ]]>
       </docs>
@@ -2022,7 +2024,7 @@ hr.footer {
 <![CDATA[
  This tag specifies a string that
  should uniquely identify the documentation set bundle. This should be a
- reverse domain-name style string, e.g. <code>com.mycompany.MyDocSet</code>. 
+ reverse domain-name style string, e.g. <code>com.mycompany.MyDocSet</code>.
  Doxygen will append <code>.docset</code> to the name.
 ]]>
       </docs>
@@ -2031,8 +2033,8 @@ hr.footer {
       <docs>
 <![CDATA[
 The \c DOCSET_PUBLISHER_ID
-tag specifies a string that should uniquely identify 
-the documentation publisher. This should be a reverse domain-name style 
+tag specifies a string that should uniquely identify
+the documentation publisher. This should be a reverse domain-name style
 string, e.g. <code>com.mycompany.MyDocSet.documentation</code>.
 ]]>
       </docs>
@@ -2048,14 +2050,14 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
       <docs>
 <![CDATA[
  If the \c GENERATE_HTMLHELP tag is set to \c YES then
- doxygen generates three additional HTML index files: 
- \c index.hhp, \c index.hhc, and \c index.hhk. The \c index.hhp is a 
- project file that can be read by 
+ doxygen generates three additional HTML index files:
+ \c index.hhp, \c index.hhc, and \c index.hhk. The \c index.hhp is a
+ project file that can be read by
  <a href="http://www.microsoft.com/en-us/download/details.aspx?id=21138">
  Microsoft's HTML Help Workshop</a>
  on Windows.
 <br>
- The HTML Help Workshop contains a compiler that can convert all HTML output 
+ The HTML Help Workshop contains a compiler that can convert all HTML output
  generated by doxygen into a single compiled HTML file (`.chm`). Compiled
  HTML files are now used as the Windows 98 help format, and will replace
  the old Windows help format (`.hlp`) on all Windows platforms in the future.
@@ -2079,7 +2081,7 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
       <docs>
 <![CDATA[
   The \c HHC_LOCATION tag can
-  be used to specify the location (absolute path including file name) of 
+  be used to specify the location (absolute path including file name) of
   the HTML help compiler (\c hhc.exe). If non-empty, doxygen will try to run
   the HTML help compiler on the generated \c index.hhp.
 ]]>
@@ -2097,9 +2099,9 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
     <option type='string' id='CHM_INDEX_ENCODING' format='string' defval='' depends='GENERATE_HTMLHELP'>
       <docs>
 <![CDATA[
- The \c CHM_INDEX_ENCODING 
- is used to encode HtmlHelp index (\c hhk), content (\c hhc) and project file 
- content. 
+ The \c CHM_INDEX_ENCODING
+ is used to encode HtmlHelp index (\c hhk), content (\c hhc) and project file
+ content.
 ]]>
       </docs>
     </option>
@@ -2116,8 +2118,8 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
     <option type='bool' id='TOC_EXPAND' defval='0' depends='GENERATE_HTMLHELP'>
       <docs>
 <![CDATA[
- The \c TOC_EXPAND flag can be set to \c YES to add extra items for 
- group members to the table of contents of the HTML help documentation 
+ The \c TOC_EXPAND flag can be set to \c YES to add extra items for
+ group members to the table of contents of the HTML help documentation
  and to the tree view.
 ]]>
       </docs>
@@ -2196,15 +2198,15 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
     <option type='bool' id='GENERATE_ECLIPSEHELP' defval='0' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- If the \c GENERATE_ECLIPSEHELP tag is set to \c YES, additional index files  
- will be generated, together with the HTML files, they form an `Eclipse` help 
- plugin. 
+ If the \c GENERATE_ECLIPSEHELP tag is set to \c YES, additional index files
+ will be generated, together with the HTML files, they form an `Eclipse` help
+ plugin.
 
- To install this plugin and make it available under the help contents 
- menu in `Eclipse`, the contents of the directory containing the HTML and XML 
- files needs to be copied into the plugins directory of eclipse. The name of 
- the directory within the plugins directory should be the same as 
- the \ref cfg_eclipse_doc_id "ECLIPSE_DOC_ID" value. 
+ To install this plugin and make it available under the help contents
+ menu in `Eclipse`, the contents of the directory containing the HTML and XML
+ files needs to be copied into the plugins directory of eclipse. The name of
+ the directory within the plugins directory should be the same as
+ the \ref cfg_eclipse_doc_id "ECLIPSE_DOC_ID" value.
 
  After copying `Eclipse` needs to be restarted before the help appears.
 ]]>
@@ -2213,8 +2215,8 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
     <option type='string' id='ECLIPSE_DOC_ID' format='string' defval='org.doxygen.Project' depends='GENERATE_ECLIPSEHELP'>
       <docs>
 <![CDATA[
- A unique identifier for the `Eclipse` help plugin. When installing the plugin 
- the directory name containing the HTML and XML files should also have 
+ A unique identifier for the `Eclipse` help plugin. When installing the plugin
+ the directory name containing the HTML and XML files should also have
  this name. Each documentation set should have its own identifier.
 ]]>
       </docs>
@@ -2226,8 +2228,8 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
  might be necessary to disable the index and replace it with your own.
  The \c DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at
  top of each HTML page. A value of \c NO enables the index and the
- value \c YES disables it. Since the tabs in the index contain the same 
- information as the navigation tree, you can set this option to \c YES if 
+ value \c YES disables it. Since the tabs in the index contain the same
+ information as the navigation tree, you can set this option to \c YES if
  you also set \ref cfg_generate_treeview "GENERATE_TREEVIEW" to \c YES.
 ]]>
       </docs>
@@ -2250,7 +2252,7 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
  the \ref cfg_project_name "PROJECT_NAME".
 
  Since the tree basically has the same information as the tab index, you could
- consider setting \ref cfg_disable_index "DISABLE_INDEX" to \c YES when 
+ consider setting \ref cfg_disable_index "DISABLE_INDEX" to \c YES when
  enabling this option.
 ]]>
       </docs>
@@ -2260,7 +2262,7 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
       <docs>
 <![CDATA[
  The \c ENUM_VALUES_PER_LINE tag can be used to set the number of enum values
- that doxygen will group on one line in the generated HTML documentation. 
+ that doxygen will group on one line in the generated HTML documentation.
  <br>Note that a value of 0 will completely suppress the enum values from
  appearing in the overview section.
 ]]>
@@ -2278,8 +2280,8 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
     <option type='bool' id='EXT_LINKS_IN_WINDOW' defval='0' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- If the \c EXT_LINKS_IN_WINDOW option is set to \c YES, doxygen will open 
- links to external symbols imported via tag files in a separate window. 
+ If the \c EXT_LINKS_IN_WINDOW option is set to \c YES, doxygen will open
+ links to external symbols imported via tag files in a separate window.
 ]]>
       </docs>
     </option>
@@ -2289,7 +2291,7 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
  Use this tag to change the font size of \f$\mbox{\LaTeX}\f$ formulas included
  as images in the HTML documentation.
  When you change the font size after a successful doxygen run you need
- to manually remove any `form_*.png` images from the HTML 
+ to manually remove any `form_*.png` images from the HTML
  output directory to force them to be regenerated.
 ]]>
       </docs>
@@ -2297,23 +2299,23 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
     <option type='bool' id='FORMULA_TRANSPARENT' defval='1' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- Use the \c FORMULA_TRANSPARENT tag to determine whether or not the images 
- generated for formulas are transparent PNGs. Transparent PNGs are 
- not supported properly for IE 6.0, but are supported on all modern browsers. 
- <br>Note that when changing this option you need to delete any `form_*.png` files 
- in the HTML output directory before the changes have effect. 
+ Use the \c FORMULA_TRANSPARENT tag to determine whether or not the images
+ generated for formulas are transparent PNGs. Transparent PNGs are
+ not supported properly for IE 6.0, but are supported on all modern browsers.
+ <br>Note that when changing this option you need to delete any `form_*.png` files
+ in the HTML output directory before the changes have effect.
 ]]>
       </docs>
     </option>
     <option type='bool' id='USE_MATHJAX' defval='0' depends='GENERATE_HTML'>
       <docs>
 <![CDATA[
- Enable the \c USE_MATHJAX option to render \f$\mbox{\LaTeX}\f$ formulas using MathJax 
- (see https://www.mathjax.org) which uses client side Javascript for the 
- rendering instead of using pre-rendered bitmaps. Use this if you do not 
- have \f$\mbox{\LaTeX}\f$ installed or if you want to formulas look prettier in the HTML 
- output. When enabled you may also need to install MathJax separately and 
- configure the path to it using the \ref cfg_mathjax_relpath "MATHJAX_RELPATH" 
+ Enable the \c USE_MATHJAX option to render \f$\mbox{\LaTeX}\f$ formulas using MathJax
+ (see https://www.mathjax.org) which uses client side Javascript for the
+ rendering instead of using pre-rendered bitmaps. Use this if you do not
+ have \f$\mbox{\LaTeX}\f$ installed or if you want to formulas look prettier in the HTML
+ output. When enabled you may also need to install MathJax separately and
+ configure the path to it using the \ref cfg_mathjax_relpath "MATHJAX_RELPATH"
  option.
 ]]>
       </docs>
@@ -2321,7 +2323,7 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
     <option type='enum' id='MATHJAX_FORMAT' defval='HTML-CSS' depends='USE_MATHJAX'>
       <docs>
 <![CDATA[
- When MathJax is enabled you can set the default output format to be used for 
+ When MathJax is enabled you can set the default output format to be used for
  the MathJax output.
  See <a href="http://docs.mathjax.org/en/latest/output.html">the MathJax site</a>
  for more details.
@@ -2334,13 +2336,13 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
     <option type='string' id='MATHJAX_RELPATH' format='string' defval='http://cdn.mathjax.org/mathjax/latest' depends='USE_MATHJAX'>
       <docs>
 <![CDATA[
- When MathJax is enabled you need to specify the location relative to the 
- HTML output directory using the \c MATHJAX_RELPATH option. The destination 
- directory should contain the `MathJax.js` script. For instance, if the \c mathjax 
- directory is located at the same level as the HTML output directory, then 
- \c MATHJAX_RELPATH should be <code>../mathjax</code>. The default value points to 
- the MathJax Content Delivery Network so you can quickly see the result without 
- installing MathJax.  However, it is strongly recommended to install a local 
+ When MathJax is enabled you need to specify the location relative to the
+ HTML output directory using the \c MATHJAX_RELPATH option. The destination
+ directory should contain the `MathJax.js` script. For instance, if the \c mathjax
+ directory is located at the same level as the HTML output directory, then
+ \c MATHJAX_RELPATH should be <code>../mathjax</code>. The default value points to
+ the MathJax Content Delivery Network so you can quickly see the result without
+ installing MathJax.  However, it is strongly recommended to install a local
  copy of MathJax from https://www.mathjax.org before deployment.
 ]]>
       </docs>
@@ -2348,7 +2350,7 @@ The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
     <option type='list' id='MATHJAX_EXTENSIONS' format='string' depends='USE_MATHJAX'>
       <docs>
 <![CDATA[
- The \c MATHJAX_EXTENSIONS tag can be used to specify one or more MathJax extension 
+ The \c MATHJAX_EXTENSIONS tag can be used to specify one or more MathJax extension
  names that should be enabled during MathJax rendering. For example
 \verbatim
 MATHJAX_EXTENSIONS     = TeX/AMSmath TeX/AMSsymbols
@@ -2359,9 +2361,9 @@ MATHJAX_EXTENSIONS     = TeX/AMSmath TeX/AMSsymbols
     <option type='string' id='MATHJAX_CODEFILE' format='string' depends='USE_MATHJAX'>
       <docs>
 <![CDATA[
- The \c MATHJAX_CODEFILE tag can be used to specify a file with javascript 
- pieces of code that will be used on startup of the MathJax code. 
- See 
+ The \c MATHJAX_CODEFILE tag can be used to specify a file with javascript
+ pieces of code that will be used on startup of the MathJax code.
+ See
 <a href="http://docs.mathjax.org/en/latest/output.html">the MathJax site</a>
  for more details.
 ]]>
@@ -2378,7 +2380,7 @@ MATHJAX_CODEFILE = disableRenderer.js
   MathJax.Hub.Config({
    menuSettings: {
     showRenderer: false,
-   } 
+   }
   });
 \endverbatim
 ]]>
@@ -2393,24 +2395,24 @@ MATHJAX_CODEFILE = disableRenderer.js
       <docs>
 <![CDATA[
  When the \c SEARCHENGINE tag is enabled doxygen will generate a search box
- for the HTML output. The underlying search engine uses javascript 
+ for the HTML output. The underlying search engine uses javascript
  and DHTML and should work on any modern browser. Note that when using
- HTML help (\ref cfg_generate_htmlhelp "GENERATE_HTMLHELP"), 
+ HTML help (\ref cfg_generate_htmlhelp "GENERATE_HTMLHELP"),
  Qt help (\ref cfg_generate_qhp "GENERATE_QHP"), or docsets
- (\ref cfg_generate_docset "GENERATE_DOCSET") there is already a search 
- function so this one should typically be disabled. For large projects 
- the javascript based search engine can be slow, then enabling 
- \ref cfg_server_based_search "SERVER_BASED_SEARCH" may provide a 
- better solution. 
+ (\ref cfg_generate_docset "GENERATE_DOCSET") there is already a search
+ function so this one should typically be disabled. For large projects
+ the javascript based search engine can be slow, then enabling
+ \ref cfg_server_based_search "SERVER_BASED_SEARCH" may provide a
+ better solution.
 
  It is possible to search using the keyboard;
  to jump to the search box use <code>\<access key\> + S</code> (what the <code>\<access key\></code> is
  depends on the OS and browser, but it is typically <code>\<CTRL\></code>, <code>\<ALT\></code>/<code>\<option\></code>, or both).
- Inside the search box use the <code>\<cursor down key\></code> to jump into the search 
+ Inside the search box use the <code>\<cursor down key\></code> to jump into the search
  results window, the results can be navigated using the <code>\<cursor keys\></code>.
  Press <code>\<Enter\></code> to select an item or <code>\<escape\></code> to cancel the search. The
  filter options can be selected when the cursor is inside the search box
- by pressing <code>\<Shift\>+\<cursor down\></code>. Also here use the <code>\<cursor keys\></code> to 
+ by pressing <code>\<Shift\>+\<cursor down\></code>. Also here use the <code>\<cursor keys\></code> to
  select a filter and <code>\<Enter\></code> or <code>\<escape\></code> to activate or cancel the filter option.
 ]]>
       </docs>
@@ -2418,14 +2420,14 @@ MATHJAX_CODEFILE = disableRenderer.js
     <option type='bool' id='SERVER_BASED_SEARCH' defval='0' depends='SEARCHENGINE'>
       <docs>
 <![CDATA[
-When the \c SERVER_BASED_SEARCH tag is enabled the search engine will be 
-implemented using a web server instead of a web client using Javascript. 
+When the \c SERVER_BASED_SEARCH tag is enabled the search engine will be
+implemented using a web server instead of a web client using Javascript.
 
-There are two flavors of web server based searching depending on the 
-\ref cfg_external_search "EXTERNAL_SEARCH" setting. When disabled, 
-doxygen will generate a PHP script for searching and an index file used 
-by the script. When \ref cfg_external_search "EXTERNAL_SEARCH" is 
-enabled the indexing and searching needs to be provided by external tools. 
+There are two flavors of web server based searching depending on the
+\ref cfg_external_search "EXTERNAL_SEARCH" setting. When disabled,
+doxygen will generate a PHP script for searching and an index file used
+by the script. When \ref cfg_external_search "EXTERNAL_SEARCH" is
+enabled the indexing and searching needs to be provided by external tools.
 See the section \ref extsearch for details.
 ]]>
       </docs>
@@ -2433,14 +2435,14 @@ See the section \ref extsearch for details.
     <option type='bool' id='EXTERNAL_SEARCH' defval='0' depends='SEARCHENGINE'>
       <docs>
 <![CDATA[
- When \c EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP 
- script for searching. Instead the search results are written to an XML file 
- which needs to be processed by an external indexer. Doxygen will invoke an 
- external search engine pointed to by the 
- \ref cfg_searchengine_url "SEARCHENGINE_URL" option to obtain 
+ When \c EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP
+ script for searching. Instead the search results are written to an XML file
+ which needs to be processed by an external indexer. Doxygen will invoke an
+ external search engine pointed to by the
+ \ref cfg_searchengine_url "SEARCHENGINE_URL" option to obtain
  the search results.
- <br>Doxygen ships with an example indexer (\c doxyindexer) and 
- search engine (<code>doxysearch.cgi</code>) which are based on the open source search 
+ <br>Doxygen ships with an example indexer (\c doxyindexer) and
+ search engine (<code>doxysearch.cgi</code>) which are based on the open source search
  engine library <a href="https://xapian.org/">Xapian</a>.
  <br>See the section \ref extsearch for details.
 ]]>
@@ -2449,11 +2451,11 @@ See the section \ref extsearch for details.
     <option type='string' id='SEARCHENGINE_URL' format='string' defval='' depends='SEARCHENGINE'>
       <docs>
 <![CDATA[
- The \c SEARCHENGINE_URL should point to a search engine hosted by a web server 
- which will return the search results when \ref cfg_external_search "EXTERNAL_SEARCH" 
+ The \c SEARCHENGINE_URL should point to a search engine hosted by a web server
+ which will return the search results when \ref cfg_external_search "EXTERNAL_SEARCH"
  is enabled.
- <br>Doxygen ships with an example indexer (\c doxyindexer) and 
- search engine (<code>doxysearch.cgi</code>) which are based on the open source search 
+ <br>Doxygen ships with an example indexer (\c doxyindexer) and
+ search engine (<code>doxysearch.cgi</code>) which are based on the open source search
  engine library <a href="https://xapian.org/">Xapian</a>.
  See the section \ref extsearch for details.
 ]]>
@@ -2462,9 +2464,9 @@ See the section \ref extsearch for details.
     <option type='string' id='SEARCHDATA_FILE' format='file' defval='searchdata.xml' depends='SEARCHENGINE'>
       <docs>
 <![CDATA[
-When \ref cfg_server_based_search "SERVER_BASED_SEARCH" and 
-\ref cfg_external_search "EXTERNAL_SEARCH" are both enabled the unindexed 
-search data is written to a file for indexing by an external tool. With the 
+When \ref cfg_server_based_search "SERVER_BASED_SEARCH" and
+\ref cfg_external_search "EXTERNAL_SEARCH" are both enabled the unindexed
+search data is written to a file for indexing by an external tool. With the
 \c SEARCHDATA_FILE tag the name of this file can be specified.
 ]]>
       </docs>
@@ -2472,10 +2474,10 @@ search data is written to a file for indexing by an external tool. With the
     <option type='string' id='EXTERNAL_SEARCH_ID' format='string' defval='' depends='SEARCHENGINE'>
       <docs>
 <![CDATA[
-When \ref cfg_server_based_search "SERVER_BASED_SEARCH" and 
-\ref cfg_external_search "EXTERNAL_SEARCH" are both enabled the 
-\c EXTERNAL_SEARCH_ID tag can be used as an identifier for the project. This is 
-useful in combination with \ref cfg_extra_search_mappings "EXTRA_SEARCH_MAPPINGS" 
+When \ref cfg_server_based_search "SERVER_BASED_SEARCH" and
+\ref cfg_external_search "EXTERNAL_SEARCH" are both enabled the
+\c EXTERNAL_SEARCH_ID tag can be used as an identifier for the project. This is
+useful in combination with \ref cfg_extra_search_mappings "EXTRA_SEARCH_MAPPINGS"
 to search through multiple projects and redirect the results back to the right project.
 ]]>
       </docs>
@@ -2483,16 +2485,16 @@ to search through multiple projects and redirect the results back to the right p
     <option type='list' id='EXTRA_SEARCH_MAPPINGS' format='string' depends='SEARCHENGINE'>
       <docs>
 <![CDATA[
- The \c EXTRA_SEARCH_MAPPINGS tag can be used to enable searching through doxygen 
- projects other than the one defined by this configuration file, but that are 
- all added to the same external search index. Each project needs to have a 
- unique id set via \ref cfg_external_search_id "EXTERNAL_SEARCH_ID". 
- The search mapping then maps the id of to a relative location where the 
- documentation can be found. 
+ The \c EXTRA_SEARCH_MAPPINGS tag can be used to enable searching through doxygen
+ projects other than the one defined by this configuration file, but that are
+ all added to the same external search index. Each project needs to have a
+ unique id set via \ref cfg_external_search_id "EXTERNAL_SEARCH_ID".
+ The search mapping then maps the id of to a relative location where the
+ documentation can be found.
 
- The format is: 
+ The format is:
 \verbatim
-EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ... 
+EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ...
 \endverbatim
 ]]>
       </docs>
@@ -2510,7 +2512,7 @@ EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ...
     <option type='string' id='LATEX_OUTPUT' format='dir' defval='latex' depends='GENERATE_LATEX'>
       <docs>
 <![CDATA[
- The \c LATEX_OUTPUT tag is used to specify where the \f$\mbox{\LaTeX}\f$ 
+ The \c LATEX_OUTPUT tag is used to specify where the \f$\mbox{\LaTeX}\f$
  docs will be put.
  If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be
  put in front of it.
@@ -2520,7 +2522,7 @@ EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ...
     <option type='string' id='LATEX_CMD_NAME' format='file' defval='latex' depends='GENERATE_LATEX'>
       <docs>
 <![CDATA[
- The \c LATEX_CMD_NAME tag can be used to specify the \f$\mbox{\LaTeX}\f$ command name to be invoked. 
+ The \c LATEX_CMD_NAME tag can be used to specify the \f$\mbox{\LaTeX}\f$ command name to be invoked.
  <br>Note that when enabling \ref cfg_use_pdflatex "USE_PDFLATEX" this option is only used for
  generating bitmaps for formulas in the HTML output, but not in the
  \c Makefile that is written to the output directory.
@@ -2530,7 +2532,7 @@ EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ...
     <option type='string' id='MAKEINDEX_CMD_NAME' format='file' defval='makeindex' depends='GENERATE_LATEX'>
       <docs>
 <![CDATA[
- The \c MAKEINDEX_CMD_NAME tag can be used to specify the command name to 
+ The \c MAKEINDEX_CMD_NAME tag can be used to specify the command name to
  generate index for \f$\mbox{\LaTeX}\f$.
 ]]>
       </docs>
@@ -2559,7 +2561,7 @@ EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ...
     <option type='list' id='EXTRA_PACKAGES' format='string' depends='GENERATE_LATEX'>
       <docs>
 <![CDATA[
- The \c EXTRA_PACKAGES tag can be used to specify one or more \f$\mbox{\LaTeX}\f$ 
+ The \c EXTRA_PACKAGES tag can be used to specify one or more \f$\mbox{\LaTeX}\f$
  package names that should be included in the \f$\mbox{\LaTeX}\f$ output. The package
  can be specified just by its name or with the correct syntax as to be used with the
  \f$\mbox{\LaTeX}\f$ `\usepackage` command.
@@ -2567,7 +2569,7 @@ EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ...
  To get the `times` font for instance you can specify :
 \verbatim
   EXTRA_PACKAGES=times
-or 
+or
   EXTRA_PACKAGES={times}
 \endverbatim
  To use the option `intlimits` with the `amsmath` package you can specify:
@@ -2581,21 +2583,21 @@ or
     <option type='string' id='LATEX_HEADER' format='file' defval='' depends='GENERATE_LATEX'>
       <docs>
 <![CDATA[
- The \c LATEX_HEADER tag can be used to specify a personal \f$\mbox{\LaTeX}\f$ 
- header for the generated \f$\mbox{\LaTeX}\f$ document. 
- The header should contain everything until the first chapter. 
+ The \c LATEX_HEADER tag can be used to specify a personal \f$\mbox{\LaTeX}\f$
+ header for the generated \f$\mbox{\LaTeX}\f$ document.
+ The header should contain everything until the first chapter.
 
- If it is left blank doxygen will generate a 
- standard header. See section \ref doxygen_usage for information on how to 
+ If it is left blank doxygen will generate a
+ standard header. See section \ref doxygen_usage for information on how to
  let doxygen write the default header to a separate file.
- 
+
  <br>Note: Only use a user-defined header if you know what you are doing!
 
  The following commands have a special meaning inside the header:
  <code>\$title</code>, <code>\$datetime</code>, <code>\$date</code>,
- <code>\$doxygenversion</code>, <code>\$projectname</code>, 
- <code>\$projectnumber</code>, <code>\$projectbrief</code>, 
- <code>\$projectlogo</code>. 
+ <code>\$doxygenversion</code>, <code>\$projectname</code>,
+ <code>\$projectnumber</code>, <code>\$projectbrief</code>,
+ <code>\$projectlogo</code>.
  Doxygen will replace <code>\$title</code> with the empty string, for the replacement values of the
  other commands the user is referred to \ref cfg_html_header "HTML_HEADER".
 ]]>
@@ -2604,14 +2606,14 @@ or
     <option type='string' id='LATEX_FOOTER' format='file' defval='' depends='GENERATE_LATEX'>
       <docs>
 <![CDATA[
- The \c LATEX_FOOTER tag can be used to specify a personal \f$\mbox{\LaTeX}\f$ footer for 
- the generated \f$\mbox{\LaTeX}\f$ document. The footer should contain everything after 
- the last chapter. If it is left blank doxygen will generate a 
+ The \c LATEX_FOOTER tag can be used to specify a personal \f$\mbox{\LaTeX}\f$ footer for
+ the generated \f$\mbox{\LaTeX}\f$ document. The footer should contain everything after
+ the last chapter. If it is left blank doxygen will generate a
  standard footer.
- See \ref cfg_latex_header "LATEX_HEADER" for more information on 
- how to generate a default footer and what special commands can be 
+ See \ref cfg_latex_header "LATEX_HEADER" for more information on
+ how to generate a default footer and what special commands can be
  used inside the footer.
- 
+
  <br>Note: Only use a user-defined footer if you know what you are doing!
 ]]>
       </docs>
@@ -2619,10 +2621,10 @@ or
     <option type='list' id='LATEX_EXTRA_STYLESHEET' format='file' defval='' depends='GENERATE_LATEX'>
       <docs>
 <![CDATA[
- The \c LATEX_EXTRA_STYLESHEET tag can be used to specify additional 
- user-defined \f$\mbox{\LaTeX}\f$ style sheets that are included after the standard 
- style sheets created by doxygen. Using this option one can overrule 
- certain style aspects. Doxygen will copy the style sheet files to 
+ The \c LATEX_EXTRA_STYLESHEET tag can be used to specify additional
+ user-defined \f$\mbox{\LaTeX}\f$ style sheets that are included after the standard
+ style sheets created by doxygen. Using this option one can overrule
+ certain style aspects. Doxygen will copy the style sheet files to
  the output directory.
  \note The order of the extra style sheet files is of importance (e.g. the last
  style sheet in the list overrules the setting of the previous ones in the list).
@@ -2643,8 +2645,8 @@ or
     <option type='bool' id='PDF_HYPERLINKS' defval='1' depends='GENERATE_LATEX'>
       <docs>
 <![CDATA[
- If the \c PDF_HYPERLINKS tag is set to \c YES, the \f$\mbox{\LaTeX}\f$ that 
- is generated is prepared for conversion to PDF (using \c ps2pdf or \c pdflatex). 
+ If the \c PDF_HYPERLINKS tag is set to \c YES, the \f$\mbox{\LaTeX}\f$ that
+ is generated is prepared for conversion to PDF (using \c ps2pdf or \c pdflatex).
  The PDF file will
  contain links (just like the HTML output) instead of page references.
  This makes the output suitable for online browsing using a PDF viewer.
@@ -2656,7 +2658,7 @@ or
 <![CDATA[
  If the \c USE_PDFLATEX tag is set to \c YES, doxygen will use
  \c pdflatex to generate the PDF file directly from the \f$\mbox{\LaTeX}\f$
- files.  Set this option to \c YES, to get a higher quality PDF documentation. 
+ files.  Set this option to \c YES, to get a higher quality PDF documentation.
 ]]>
       </docs>
     </option>
@@ -2664,9 +2666,9 @@ or
       <docs>
 <![CDATA[
  If the \c LATEX_BATCHMODE tag is set to \c YES, doxygen will add the \c \\batchmode
- command to the generated \f$\mbox{\LaTeX}\f$ files. This will 
- instruct \f$\mbox{\LaTeX}\f$ to keep running if errors occur, instead of 
- asking the user for help. This option is also used when generating formulas 
+ command to the generated \f$\mbox{\LaTeX}\f$ files. This will
+ instruct \f$\mbox{\LaTeX}\f$ to keep running if errors occur, instead of
+ asking the user for help. This option is also used when generating formulas
  in HTML.
 ]]>
       </docs>
@@ -2675,17 +2677,17 @@ or
       <docs>
 <![CDATA[
  If the \c LATEX_HIDE_INDICES tag is set to \c YES then doxygen will not
- include the index chapters (such as File Index, Compound Index, etc.) 
- in the output. 
+ include the index chapters (such as File Index, Compound Index, etc.)
+ in the output.
 ]]>
       </docs>
     </option>
     <option type='bool' id='LATEX_SOURCE_CODE' defval='0' depends='GENERATE_LATEX'>
       <docs>
 <![CDATA[
- If the \c LATEX_SOURCE_CODE tag is set to \c YES then doxygen will include 
- source code with syntax highlighting in the \f$\mbox{\LaTeX}\f$ output. 
- <br>Note that which sources are shown also depends on other settings 
+ If the \c LATEX_SOURCE_CODE tag is set to \c YES then doxygen will include
+ source code with syntax highlighting in the \f$\mbox{\LaTeX}\f$ output.
+ <br>Note that which sources are shown also depends on other settings
  such as \ref cfg_source_browser "SOURCE_BROWSER".
 ]]>
       </docs>
@@ -2693,8 +2695,8 @@ or
     <option type='string' id='LATEX_BIB_STYLE' format='string' defval='plain' depends='GENERATE_LATEX'>
       <docs>
 <![CDATA[
- The \c LATEX_BIB_STYLE tag can be used to specify the style to use for the 
- bibliography, e.g. \c plainnat, or \c ieeetr. 
+ The \c LATEX_BIB_STYLE tag can be used to specify the style to use for the
+ bibliography, e.g. \c plainnat, or \c ieeetr.
  See https://en.wikipedia.org/wiki/BibTeX and \ref cmdcite "\\cite"
  for more info.
 ]]>
@@ -2769,8 +2771,8 @@ or
       <docs>
 <![CDATA[
  Set optional variables used in the generation of an RTF document.
- Syntax is similar to doxygen's config file. 
- A template extensions file can be generated using 
+ Syntax is similar to doxygen's config file.
+ A template extensions file can be generated using
  <code>doxygen -e rtf extensionFile</code>.
 ]]>
       </docs>
@@ -2800,8 +2802,8 @@ or
 <![CDATA[
  The \c MAN_OUTPUT tag is used to specify where the man pages will be put.
  If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be
- put in front of it. 
- A directory \c man3 will be created inside the directory specified by 
+ put in front of it.
+ A directory \c man3 will be created inside the directory specified by
  \c MAN_OUTPUT.
 ]]>
       </docs>
@@ -2828,10 +2830,10 @@ or
     <option type='bool' id='MAN_LINKS' defval='0' depends='GENERATE_MAN'>
       <docs>
 <![CDATA[
- If the \c MAN_LINKS tag is set to \c YES and doxygen generates man output, 
- then it will generate one additional man file for each entity documented in 
- the real man page(s). These additional files only source the real man page, 
- but without them the \c man command would be unable to find the correct page. 
+ If the \c MAN_LINKS tag is set to \c YES and doxygen generates man output,
+ then it will generate one additional man file for each entity documented in
+ the real man page(s). These additional files only source the real man page,
+ but without them the \c man command would be unable to find the correct page.
 ]]>
       </docs>
     </option>
@@ -2842,15 +2844,15 @@ or
 <![CDATA[
  If the \c GENERATE_XML tag is set to \c YES, doxygen will
  generate an XML file that captures the structure of
- the code including all documentation. 
+ the code including all documentation.
 ]]>
       </docs>
     </option>
     <option type='string' id='XML_OUTPUT' format='dir' defval='xml' depends='GENERATE_XML'>
       <docs>
 <![CDATA[
- The \c XML_OUTPUT tag is used to specify where the XML pages will be put. 
- If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be 
+ The \c XML_OUTPUT tag is used to specify where the XML pages will be put.
+ If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be
  put in front of it.
 ]]>
       </docs>
@@ -2870,7 +2872,7 @@ or
     <option type='bool' id='GENERATE_DOCBOOK' defval='0'>
       <docs>
 <![CDATA[
-If the \c GENERATE_DOCBOOK tag is set to \c YES, doxygen will generate Docbook files 
+If the \c GENERATE_DOCBOOK tag is set to \c YES, doxygen will generate Docbook files
 that can be used to generate PDF.
 ]]>
       </docs>
@@ -2878,8 +2880,8 @@ that can be used to generate PDF.
     <option type='string' id='DOCBOOK_OUTPUT' format='dir' defval='docbook' depends='GENERATE_DOCBOOK'>
       <docs>
 <![CDATA[
-The \c DOCBOOK_OUTPUT tag is used to specify where the Docbook pages will be put. 
-If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be put in 
+The \c DOCBOOK_OUTPUT tag is used to specify where the Docbook pages will be put.
+If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be put in
 front of it.
 ]]>
       </docs>
@@ -2902,8 +2904,8 @@ front of it.
  If the \c GENERATE_AUTOGEN_DEF tag is set to \c YES, doxygen will
  generate an AutoGen Definitions (see http://autogen.sourceforge.net/) file
  that captures the structure of the code including all
- documentation. Note that this feature is still experimental 
- and incomplete at the moment. 
+ documentation. Note that this feature is still experimental
+ and incomplete at the moment.
 ]]>
       </docs>
     </option>
@@ -2921,8 +2923,8 @@ If the \c GENERATE_SQLITE3 tag is set to \c YES doxygen will generate a
     <option type='string' id='SQLITE3_OUTPUT' format='dir' defval='sqlite3' depends='GENERATE_SQLITE3'>
       <docs>
 <![CDATA[
-The \c SQLITE3_OUTPUT tag is used to specify where the \c Sqlite3 database will be put. 
-If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be 
+The \c SQLITE3_OUTPUT tag is used to specify where the \c Sqlite3 database will be put.
+If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be
 put in front of it.
 ]]>
       </docs>
@@ -2937,7 +2939,7 @@ put in front of it.
  If the \c GENERATE_PERLMOD tag is set to \c YES, doxygen will
  generate a Perl module file that captures the structure of
  the code including all documentation.
- <br>Note that this 
+ <br>Note that this
  feature is still experimental and incomplete at the
  moment.
 ]]>
@@ -2946,28 +2948,28 @@ put in front of it.
     <option type='bool' id='PERLMOD_LATEX' defval='0' depends='GENERATE_PERLMOD'>
       <docs>
 <![CDATA[
- If the \c PERLMOD_LATEX tag is set to \c YES, doxygen will generate 
- the necessary \c Makefile rules, \c Perl scripts and \f$\mbox{\LaTeX}\f$ code to be able 
- to generate PDF and DVI output from the Perl module output. 
+ If the \c PERLMOD_LATEX tag is set to \c YES, doxygen will generate
+ the necessary \c Makefile rules, \c Perl scripts and \f$\mbox{\LaTeX}\f$ code to be able
+ to generate PDF and DVI output from the Perl module output.
 ]]>
       </docs>
     </option>
     <option type='bool' id='PERLMOD_PRETTY' defval='1' depends='GENERATE_PERLMOD'>
       <docs>
 <![CDATA[
- If the \c PERLMOD_PRETTY tag is set to \c YES, the Perl module output will be 
- nicely formatted so it can be parsed by a human reader.  This is useful 
+ If the \c PERLMOD_PRETTY tag is set to \c YES, the Perl module output will be
+ nicely formatted so it can be parsed by a human reader.  This is useful
  if you want to understand what is going on. On the other hand, if this
  tag is set to \c NO, the size of the Perl module output will be much smaller
- and Perl will parse it just the same. 
+ and Perl will parse it just the same.
 ]]>
       </docs>
     </option>
     <option type='string' id='PERLMOD_MAKEVAR_PREFIX' format='string' defval='' depends='GENERATE_PERLMOD'>
       <docs>
 <![CDATA[
- The names of the make variables in the generated `doxyrules.make` file 
- are prefixed with the string contained in \c PERLMOD_MAKEVAR_PREFIX. 
+ The names of the make variables in the generated `doxyrules.make` file
+ are prefixed with the string contained in \c PERLMOD_MAKEVAR_PREFIX.
  This is useful so different `doxyrules.make` files included by the same
  `Makefile` don't overwrite each other's variables.
 ]]>
@@ -2980,7 +2982,7 @@ put in front of it.
 <![CDATA[
  If the \c ENABLE_PREPROCESSING tag is set to \c YES, doxygen will
  evaluate all C-preprocessor directives found in the sources and include
- files. 
+ files.
 ]]>
       </docs>
     </option>
@@ -2988,7 +2990,7 @@ put in front of it.
       <docs>
 <![CDATA[
  If the \c MACRO_EXPANSION tag is set to \c YES, doxygen will expand all macro
- names in the source code. If set to \c NO, only conditional 
+ names in the source code. If set to \c NO, only conditional
  compilation will be performed. Macro expansion can be done in a controlled
  way by setting \ref cfg_expand_only_predef "EXPAND_ONLY_PREDEF" to \c YES.
 ]]>
@@ -3023,10 +3025,10 @@ put in front of it.
     <option type='list' id='INCLUDE_FILE_PATTERNS' format='string' depends='ENABLE_PREPROCESSING'>
       <docs>
 <![CDATA[
- You can use the \c INCLUDE_FILE_PATTERNS tag to specify one or more wildcard 
- patterns (like `*.h` and `*.hpp`) to filter out the header-files in the 
- directories. If left blank, the patterns specified with \ref cfg_file_patterns "FILE_PATTERNS" will 
- be used. 
+ You can use the \c INCLUDE_FILE_PATTERNS tag to specify one or more wildcard
+ patterns (like `*.h` and `*.hpp`) to filter out the header-files in the
+ directories. If left blank, the patterns specified with \ref cfg_file_patterns "FILE_PATTERNS" will
+ be used.
 ]]>
       </docs>
     </option>
@@ -3036,7 +3038,7 @@ put in front of it.
  The \c PREDEFINED tag can be used to specify one or more macro names that
  are defined before the preprocessor is started (similar to the `-D` option of
  e.g. \c gcc). The argument of the tag is a list of macros of the form:
- <code>name</code> or <code>name=definition</code> (no spaces). 
+ <code>name</code> or <code>name=definition</code> (no spaces).
  If the definition and the \c "=" are omitted,  \c "=1" is assumed. To prevent
  a macro definition from being undefined via \c \#undef or recursively expanded
  use the <code>:=</code> operator instead of the \c = operator.
@@ -3051,18 +3053,18 @@ put in front of it.
  this tag can be used to specify a list of macro names that should be expanded.
  The macro definition that is found in the sources will be used.
  Use the \ref cfg_predefined "PREDEFINED" tag if you want to use a different macro definition that
- overrules the definition found in the source code. 
+ overrules the definition found in the source code.
 ]]>
       </docs>
     </option>
     <option type='bool' id='SKIP_FUNCTION_MACROS' defval='1' depends='ENABLE_PREPROCESSING'>
       <docs>
 <![CDATA[
- If the \c SKIP_FUNCTION_MACROS tag is set to \c YES then 
- doxygen's preprocessor will remove all references to function-like macros that are alone 
- on a line, have an all uppercase name, and do not end with a semicolon. 
- Such function macros are typically 
- used for boiler-plate code, and will confuse the parser if not removed. 
+ If the \c SKIP_FUNCTION_MACROS tag is set to \c YES then
+ doxygen's preprocessor will remove all references to function-like macros that are alone
+ on a line, have an all uppercase name, and do not end with a semicolon.
+ Such function macros are typically
+ used for boiler-plate code, and will confuse the parser if not removed.
 ]]>
       </docs>
     </option>
@@ -3071,25 +3073,25 @@ put in front of it.
     <option type='list' id='TAGFILES' format='file'>
       <docs>
 <![CDATA[
- The \c TAGFILES tag can be used to specify one or more tag files. 
+ The \c TAGFILES tag can be used to specify one or more tag files.
 
-For each 
-tag file the location of the external documentation should be added. The 
-format of a tag file without this location is as follows: 
+For each
+tag file the location of the external documentation should be added. The
+format of a tag file without this location is as follows:
 \verbatim
-  TAGFILES = file1 file2 ... 
+  TAGFILES = file1 file2 ...
 \endverbatim
-Adding location for the tag files is done as follows: 
+Adding location for the tag files is done as follows:
 \verbatim
-  TAGFILES = file1=loc1 "file2 = loc2" ... 
+  TAGFILES = file1=loc1 "file2 = loc2" ...
 \endverbatim
 where `loc1` and `loc2` can be relative or absolute paths or URLs.
  See the section \ref external for more information about the use of tag files.
 
  \note
-  Each tag file must have a unique name 
+  Each tag file must have a unique name
   (where the name does \e NOT include the path).
-  If a tag file is not located in the directory in which doxygen 
+  If a tag file is not located in the directory in which doxygen
   is run, you must also specify the path to the tagfile here.
 ]]>
       </docs>
@@ -3099,7 +3101,7 @@ where `loc1` and `loc2` can be relative or absolute paths or URLs.
 <![CDATA[
  When a file name is specified after \c GENERATE_TAGFILE, doxygen will create
  a tag file that is based on the input files it reads.
- See section \ref external for more information about the usage of 
+ See section \ref external for more information about the usage of
  tag files.
 ]]>
       </docs>
@@ -3125,9 +3127,9 @@ where `loc1` and `loc2` can be relative or absolute paths or URLs.
     <option type='bool' id='EXTERNAL_PAGES' defval='1'>
       <docs>
 <![CDATA[
- If the \c EXTERNAL_PAGES tag is set to \c YES, all external pages will be listed 
- in the related pages index. If set to \c NO, only the current project's 
- pages will be listed. 
+ If the \c EXTERNAL_PAGES tag is set to \c YES, all external pages will be listed
+ in the related pages index. If set to \c NO, only the current project's
+ pages will be listed.
 ]]>
       </docs>
     </option>
@@ -3146,19 +3148,19 @@ where `loc1` and `loc2` can be relative or absolute paths or URLs.
 <![CDATA[
  If the \c CLASS_DIAGRAMS tag is set to \c YES, doxygen will
  generate a class diagram (in HTML and \f$\mbox{\LaTeX}\f$) for classes with base or
- super classes. Setting the tag to \c NO turns the diagrams off. Note that 
- this option also works with \ref cfg_have_dot "HAVE_DOT" disabled, but it is recommended to 
- install and use \c dot, since it yields more powerful graphs. 
+ super classes. Setting the tag to \c NO turns the diagrams off. Note that
+ this option also works with \ref cfg_have_dot "HAVE_DOT" disabled, but it is recommended to
+ install and use \c dot, since it yields more powerful graphs.
 ]]>
       </docs>
     </option>
     <option type='string' id='MSCGEN_PATH' format='dir' defval=''>
       <docs>
 <![CDATA[
- You can define message sequence charts within doxygen comments using the \ref cmdmsc "\\msc" 
- command. Doxygen will then run the <a href="http://www.mcternan.me.uk/mscgen/">mscgen tool</a>) to 
- produce the chart and insert it in the documentation. The <code>MSCGEN_PATH</code> tag allows you to 
- specify the directory where the \c mscgen tool resides. If left empty the tool is assumed to 
+ You can define message sequence charts within doxygen comments using the \ref cmdmsc "\\msc"
+ command. Doxygen will then run the <a href="http://www.mcternan.me.uk/mscgen/">mscgen tool</a>) to
+ produce the chart and insert it in the documentation. The <code>MSCGEN_PATH</code> tag allows you to
+ specify the directory where the \c mscgen tool resides. If left empty the tool is assumed to
  be found in the default search path.
 ]]>
       </docs>
@@ -3166,9 +3168,9 @@ where `loc1` and `loc2` can be relative or absolute paths or URLs.
     <option type='string' id='DIA_PATH' format='dir' defval=''>
       <docs>
 <![CDATA[
-You can include diagrams made with dia in doxygen documentation. Doxygen will then run 
-dia to produce the diagram and insert it in the documentation. The DIA_PATH tag allows 
-you to specify the directory where the dia binary resides. If left empty dia is assumed 
+You can include diagrams made with dia in doxygen documentation. Doxygen will then run
+dia to produce the diagram and insert it in the documentation. The DIA_PATH tag allows
+you to specify the directory where the dia binary resides. If left empty dia is assumed
 to be found in the default search path.
 ]]>
       </docs>
@@ -3186,9 +3188,9 @@ to be found in the default search path.
       <docs>
 <![CDATA[
  If you set the \c HAVE_DOT tag to \c YES then doxygen will assume the \c dot tool is
- available from the \c path. This tool is part of 
- <a href="http://www.graphviz.org/">Graphviz</a>, a graph 
- visualization toolkit from AT\&T and Lucent Bell Labs. The other options in 
+ available from the \c path. This tool is part of
+ <a href="http://www.graphviz.org/">Graphviz</a>, a graph
+ visualization toolkit from AT\&T and Lucent Bell Labs. The other options in
  this section have no effect if this option is set to \c NO
 ]]>
       </docs>
@@ -3196,11 +3198,11 @@ to be found in the default search path.
     <option type='int' id='DOT_NUM_THREADS' defval='0' minval='0' maxval='32' depends='HAVE_DOT'>
       <docs>
 <![CDATA[
- The \c DOT_NUM_THREADS specifies the number of \c dot invocations doxygen is 
- allowed to run in parallel. When set to \c 0 doxygen will 
- base this on the number of processors available in the system. You can set it 
- explicitly to a value larger than 0 to get control over the balance 
- between CPU load and processing speed.  
+ The \c DOT_NUM_THREADS specifies the number of \c dot invocations doxygen is
+ allowed to run in parallel. When set to \c 0 doxygen will
+ base this on the number of processors available in the system. You can set it
+ explicitly to a value larger than 0 to get control over the balance
+ between CPU load and processing speed.
 ]]>
       </docs>
     </option>
@@ -3208,11 +3210,11 @@ to be found in the default search path.
       <docs>
 <![CDATA[
  When you want a differently looking font in the dot files that doxygen generates
- you can specify the font name 
- using \c DOT_FONTNAME. You need to make sure dot is able to find the font, 
- which can be done by putting it in a standard location or by setting the 
- \c DOTFONTPATH environment variable or by setting \ref cfg_dot_fontpath "DOT_FONTPATH" to the 
- directory containing the font. 
+ you can specify the font name
+ using \c DOT_FONTNAME. You need to make sure dot is able to find the font,
+ which can be done by putting it in a standard location or by setting the
+ \c DOTFONTPATH environment variable or by setting \ref cfg_dot_fontpath "DOT_FONTPATH" to the
+ directory containing the font.
 ]]>
       </docs>
     </option>
@@ -3227,8 +3229,8 @@ to be found in the default search path.
       <docs>
 <![CDATA[
  By default doxygen will tell \c dot to use the default font as specified with \ref cfg_dot_fontname "DOT_FONTNAME".
- If you specify a 
- different font using \ref cfg_dot_fontname "DOT_FONTNAME" you can set the path where \c dot 
+ If you specify a
+ different font using \ref cfg_dot_fontname "DOT_FONTNAME" you can set the path where \c dot
  can find it using this tag.
 ]]>
       </docs>
@@ -3238,7 +3240,7 @@ to be found in the default search path.
 <![CDATA[
  If the \c CLASS_GRAPH tag is set to \c YES then doxygen
  will generate a graph for each documented class showing the direct and
- indirect inheritance relations. Setting this tag to \c YES will force 
+ indirect inheritance relations. Setting this tag to \c YES will force
  the \ref cfg_class_diagrams "CLASS_DIAGRAMS" tag to \c NO.
 ]]>
       </docs>
@@ -3273,10 +3275,10 @@ to be found in the default search path.
     <option type='int' id='UML_LIMIT_NUM_FIELDS' defval='10' minval='0' maxval='100' depends='HAVE_DOT'>
       <docs>
 <![CDATA[
- If the \ref cfg_uml_look "UML_LOOK" tag is enabled, the fields and methods are shown inside 
- the class node. If there are many fields or methods and many nodes the 
- graph may become too big to be useful. The \c UML_LIMIT_NUM_FIELDS 
- threshold limits the number of items for each type to make the size more 
+ If the \ref cfg_uml_look "UML_LOOK" tag is enabled, the fields and methods are shown inside
+ the class node. If there are many fields or methods and many nodes the
+ graph may become too big to be useful. The \c UML_LIMIT_NUM_FIELDS
+ threshold limits the number of items for each type to make the size more
  manageable. Set this to 0 for no limit. Note that the threshold may be
  exceeded by 50% before the limit is enforced. So when you set the threshold
  to 10, up to 15 fields may appear, but if the number exceeds 15, the
@@ -3287,7 +3289,7 @@ to be found in the default search path.
     <option type='bool' id='TEMPLATE_RELATIONS' defval='0' depends='HAVE_DOT'>
       <docs>
 <![CDATA[
- If the \c TEMPLATE_RELATIONS tag is set to \c YES then 
+ If the \c TEMPLATE_RELATIONS tag is set to \c YES then
  the inheritance and collaboration graphs will show the relations between templates and their instances.
 ]]>
       </docs>
@@ -3296,7 +3298,7 @@ to be found in the default search path.
       <docs>
 <![CDATA[
  If the \c INCLUDE_GRAPH, \ref cfg_enable_preprocessing "ENABLE_PREPROCESSING" and
- \ref cfg_search_includes "SEARCH_INCLUDES" 
+ \ref cfg_search_includes "SEARCH_INCLUDES"
  tags are set to \c YES then doxygen will generate a graph for each documented file
  showing the direct and indirect include dependencies of the file with other
  documented files.
@@ -3317,12 +3319,12 @@ to be found in the default search path.
     <option type='bool' id='CALL_GRAPH' defval='0' depends='HAVE_DOT'>
       <docs>
 <![CDATA[
- If the \c CALL_GRAPH tag is set to \c YES then doxygen will 
- generate a call dependency graph for every global function or class method. 
+ If the \c CALL_GRAPH tag is set to \c YES then doxygen will
+ generate a call dependency graph for every global function or class method.
  <br>Note that enabling this option will significantly increase the time of a run.
- So in most cases it will be better to enable call graphs for selected 
- functions only using the \ref cmdcallgraph "\\callgraph" command. 
- Disabling a call graph can be accomplished by means of the command 
+ So in most cases it will be better to enable call graphs for selected
+ functions only using the \ref cmdcallgraph "\\callgraph" command.
+ Disabling a call graph can be accomplished by means of the command
  \ref cmdhidecallgraph "\\hidecallgraph".
 ]]>
       </docs>
@@ -3330,12 +3332,12 @@ to be found in the default search path.
     <option type='bool' id='CALLER_GRAPH' defval='0' depends='HAVE_DOT'>
       <docs>
 <![CDATA[
- If the \c CALLER_GRAPH tag is set to \c YES then doxygen will 
- generate a caller dependency graph for every global function or class method. 
+ If the \c CALLER_GRAPH tag is set to \c YES then doxygen will
+ generate a caller dependency graph for every global function or class method.
  <br>Note that enabling this option will significantly increase the time of a run.
- So in most cases it will be better to enable caller graphs for selected 
- functions only using the \ref cmdcallergraph "\\callergraph" command. 
- Disabling a caller graph can be accomplished by means of the command 
+ So in most cases it will be better to enable caller graphs for selected
+ functions only using the \ref cmdcallergraph "\\callergraph" command.
+ Disabling a caller graph can be accomplished by means of the command
  \ref cmdhidecallergraph "\\hidecallergraph".
 ]]>
       </docs>
@@ -3343,7 +3345,7 @@ to be found in the default search path.
     <option type='bool' id='GRAPHICAL_HIERARCHY' defval='1' depends='HAVE_DOT'>
       <docs>
 <![CDATA[
- If the \c GRAPHICAL_HIERARCHY tag is set to \c YES then 
+ If the \c GRAPHICAL_HIERARCHY tag is set to \c YES then
  doxygen will graphical hierarchy of all classes instead of a textual one.
 ]]>
       </docs>
@@ -3351,7 +3353,7 @@ to be found in the default search path.
     <option type='bool' id='DIRECTORY_GRAPH' defval='1' depends='HAVE_DOT'>
       <docs>
 <![CDATA[
- If the \c DIRECTORY_GRAPH tag is set 
+ If the \c DIRECTORY_GRAPH tag is set
  to \c YES then doxygen will show the dependencies a directory has on other directories
  in a graphical way. The dependency relations are determined by the \c \#include
  relations between the files in the directories.
@@ -3365,7 +3367,7 @@ to be found in the default search path.
  generated by \c dot. For an explanation of the image formats see the section output formats
  in the documentation of the \c dot tool
  (<a href="http://www.graphviz.org/">Graphviz</a>).
- \note If you choose \c svg you need to set 
+ \note If you choose \c svg you need to set
  \ref cfg_html_file_extension "HTML_FILE_EXTENSION" to \c xhtml in order to make the SVG files
  visible in IE 9+ (other browsers do not have this requirement).
 ]]>
@@ -3387,10 +3389,10 @@ to be found in the default search path.
       <docs>
 <![CDATA[
  If \ref cfg_dot_image_format "DOT_IMAGE_FORMAT" is set to \c svg, then this option can be set to \c YES to
- enable generation of interactive SVG images that allow zooming and panning. 
- <br>Note that this requires a modern browser other than Internet Explorer. 
+ enable generation of interactive SVG images that allow zooming and panning.
+ <br>Note that this requires a modern browser other than Internet Explorer.
  Tested and working are Firefox, Chrome, Safari, and Opera.
- \note For IE 9+ you need to set \ref cfg_html_file_extension "HTML_FILE_EXTENSION" to \c xhtml in order 
+ \note For IE 9+ you need to set \ref cfg_html_file_extension "HTML_FILE_EXTENSION" to \c xhtml in order
  to make the SVG files visible. Older versions of IE do not have SVG support.
 ]]>
       </docs>
@@ -3398,15 +3400,15 @@ to be found in the default search path.
     <option type='string' id='DOT_PATH' format='dir' defval='' depends='HAVE_DOT'>
       <docs>
 <![CDATA[
- The \c DOT_PATH tag can be used to specify the path where the \c dot tool can be found. 
- If left blank, it is assumed the \c dot tool can be found in the \c path. 
+ The \c DOT_PATH tag can be used to specify the path where the \c dot tool can be found.
+ If left blank, it is assumed the \c dot tool can be found in the \c path.
 ]]>
       </docs>
     </option>
     <option type='list' id='DOTFILE_DIRS' format='dir' depends='HAVE_DOT'>
       <docs>
 <![CDATA[
- The \c DOTFILE_DIRS tag can be used to specify one or more directories that 
+ The \c DOTFILE_DIRS tag can be used to specify one or more directories that
  contain dot files that are included in the documentation (see the
  \ref cmddotfile "\\dotfile" command).
 ]]>
@@ -3415,7 +3417,7 @@ to be found in the default search path.
     <option type='list' id='MSCFILE_DIRS' format='dir'>
       <docs>
 <![CDATA[
- The \c MSCFILE_DIRS tag can be used to specify one or more directories that 
+ The \c MSCFILE_DIRS tag can be used to specify one or more directories that
  contain msc files that are included in the documentation (see the
  \ref cmdmscfile "\\mscfile" command).
 ]]>
@@ -3424,7 +3426,7 @@ to be found in the default search path.
     <option type='list' id='DIAFILE_DIRS' format='dir'>
       <docs>
 <![CDATA[
- The \c DIAFILE_DIRS tag can be used to specify one or more directories that 
+ The \c DIAFILE_DIRS tag can be used to specify one or more directories that
  contain dia files that are included in the documentation (see the
  \ref cmddiafile "\\diafile" command).
 ]]>
@@ -3433,9 +3435,9 @@ to be found in the default search path.
     <option type='string' id='PLANTUML_JAR_PATH' format='dir' defval=''>
       <docs>
 <![CDATA[
- When using plantuml, the \c PLANTUML_JAR_PATH tag should be used to specify the path where 
- java can find the \c plantuml.jar file. If left blank, it is assumed PlantUML is not used or 
- called during a preprocessing step. Doxygen will generate a warning when it encounters a 
+ When using plantuml, the \c PLANTUML_JAR_PATH tag should be used to specify the path where
+ java can find the \c plantuml.jar file. If left blank, it is assumed PlantUML is not used or
+ called during a preprocessing step. Doxygen will generate a warning when it encounters a
  \ref cmdstartuml "\\startuml" command in this case and will not generate output for the diagram.
 ]]>
       </docs>
@@ -3443,7 +3445,7 @@ to be found in the default search path.
     <option type='string' id='PLANTUML_CFG_FILE' format='file' defval=''>
       <docs>
 <![CDATA[
- When using plantuml, the \c PLANTUML_CFG_FILE tag can be used to specify a configuration 
+ When using plantuml, the \c PLANTUML_CFG_FILE tag can be used to specify a configuration
  file for plantuml.
 ]]>
       </docs>
@@ -3452,16 +3454,16 @@ to be found in the default search path.
       <docs>
 <![CDATA[
  When using plantuml, the specified paths are searched for files specified by the \c !include
- statement in a plantuml block. 
+ statement in a plantuml block.
 ]]>
       </docs>
     </option>
     <option type='int' id='DOT_GRAPH_MAX_NODES' minval='0' maxval='10000' defval='50' depends='HAVE_DOT'>
       <docs>
 <![CDATA[
- The \c DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of 
+ The \c DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of
  nodes that will be shown in the graph. If the number of nodes in a graph
- becomes larger than this value, doxygen will truncate the graph, which is 
+ becomes larger than this value, doxygen will truncate the graph, which is
  visualized by representing a node as a red box. Note that doxygen if the number
  of direct children of the root node in a graph is already larger than
  \c DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note
@@ -3472,7 +3474,7 @@ to be found in the default search path.
     <option type='int' id='MAX_DOT_GRAPH_DEPTH' minval='0' maxval='1000' defval='0' depends='HAVE_DOT'>
       <docs>
 <![CDATA[
- The \c MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the 
+ The \c MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the
  graphs generated by \c dot. A depth value of 3 means that only nodes reachable
  from the root by following a path via at most 3 edges will be shown. Nodes
  that lay further from the root node will be omitted. Note that setting this
@@ -3486,12 +3488,12 @@ to be found in the default search path.
       <docs>
 <![CDATA[
  Set the \c DOT_TRANSPARENT tag to \c YES to generate images with a transparent
- background. This is disabled by default, because dot on Windows does not 
+ background. This is disabled by default, because dot on Windows does not
  seem to support this out of the box.
  <br>
- Warning: Depending on the platform used, 
- enabling this option may lead to badly anti-aliased labels on the edges of 
- a graph (i.e. they become hard to read). 
+ Warning: Depending on the platform used,
+ enabling this option may lead to badly anti-aliased labels on the edges of
+ a graph (i.e. they become hard to read).
 ]]>
       </docs>
     </option>
diff --git a/src/context.cpp b/src/context.cpp
index de312023..6f91dc39 100644
--- a/src/context.cpp
+++ b/src/context.cpp
@@ -1525,6 +1525,7 @@ class DefinitionContext
         case SrcLangExt_SQL:      result="sql";      break;
         case SrcLangExt_Tcl:      result="tcl";      break;
         case SrcLangExt_Markdown: result="markdown"; break;
+        case SrcLangExt_Sml:      result="sml";      break;
       }
       return result;
     }
@@ -9706,7 +9707,7 @@ class SymbolGroupListContext::Private : public GenericNodeListContext
     }
 };
 
-SymbolGroupListContext::SymbolGroupListContext(const SearchIndexList *sil) 
+SymbolGroupListContext::SymbolGroupListContext(const SearchIndexList *sil)
     : RefCountedContext("SymbolGroupListContext")
 {
   p = new Private(sil);
diff --git a/src/smlcode.l b/src/smlcode.l
index 4ad3375e..53cb62fa 100644
--- a/src/smlcode.l
+++ b/src/smlcode.l
@@ -21,6 +21,8 @@
  *  taught by Peter H. Froehlich <phf@acm.org>.
  */
 
+%option never-interactive
+%option prefix="smlcodeYY"
 
 %{
 
@@ -354,7 +356,7 @@ static void startCodeLine()
     //QCString lineNumber,lineAnchor;
     //lineNumber.sprintf("%05d",g_yyLineNr);
     //lineAnchor.sprintf("l%05d",g_yyLineNr);
-   
+
     Definition *d   = g_sourceFileDef->getSourceDefinition(g_yyLineNr);
     //printf("startCodeLine %d d=%p\n",g_yyLineNr,d);
     //g_code->startLineNumber();
@@ -392,7 +394,7 @@ static void startCodeLine()
     }
     //g_code->endLineNumber();
   }
-  g_code->startCodeLine(g_sourceFileDef); 
+  g_code->startCodeLine(g_sourceFileDef);
   if (g_currentFontClass)
   {
     g_code->startFontClass(g_currentFontClass);
@@ -431,7 +433,7 @@ static void writeMultiLineCodeLink(CodeOutputInterface &ol,
 		  Definition *d,
 		  const char *text)
 {
-  static bool sourceTooltips = Config_getBool("SOURCE_TOOLTIPS");
+  static bool sourceTooltips = Config_getBool(SOURCE_TOOLTIPS);
   TooltipManager::instance()->addTooltip(d);
   QCString ref  = d->getReference();
   QCString file = d->getOutputFileBase();
@@ -632,7 +634,7 @@ static void generateClassOrGlobalLink(CodeOutputInterface &ol,char *clName,
   }
   else
   {
-    if (lcd!=SmlVariableContext::dummyContext) 
+    if (lcd!=SmlVariableContext::dummyContext)
     {
       g_theCallContext.setClass(lcd);
     }
@@ -649,7 +651,7 @@ static void generateClassOrGlobalLink(CodeOutputInterface &ol,char *clName,
       Definition *d = md->getOuterScope()==Doxygen::globalScope ?
                       md->getBodyDef() : md->getOuterScope();
       if (md->getGroupDef()) d = md->getGroupDef();
-      if (d && d->isLinkable() && md->isLinkable() && 
+      if (d && d->isLinkable() && md->isLinkable() &&
           g_currentMemberDef && g_collectXRefs)
       {
         addDocCrossReference(g_currentMemberDef,md);
@@ -676,7 +678,7 @@ static void generateClassOrGlobalLink(CodeOutputInterface &ol,char *clName,
 	  Definition *d = md->getOuterScope()==Doxygen::globalScope ?
 	                  md->getBodyDef() : md->getOuterScope();
 	  if (md->getGroupDef()) d = md->getGroupDef();
-	  if (d && d->isLinkable() && md->isLinkable() && 
+	  if (d && d->isLinkable() && md->isLinkable() &&
               g_currentMemberDef && g_collectXRefs)
 	  {
 	    addDocCrossReference(g_currentMemberDef,md);
@@ -699,7 +701,7 @@ static void generateClassOrGlobalLink(CodeOutputInterface &ol,char *clName,
 	    Definition *d = md->getOuterScope()==Doxygen::globalScope ?
 	                    md->getBodyDef() : md->getOuterScope();
 	    if (md->getGroupDef()) d = md->getGroupDef();
-	    if (d && d->isLinkable() && md->isLinkable() && 
+	    if (d && d->isLinkable() && md->isLinkable() &&
                 g_currentMemberDef && g_collectXRefs)
 	    {
 	      addDocCrossReference(g_currentMemberDef,md);
@@ -709,7 +711,7 @@ static void generateClassOrGlobalLink(CodeOutputInterface &ol,char *clName,
         }
       }
     }
-    
+
     // nothing found, just write out the word
     codifyLines(clName);
     addToSearchIndex(clName);
@@ -781,7 +783,7 @@ static bool findMemberLink(CodeOutputInterface &ol,Definition *sym,const char *s
     DBG_CTX((stderr,"cd=%s thisCd=%s\n",cd?cd->name().data():"<none>",thisCd?thisCd->name().data():"<none>"));
 
     // TODO: find the nearest base class in case cd is a base class of
-    // thisCd 
+    // thisCd
     if (cd==thisCd || (thisCd && thisCd->isBaseClass(cd,TRUE)))
     {
       writeMultiLineCodeLink(ol,sym,symName);
diff --git a/src/smlscanner.l b/src/smlscanner.l
index 87f1ec41..dba6a71e 100644
--- a/src/smlscanner.l
+++ b/src/smlscanner.l
@@ -1,3 +1,6 @@
+%option never-interactive
+%option prefix="smlscannerYY"
+
 %{
 
 /* includes */
diff --git a/src/types.h b/src/types.h
index 90bbbfcc..2fc76343 100644
--- a/src/types.h
+++ b/src/types.h
@@ -55,7 +55,7 @@ enum SrcLangExt
   SrcLangExt_XML      = 0x04000,
   SrcLangExt_Tcl      = 0x08000,
   SrcLangExt_Markdown = 0x10000,
-  SrcLangExt_SQL      = 0x20000
+  SrcLangExt_SQL      = 0x20000,
   SrcLangExt_Sml      = 0x40000
 };
 
-- 
2.11.0

