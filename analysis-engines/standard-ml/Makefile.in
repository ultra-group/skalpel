# Copyright 2009 2010 2011 2012 2013 Heriot-Watt University
# Copyright 2018 Christian Gregg
#
# Skalpel is a free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Skalpel is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Skalpel.  If not, see <http://www.gnu.org/licenses/>.
#
#  o Authors:     Vincent Rahli, John Pirie
#  o Affiliation: Heriot-Watt University, MACS
#  o Date:        25 May 2010
#  o File name:   Makefile.in
#  o Description: Initial Makefile from which a Makefile file can be
#      		  generated using the configure script (use autoconf
#                 to generate the configure script)
#

prefix=@prefix@
TMPDIR=/tmp

#MLTONPROFOP can be one of these:
#  - time:  how much time is spent on each function
#  - alloc: how many bytes each function allocates
#  - count: how many times each function is called
MLTONPROFOP=time

# Detect OS (Linux or OSX)
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
    PLATFORM = linux
endif
ifeq ($(UNAME_S),Darwin)
    PLATFORM = darwin
endif

default:
	# Make targets are described as follows:
	#  - generate a binary (using MLton, recommended)               : 'mlton-bin'
	#  - generate a binary (using SML/NJ)                           : 'smlnj-bin'
	#  - generate a binary (using Poly/ML)                          : 'polyml-bin'
	#  - install                                                    : 'cleaner'
	#  - run the profiler on test-prog.sml (using MLton)            : 'mlton-profile'
	#  - clean the directory of autogenerated files                 : 'clean'
	#  - generate a binary to be used in the webdemo (using MLton)  : 'mlton-bin-webdemo'
	#  - recreate the dependencies of Skalpel                       : 'sml-tes-deps'
	#  - (DEV) cmtodot generates a .dot from the .cm                : 'cmtodot'

################################################################################
#                          Building a Skalpel binary                           #
################################################################################

gen-parse:
	mllex  parse/ML.lex
	mlyacc parse/ML.grm
	sed 's/raise (mlyAction i392)/raise (Fail ("Parsing failure: No rule matching program syntax"))/' parse/ML.grm.sml > parse/ML.grm.sml.tmp
	mv parse/ML.grm.sml.tmp parse/ML.grm.sml
	mllex  parse/MLB.lex
	mlyacc parse/MLB.grm
	mv parse/ML.lex.sml parse/ML-mlton.lex.sml
	mv parse/ML.grm.sml parse/ML-mlton.grm.sml
	mv parse/ML.grm.sig parse/ML-mlton.grm.sig
	mv parse/MLB.lex.sml parse/MLB-mlton.lex.sml
	mv parse/MLB.grm.sml parse/MLB-mlton.grm.sml
	mv parse/MLB.grm.sig parse/MLB-mlton.grm.sig

smlnj-bin: gen-cm-sources gen-parse
	cp RunSlicer.sml RunSlicer.sml.original
	sed s/"val SKALPEL_VERSION = \".*\""/"val SKALPEL_VERSION = \"Built with SML\/NJ on `date`. Skalpel version: "`git rev-parse HEAD`\"/ RunSlicer.sml > RunSlicer.sml.tmp
	mv RunSlicer.sml.tmp RunSlicer.sml
	@echo "CM.make \"sources.cm\"; open Slicer; SMLofNJ.exportFn (\"${TMPDIR}/skalpel\", Slicer.smlnjEntryPoint);" | sml
	heap2exec ${TMPDIR}/skalpel.x86-${PLATFORM} ${TMPDIR}/skalpel
	mkdir -p bin
	mv ${TMPDIR}/skalpel bin/skalpel
	mv RunSlicer.sml.original RunSlicer.sml

mlton-base: gen-parse
	cp RunSlicer.sml RunSlicer.sml.original
	sed s/"val SKALPEL_VERSION = \".*\""/"val SKALPEL_VERSION = \"Built with MLton on `date`. Skalpel version: "`git rev-parse HEAD`\"/ RunSlicer.sml > RunSlicer.sml.tmp
	mv RunSlicer.sml.tmp RunSlicer.sml

documentation:
	cp doxygen-config-file doxygen-config-file.original
	sed s/"PROJECT_NUMBER = \".*\""/"PROJECT_NUMBER = \"Git SHA-1: "`git rev-parse HEAD`\"/ doxygen-config-file > doxygen-config-file.tmp
	mv doxygen-config-file.tmp doxygen-config-file
	doxygen doxygen-config-file

mlton-bin: gen-mlb-sources mlton-base
	echo "val _ = Slicer.mltonEntryPoint ();" > build-files/mlton-control.sml
	mkdir -p bin
	mlton -prefer-abs-paths true -output bin/skalpel sources.mlb
	mv RunSlicer.sml.original RunSlicer.sml

polyml-bin: gen-poly-sources gen-parse
	cp RunSlicer.sml RunSlicer.sml.original
	sed s/"val SKALPEL_VERSION = \".*\""/"val SKALPEL_VERSION = \"Built with Poly\/ML on `date`. Skalpel version: `git rev-parse HEAD`"\"/ RunSlicer.sml > RunSlicer.sml.tmp
	mv RunSlicer.sml.tmp RunSlicer.sml
	poly < sources.poly
	cc -o skalpel skalpel.o -lpolymain -lpolyml -pthread -lgmp -ldl -lm -lstdc++
	rm skalpel.o
	mkdir -p bin
	mv skalpel bin/skalpel
	mv RunSlicer.sml.original RunSlicer.sml

################################################################################
#                          Generating sources.* files                          #
################################################################################

gen-cm-sources:
	echo "Library" > sources.cm
	cat build-files/exported-structures >> sources.cm
	echo "is" >> sources.cm
	cat build-files/smlnj-libraries >> sources.cm
	cat build-files/sources.tes >> sources.cm

gen-mlb-sources:
	echo "local" > sources.mlb
	cat build-files/mlton-libraries >> sources.mlb
	cat build-files/sources.tes >> sources.mlb
	echo "in" >> sources.mlb
	cat build-files/exported-structures >> sources.mlb
	echo "build-files/mlton-control.sml" >> sources.mlb
	echo "end" >> sources.mlb

gen-poly-sources:
	cat build-files/polyml-libraries > sources.poly
	cat build-files/sources.tes | sed s/^/"use \""/ | sed s/$$/"\";"/ >> sources.poly
	echo "TextIO.flushOut TextIO.stdOut;" >> sources.poly
	echo "PolyML.export(\"skalpel\", Slicer.polymlEntryPoint);" >> sources.poly




################################################################################
#                          Extra tools (e.g. webdemo)                          #
################################################################################

mlton-bin-webdemo: gen-mlb-sources mlton-base
	echo "val _ = Slicer.setWebDemo true;" >> build-files/mlton-control.sml
	echo "val _ = Slicer.mltonEntryPoint ();" >> build-files/mlton-control.sml
	mkdir -p bin
	mlton -output bin/skalpel-webdemo-bin sources.mlb

bin/cmtodot: PGOps.sml
	make cmtodot

cmtodot:
	@echo "use \"PGOps.sml\"; open SmlTesDeps; SMLofNJ.exportFn (\"${TMPDIR}/cmtodot\", cmToDot);" | sml
	heap2exec ${TMPDIR}/cmtodot.x86-${PLATFORM} ${TMPDIR}/cmtodot
	mkdir -p bin
	mv ${TMPDIR}/cmtodot bin/cmtodot

sml-tes-deps:
	@echo "***** Attempting to do SML/NJ specific commands. If you are not using the SML/NJ compiler, ignore any errors"
	ml-makedepend "sources.cm" "bin/slicer-smlnj"
	cat Makefile | sed "s/^\(# END  : ml-makedepend\)/\tmake smlnj-bin\n\1/" > tmp-makefile
	mv tmp-makefile Makefile

mlton-profile: gen-mlb-sources mlton-base
	echo "val _ = Slicer.mltonEntryPoint ();" >> build-files/mlton-control.sml
	mlton -verbose 3 -profile ${MLTONPROFOP} -profile-branch true -profile-stack true -profile-val true sources.mlb
	mv sources bin/skalpel-profiling
	./bin/skalpel-profiling -b 2 ../../lib/basis.sml -h out.html -t 60000 test-prog.sml
	mlprof -show-line true -raw true sources mlmon.out > profile-mlton-`date +%Y-%m-%d`
	mv RunSlicer.sml.original RunSlicer.sml

################################################################################
#                        Installation/Uninstall Section                        #
################################################################################

# binary and documentation
install-core:
	mkdir -p $(DESTDIR)@prefix@/bin/
	cp bin/skalpel             $(DESTDIR)@prefix@/bin/

	mkdir -p $(DESTDIR)@prefix@/share/skalpel/
	cp ../../lib/basis.sml $(DESTDIR)@prefix@/share/skalpel/

# binary and documentation
install:
	mkdir -p $(DESTDIR)@prefix@/bin/
	cp bin/skalpel             $(DESTDIR)@prefix@/bin/

	mkdir -p $(DESTDIR)@prefix@/share/skalpel/
	cp ../../lib/basis.sml $(DESTDIR)@prefix@/share/skalpel/
	cp -r ../../testing/  $(DESTDIR)@prefix@/share/skalpel/

	mkdir -p $(DESTDIR)@prefix@/share/doc/skalpel
	cp ../../documentation/end-user/user-guide/user-guide.pdf  $(DESTDIR)@prefix@/share/doc/skalpel/

	mkdir -p $(DESTDIR)@prefix@/share/man/man1/
	cp ../../documentation/end-user/man-pages/skalpel.1.gz                 $(DESTDIR)@prefix@/share/man/man1/

	mkdir -p $(DESTDIR)@prefix@/share/info/
	install-info ../../documentation/end-user/info-pages/Skalpel.info $(DESTDIR)@prefix@/share/info/Skalpel.gz

# emacs lisp files
install-emacs:
	mkdir -p $(DESTDIR)@prefix@/share/emacs/site-lisp/
	cp ../../front-ends/emacs/skalpel-config.el $(DESTDIR)@prefix@/share/emacs/site-lisp/skalpel-config.el

	mkdir -p $(DESTDIR)@prefix@/share/emacs/site-lisp/skalpel-emacs/
	cp ../../front-ends/emacs/skalpel-menu.el $(DESTDIR)@prefix@/share/emacs/site-lisp/skalpel-emacs/skalpel-menu.el
	cp ../../front-ends/emacs/skalpel-main.el $(DESTDIR)@prefix@/share/emacs/site-lisp/skalpel-emacs/skalpel-main.el
	cp ../../front-ends/emacs/skalpel-debug-utils.el $(DESTDIR)@prefix@/share/emacs/site-lisp/skalpel-emacs/skalpel-debug-utils.el

install-all: install install-emacs

clean:
	rm configure Makefile
	rm -rf autom4te.cache
	rm -f mlmon.out
	rm -f profile*
	rm -f config.*
	rm -f skalpel.du
	# files generated by the parser and lexer
	rm -f parse/*.grm.sml
	rm -f parse/*.grm.sig
	rm -f parse/*.lex.sml
	rm -f build-files/mlton-control.sml
	# removes the .cm folder created by CM and the files created by the lexer and parser
	rm -rf bin/
	rm -rf .cm cbt-sets/.cm                              # .cm directories
	rm -f parse/*.grm.sml parse/*.grm.sig prase/*.lex.sml  # files generated by the parser and lexer
	rm -f thelibrary.sml                                   # files generated by PGOps.sml
	rm -f sources*

uninstall:
	# remove binary
	rm -f $(DESTDIR)@prefix@/bin/skalpel
	rm -f $(DESTDIR)@prefix@/bin/skalpel-perl-to-bash

	# man, info, README and user guide
	rm -f $(DESTDIR)@prefix@/share/man/man1/skalpel.1.gz
	rm -f $(DESTDIR)@prefix@/share/info/Skalpel.gz
	rm -f $(DESTDIR)@prefix@/share/doc/skalpel/user-guide.pdf

	# basis and testing
	rm -f $(DESTDIR)@prefix@/share/skalpel/basis.sml
	rm -rf $(DESTDIR)@prefix@/share/skalpel/testing

	# emacs lisp files (we try to remove them whether these are installed or not
	rm -f $(DESTDIR)@prefix@/share/emacs/site-lisp/skalpel-config.el
	rm -f $(DESTDIR)@prefix@/share/emacs/site-lisp/skalpel-emacs/skalpel-menu.el
	rm -f $(DESTDIR)@prefix@/share/emacs/site-lisp/skalpel-emacs/skalpel-main.el
	rm -f $(DESTDIR)@prefix@/share/emacs/site-lisp/skalpel-emacs/skalpel-debug-utils.el

	if [ -e "$(DESTDIR)@prefix@/share/skalpel" ]; then \
		rmdir --ignore-fail-on-non-empty $(DESTDIR)@prefix@/share/skalpel ;\
	fi
	if [ -e "$(DESTDIR)@prefix@/share/doc/skalpel" ]; then \
		rmdir --ignore-fail-on-non-empty $(DESTDIR)@prefix@/share/doc/skalpel ;\
	fi
	if [ -e "$(DESTDIR)@prefix@/share/emacs/site-lisp/site-start.d" ]; then \
		rmdir --ignore-fail-on-non-empty $(DESTDIR)@prefix@/share/emacs/site-lisp/site-start.d ;\
	fi
	if [ -e "$(DESTDIR)@prefix@/share/emacs/site-lisp/skalpel-emacs" ]; then \
		rmdir --ignore-fail-on-non-empty $(DESTDIR)@prefix@/share/emacs/site-lisp/skalpel-emacs ;\
	fi

#
# THIS IS THE END OF THE NON AUTOMATICALY CREATED STUFF
#
